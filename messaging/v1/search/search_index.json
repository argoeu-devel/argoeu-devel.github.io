{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ARGO Messaging Service Documentation Overview and Introduction Messaging Backend: Apache Kafka Messaging API flow Authentication Authorization Project and User creation Security Argo Messaging API Basic Information API Error Messages API Calls Authentication Users Projects Topics Subscriptions Metrics Schemas Version Information Health Status Registrations Frequent Questions General Ruby related","title":"Home"},{"location":"api_auth/","text":"Introduction Each user is authenticated by adding the url parameter ?key=T0K3N in each API request If a user does not provide a valid token the following response is returned: { error : { code : 401, message : Unauthenticated , status : UNAUTHENTICATED } } The ARGO Messaging Service supports authorization. If a user is unauthorized the following response is returned: { error : { code : 403, message : Access to this resource is forbidden , status : FORBIDDEN } }","title":"API Authentication"},{"location":"api_auth/#introduction","text":"Each user is authenticated by adding the url parameter ?key=T0K3N in each API request If a user does not provide a valid token the following response is returned: { error : { code : 401, message : Unauthenticated , status : UNAUTHENTICATED } } The ARGO Messaging Service supports authorization. If a user is unauthorized the following response is returned: { error : { code : 403, message : Access to this resource is forbidden , status : FORBIDDEN } }","title":"Introduction"},{"location":"api_basic/","text":"Introduction The ARGO Messaging Service API implements the Google PubSub specification and thus supports HTTP RPC-style methods in the form of: https://messaging.argo.grnet.gr/api/projects/METHOD All methods must be called using HTTPS. Arguments can be passed as GET or POST params, or a mix. The response contains a 200 OK for a successful request and a JSON object in case of an error. For failure results, the error property will contain a short machine-readable error code. In the case of problematic calls, during handling user\u2019s request the API responds using a predefined schema (described in chapter Errors), that contains a short machine-readable warning code, an error code and an error description (or list of them, in the case of multiple errors). Each user is authenticated by adding the url parameter ?key=T0K3N in each API request Configuration file: config.json The first step for using the messaging API is to edit the main configuration file. The ARGO Messaging Service main configuration file is config.json. An example configuration is listed below: { bind_ip : , port :8080, zookeeper_hosts :[ localhost ], kafka_znode : , store_host : localhost , store_db : argo_msg , certificate : /etc/pki/tls/certs/localhost.crt , certificate_key : /etc/pki/tls/private/localhost.key , per_resource_auth :true, service_token : S0M3T0K3N , log_level : INFO , log_facilities : [ syslog , console ] } Explanation of config parameters: Parameter Description bind_ip the ip address to listen to. port The port where the API will listen to zookeeper_hosts List of zookeeper instances that are used to sync kafka kafka_znode The znode under which Kafka writes its data on Zookeeper. Default is \"\" meaning the root node store_host Address:port of the datastore server store_db Database name used on the datastore server certificate path to the node's TLS certificate file certificate_key path to the certificate's private key per_resource_auth enable authorization per resource (topic/subscription) service_token (optional) If set, enables full service-wide access to the api to initialize projects,users and resources log_level set the desired log level (defaults to \"INFO\") log_facilities logging output, if left empty, it defaults to console) Location of config.json : API will look first for config.json locally in the folder where the executable runs and then in the /etc/argo-messaging/ location. Command line parameters Apart from configuration file, argo-messaging service accepts configuration parameters in the command line. The list of the available command line parameters is displayed if the user issues ./argo-messaging-service --help The available command line parameters are listed as follows: --bind-ip string ip address to listen to (default localhost ) --certificate string certificate file *.crt (default /etc/pki/tls/certs/localhost.crt ) --certificate-key string certificate key file *.key (default /etc/pki/tls/private/localhost.key ) --config-dir string directory path to an alternative json config file --kafka-znode string kafka zookeeper node name --log-level string set the desired log level --per-resource-auth enable per resource authentication (default true) --port int port number to listen to (default 8080) --service-key string service token definition for immediate full api access --store-db string datastore (mongodb) database name (default argo_msg ) --store-host string datastore (mongodb) host (default localhost ) --zookeeper-hosts value list of zookeeper hosts to connect to (default [localhost]) User can optionally specifiy an alternative configuration file directory with the use of the --config-dir parameter For example: ./argo-messaging-service --config-dir=/root/alternative/config/ The /root/alternative/config/config.json must exist","title":"API Basic Information"},{"location":"api_basic/#introduction","text":"The ARGO Messaging Service API implements the Google PubSub specification and thus supports HTTP RPC-style methods in the form of: https://messaging.argo.grnet.gr/api/projects/METHOD All methods must be called using HTTPS. Arguments can be passed as GET or POST params, or a mix. The response contains a 200 OK for a successful request and a JSON object in case of an error. For failure results, the error property will contain a short machine-readable error code. In the case of problematic calls, during handling user\u2019s request the API responds using a predefined schema (described in chapter Errors), that contains a short machine-readable warning code, an error code and an error description (or list of them, in the case of multiple errors). Each user is authenticated by adding the url parameter ?key=T0K3N in each API request","title":"Introduction"},{"location":"api_basic/#configuration-file-configjson","text":"The first step for using the messaging API is to edit the main configuration file. The ARGO Messaging Service main configuration file is config.json. An example configuration is listed below: { bind_ip : , port :8080, zookeeper_hosts :[ localhost ], kafka_znode : , store_host : localhost , store_db : argo_msg , certificate : /etc/pki/tls/certs/localhost.crt , certificate_key : /etc/pki/tls/private/localhost.key , per_resource_auth :true, service_token : S0M3T0K3N , log_level : INFO , log_facilities : [ syslog , console ] }","title":"Configuration file: config.json"},{"location":"api_basic/#explanation-of-config-parameters","text":"Parameter Description bind_ip the ip address to listen to. port The port where the API will listen to zookeeper_hosts List of zookeeper instances that are used to sync kafka kafka_znode The znode under which Kafka writes its data on Zookeeper. Default is \"\" meaning the root node store_host Address:port of the datastore server store_db Database name used on the datastore server certificate path to the node's TLS certificate file certificate_key path to the certificate's private key per_resource_auth enable authorization per resource (topic/subscription) service_token (optional) If set, enables full service-wide access to the api to initialize projects,users and resources log_level set the desired log level (defaults to \"INFO\") log_facilities logging output, if left empty, it defaults to console) Location of config.json : API will look first for config.json locally in the folder where the executable runs and then in the /etc/argo-messaging/ location.","title":"Explanation of config parameters:"},{"location":"api_basic/#command-line-parameters","text":"Apart from configuration file, argo-messaging service accepts configuration parameters in the command line. The list of the available command line parameters is displayed if the user issues ./argo-messaging-service --help The available command line parameters are listed as follows: --bind-ip string ip address to listen to (default localhost ) --certificate string certificate file *.crt (default /etc/pki/tls/certs/localhost.crt ) --certificate-key string certificate key file *.key (default /etc/pki/tls/private/localhost.key ) --config-dir string directory path to an alternative json config file --kafka-znode string kafka zookeeper node name --log-level string set the desired log level --per-resource-auth enable per resource authentication (default true) --port int port number to listen to (default 8080) --service-key string service token definition for immediate full api access --store-db string datastore (mongodb) database name (default argo_msg ) --store-host string datastore (mongodb) host (default localhost ) --zookeeper-hosts value list of zookeeper hosts to connect to (default [localhost]) User can optionally specifiy an alternative configuration file directory with the use of the --config-dir parameter For example: ./argo-messaging-service --config-dir=/root/alternative/config/ The /root/alternative/config/config.json must exist","title":"Command line parameters"},{"location":"api_errors/","text":"Errors In case of Error during handling user\u2019s request the API responds using the following schema: { error : { code : 500, message : Something bad happened , status : INTERNAL } } Error Codes The following error codes are the possinble errors of all methods Error Code Status Related Requests Ack Timeout 408 TIMEOUT Acknowledge Message (POST) - more info Topic already exists 409 ALREADY_EXISTS Create Topic (PUT) Subscription already exists 409 ALREADY_EXISTS Create Subscription (PUT) Invalid Topics Name 400 INVALID_ARGUMENT Create Subscription (PUT) Topic Doesn't Exist 404 NOT_FOUND Show specific Topic (GET) Invalid Topic ACL arguments 400 INVALID_ARGUMENT Modify Topic ACL (POST) Subscription Doesn't Exist 404 NOT_FOUND Show specific Subscription (GET) Message size to large 413 INVALID_ARGUMENT Topic Publish (POST) Invalid Subscription Arguments 400 INVALID_ARGUMENT Create Subscription (POST), Modify Push Configuration (POST) Invalid Subscription ACL arguments 400 INVALID_ARGUMENT Modify Subscription ACL (POST) Invalid ACK Parameter 400 INVALID_ARGUMENT Subscription Acknowledge (POST) Invalid ACK id 400 INVALID_ARGUMENT Subscription Acknowledge (POST) Invalid pull parameters 400 INVALID_ARGUMENT Subscription Pull (POST) Unauthorized 401 UNAUTHORIZED All requests (if a user is not authenticated) Forbidden Access to Resource 403 FORBIDDEN All requests (if a user is forbidden to access the resource)","title":"API Error Messages"},{"location":"api_errors/#errors","text":"In case of Error during handling user\u2019s request the API responds using the following schema: { error : { code : 500, message : Something bad happened , status : INTERNAL } }","title":"Errors"},{"location":"api_errors/#error-codes","text":"The following error codes are the possinble errors of all methods Error Code Status Related Requests Ack Timeout 408 TIMEOUT Acknowledge Message (POST) - more info Topic already exists 409 ALREADY_EXISTS Create Topic (PUT) Subscription already exists 409 ALREADY_EXISTS Create Subscription (PUT) Invalid Topics Name 400 INVALID_ARGUMENT Create Subscription (PUT) Topic Doesn't Exist 404 NOT_FOUND Show specific Topic (GET) Invalid Topic ACL arguments 400 INVALID_ARGUMENT Modify Topic ACL (POST) Subscription Doesn't Exist 404 NOT_FOUND Show specific Subscription (GET) Message size to large 413 INVALID_ARGUMENT Topic Publish (POST) Invalid Subscription Arguments 400 INVALID_ARGUMENT Create Subscription (POST), Modify Push Configuration (POST) Invalid Subscription ACL arguments 400 INVALID_ARGUMENT Modify Subscription ACL (POST) Invalid ACK Parameter 400 INVALID_ARGUMENT Subscription Acknowledge (POST) Invalid ACK id 400 INVALID_ARGUMENT Subscription Acknowledge (POST) Invalid pull parameters 400 INVALID_ARGUMENT Subscription Pull (POST) Unauthorized 401 UNAUTHORIZED All requests (if a user is not authenticated) Forbidden Access to Resource 403 FORBIDDEN All requests (if a user is forbidden to access the resource)","title":"Error Codes"},{"location":"api_health/","text":"Service health check for ams and push server This method can be used to retrieve api information regarding the proper functionality of the ams service and the push server [GET] Get Health status Request GET /v1/status Example request details=(true|false) indicates if we need detailed information about errors regarding the push server. A user token corresponding to a service_admin or admin_viewer has to be provided when using the details parameter. curl -H Content-Type: application/json https://{URL}/v1/status?details=true key=token Responses If successful, the response returns the health status of the service Success Response 200 OK { status : ok , push_servers : [ { endpoint : localhost:5555 , status : Success: SERVING } ] } Errors Please refer to section Errors to see all possible Errors","title":"Service health check for ams and push server"},{"location":"api_health/#service-health-check-for-ams-and-push-server","text":"This method can be used to retrieve api information regarding the proper functionality of the ams service and the push server","title":"Service health check for ams and push server"},{"location":"api_health/#get-get-health-status","text":"","title":"[GET] Get Health status"},{"location":"api_health/#request","text":"GET /v1/status","title":"Request"},{"location":"api_health/#example-request","text":"details=(true|false) indicates if we need detailed information about errors regarding the push server. A user token corresponding to a service_admin or admin_viewer has to be provided when using the details parameter. curl -H Content-Type: application/json https://{URL}/v1/status?details=true key=token","title":"Example request"},{"location":"api_health/#responses","text":"If successful, the response returns the health status of the service Success Response 200 OK { status : ok , push_servers : [ { endpoint : localhost:5555 , status : Success: SERVING } ] }","title":"Responses"},{"location":"api_health/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_metrics/","text":"Operational Metrics API Calls Operational Metrics include metrics related to the CPU or memory usage of the ams nodes [GET] Get Operational Metrics This request gets a list of operational metrics for the specific ams servcice Request GET /v1/metrics Example request curl -H Content-Type: application/json https://{URL}/v1/metrics?key=S3CR3T Responses If successful, the response returns a list of related operational metrics Success Response 200 OK { metrics : [ { metric : ams_node.cpu_usage , metric_type : percentage , value_type : float64 , resource_type : ams_node , resource_name : host.foo , timeseries : [ { timestamp : 2017-07-04T10:18:07Z , value : 0.2 } ], description : Percentage value that displays the CPU usage of ams service in the specific node }, { metric : ams_node.memory_usage , metric_type : percentage , value_type : float64 , resource_type : ams_node , resource_name : host.foo , timeseries : [ { timestamp : 2017-07-04T10:18:07Z , value : 0.1 } ], description : Percentage value that displays the Memory usage of ams service in the specific node } ] } Errors Please refer to section Errors to see all possible Errors [GET] Get VA Metrics This request returns the total amount of messages per project for the given time window.The number of messages is calculated using the daily message count for each one of the project's topics. It also returns the amount of created users , topics and subscriptions within the given time window. Request GET /v1/metrics/va_metrics URL parameters start_date : start date for querying projects topics daily message count(optional), default value is the start unix time end_date : start date for querying projects topics daily message count(optional), default is the time of the api call projects : which projects to include to the query(optional), default is all registered projects Example request curl -H Content-Type: application/json https://{URL}/v1/metrics/va_metrics Example request with URL parameters curl -H Content-Type: application/json https://{URL}/v1/metrics/va_metrics?start_date=2019-03-01 end_date=2019-07-24 projects=ARGO,ARGO-2 Responses If successful, the response returns the total amount of messages per project, users,topics and subscriptions for the given time window Success Response 200 OK { projects_metrics : { projects : [ { project : ARGO-2 , message_count : 8, average_daily_messages : 2 }, { project : ARGO , message_count : 25669, average_daily_messages : 120 } ], total_message_count : 25677, average_daily_messages : 122 }, users_count : 44, topics_count : 33, subscriptions_counter : 100 } Errors Please refer to section Errors to see all possible Errors","title":"API Operational Metrics"},{"location":"api_metrics/#operational-metrics-api-calls","text":"Operational Metrics include metrics related to the CPU or memory usage of the ams nodes","title":"Operational Metrics API Calls"},{"location":"api_metrics/#get-get-operational-metrics","text":"This request gets a list of operational metrics for the specific ams servcice","title":"[GET] Get Operational Metrics"},{"location":"api_metrics/#request","text":"GET /v1/metrics","title":"Request"},{"location":"api_metrics/#example-request","text":"curl -H Content-Type: application/json https://{URL}/v1/metrics?key=S3CR3T","title":"Example request"},{"location":"api_metrics/#responses","text":"If successful, the response returns a list of related operational metrics Success Response 200 OK { metrics : [ { metric : ams_node.cpu_usage , metric_type : percentage , value_type : float64 , resource_type : ams_node , resource_name : host.foo , timeseries : [ { timestamp : 2017-07-04T10:18:07Z , value : 0.2 } ], description : Percentage value that displays the CPU usage of ams service in the specific node }, { metric : ams_node.memory_usage , metric_type : percentage , value_type : float64 , resource_type : ams_node , resource_name : host.foo , timeseries : [ { timestamp : 2017-07-04T10:18:07Z , value : 0.1 } ], description : Percentage value that displays the Memory usage of ams service in the specific node } ] }","title":"Responses"},{"location":"api_metrics/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_metrics/#get-get-va-metrics","text":"This request returns the total amount of messages per project for the given time window.The number of messages is calculated using the daily message count for each one of the project's topics. It also returns the amount of created users , topics and subscriptions within the given time window.","title":"[GET] Get VA Metrics"},{"location":"api_metrics/#request_1","text":"GET /v1/metrics/va_metrics","title":"Request"},{"location":"api_metrics/#url-parameters","text":"start_date : start date for querying projects topics daily message count(optional), default value is the start unix time end_date : start date for querying projects topics daily message count(optional), default is the time of the api call projects : which projects to include to the query(optional), default is all registered projects","title":"URL parameters"},{"location":"api_metrics/#example-request_1","text":"curl -H Content-Type: application/json https://{URL}/v1/metrics/va_metrics","title":"Example request"},{"location":"api_metrics/#example-request-with-url-parameters","text":"curl -H Content-Type: application/json https://{URL}/v1/metrics/va_metrics?start_date=2019-03-01 end_date=2019-07-24 projects=ARGO,ARGO-2","title":"Example request with URL parameters"},{"location":"api_metrics/#responses_1","text":"If successful, the response returns the total amount of messages per project, users,topics and subscriptions for the given time window Success Response 200 OK { projects_metrics : { projects : [ { project : ARGO-2 , message_count : 8, average_daily_messages : 2 }, { project : ARGO , message_count : 25669, average_daily_messages : 120 } ], total_message_count : 25677, average_daily_messages : 122 }, users_count : 44, topics_count : 33, subscriptions_counter : 100 }","title":"Responses"},{"location":"api_metrics/#errors_1","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/","text":"Project Api Calls ARGO Messaging Service supports project entities as a basis of organizing and isolating groups of users resources [GET] Manage Projects - List all projects This request lists all available projects in the service Request GET /v1/projects Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/projects?key=S3CR3T Responses If successful, the response contains a list of all available projects Success Response 200 OK { projects : [ { name : PROJECT_1 , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : simple project }, { name : PROJECT_2 , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : simple project }, { name : BRAND_NEW , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : brand new project } ] } Errors Please refer to section Errors to see all possible Errors [GET] Manage Projects - List a specific project This request lists information about a specific project Request GET /v1/projects/{project_name} Where Project_name: Name of the project to get information on Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW?key=S3CR3T Responses If successful, the response contains information about the specific project Success Response 200 OK { name : BRAND_NEW , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : brand new project } Errors Please refer to section Errors to see all possible Errors [POST] Manage Projects - Create new project This request creates a new project with the given project_name with a POST request Request POST /v1/projects/{project_name} Where Project_name: Name of the project to create Post body: { description : a simple description } Example request curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/PROJECT_NEW?key=S3CR3T Responses If successful, the response contains the newly created project Success Response 200 OK { name : PROJET_NEW created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : brand new project } Errors Please refer to section Errors to see all possible Errors [PUT] Manage Projects - Update a project This request updates information (such as name,description) on an existing project (PUT) Request PUT /v1/projects/{project_name} Where Project_name: Name of the project to create PUT body: { name : new project name , description : a simple description } Example request curl -X PUT -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/PROJECT_NEW?key=S3CR3T Responses If successful, the response contains the newly updated Success Response 200 OK { name : PROJET_NEW_UPDATED , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-13T23:00:00Z , created_by : userA , description : description project updated } Errors Please refer to section Errors to see all possible Errors [DELETE] Manage Projects - Delete Project This request deletes a specific project Request DELETE /v1/projects/{project_name} Where Project_name: Name of the project to delete Example request curl -X DELETE -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW?key=S3CR3T Responses Success Response Code: 200 OK , Empty response if successful. Errors Please refer to section Errors to see all possible Errors [GET] List all users that are members of a specific project Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/ARGO2/members?key=S3CR3T Responses If successful, the response contains a list of all available users in the specific project Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : , totalSize : 1 } Unpriviledge mode (non service_admin user) When a user is project_admin instead of service_admin and lists a project's users the results returned remove user information such as token , service_roles and created_by For example: { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : , totalSize : 1 } [GET] Show a specific member user of the specific project Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/ARGO2/members/Test?key=S3CR3T Responses If successful, the response contains information of the specific user Test Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : , totalSize : 1 } Errors Please refer to section Errors to see all possible Errors [POST] Create a new member user under the specific project Example request curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/ARGO2/members/NewUser?key=S3CR3T Post body: { projects : [ { project : ARGO2 , roles : [ consumer ] } ], email : email@test.com } Responses If successful, the response contains information about the newly created user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer ], topics : [], subscriptions : [] } ], name : NewUSer , token : S3CR3T , email : email@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } Errors Please refer to section Errors to see all possible Errors [PUT] Updates the roles for a member user under the specific project Example request curl -X PUT -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/ARGO2/members/NewUser?key=S3CR3T Post body: { projects : [ { project : ARGO2 , roles : [ consumer ] } ] } Responses If successful, the response contains information about the updated user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer ], topics : [], subscriptions : [] } ], name : NewUSer , token : S3CR3T , email : email@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } Errors Please refer to section Errors to see all possible Errors [POST] Add/Invite a user to a project Example request curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/ARGO2/members/NewUser:add?key=S3CR3T Post body: { roles : [ consumer ], topics : [ topic1 ], subscriptions : [ sub1 ] } Responses If successful, the response contains information about the added user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer ], topics : [ topic1 ], subscriptions : [ sub1 ] } ], name : NewUSer , token : S3CR3T , email : email@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } Errors Please refer to section Errors to see all possible Errors [POST] Remove a user from the project Example request curl -X POST -H Content-Type: application/json https://{URL}/v1/projects/ARGO2/members/NewUser:remove?key=S3CR3T Responses Empty response on success 200 OK {} Errors Please refer to section Errors to see all possible Errors [GET] Project Metrics The following request returns related metrics for the specific project: eg. the number of topics Request GET /v1/projects/{project_name}:metrics Where Project_name: name of the project topic_name: name of the topic Example request curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW:metrics?key=S3CR3T Responses If successful it returns projects related metrics (number of topics, number of subscriptions). Success Response 200 OK { metrics : [ { metric : project.number_of_topics , metric_type : counter , value_type : int64 , resource_type : project , resource_name : ARGO , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 3 } ], description : Counter that displays the number of topics belonging to the specific project }, { metric : project.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project , resource_name : ARGO , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 4 } ], description : Counter that displays the number of subscriptions belonging to the specific project }, { metric : project.user.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project.user , resource_name : ARGO.UserA , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 3 } ], description : Counter that displays the number of subscriptions that a user has access to the specific project }, { metric : project.user.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project.user , resource_name : ARGO.UserB , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 3 } ], description : Counter that displays the number of subscriptions that a user has access to the specific project }, { metric : project.user.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project.user , resource_name : ARGO.UserX , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 1 } ], description : Counter that displays the number of subscriptions that a user has access to the specific project }, { metric : project.user.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project.user , resource_name : ARGO.UserZ , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 2 } ], description : Counter that displays the number of subscriptions that a user has access to the specific project }, { metric : project.number_of_daily_messages , metric_type : counter , value_type : int64 , resource_type : project , resource_name : ARGO , timeseries : [ { timestamp : 2018-10-02 , value : 30 }, { timestamp : 2018-10-01 , value : 110 } ], description : A collection of counters that represents the total number of messages published each day to all of the project's topics } ] } Errors Please refer to section Errors to see all possible Errors","title":"API Projects"},{"location":"api_projects/#project-api-calls","text":"ARGO Messaging Service supports project entities as a basis of organizing and isolating groups of users resources","title":"Project Api Calls"},{"location":"api_projects/#get-manage-projects-list-all-projects","text":"This request lists all available projects in the service","title":"[GET] Manage Projects - List all projects"},{"location":"api_projects/#request","text":"GET /v1/projects","title":"Request"},{"location":"api_projects/#example-request","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/projects?key=S3CR3T","title":"Example request"},{"location":"api_projects/#responses","text":"If successful, the response contains a list of all available projects Success Response 200 OK { projects : [ { name : PROJECT_1 , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : simple project }, { name : PROJECT_2 , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : simple project }, { name : BRAND_NEW , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : brand new project } ] }","title":"Responses"},{"location":"api_projects/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#get-manage-projects-list-a-specific-project","text":"This request lists information about a specific project","title":"[GET] Manage Projects - List a specific project"},{"location":"api_projects/#request_1","text":"GET /v1/projects/{project_name}","title":"Request"},{"location":"api_projects/#where","text":"Project_name: Name of the project to get information on","title":"Where"},{"location":"api_projects/#example-request_1","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW?key=S3CR3T","title":"Example request"},{"location":"api_projects/#responses_1","text":"If successful, the response contains information about the specific project Success Response 200 OK { name : BRAND_NEW , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : brand new project }","title":"Responses"},{"location":"api_projects/#errors_1","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#post-manage-projects-create-new-project","text":"This request creates a new project with the given project_name with a POST request","title":"[POST] Manage Projects - Create new project"},{"location":"api_projects/#request_2","text":"POST /v1/projects/{project_name}","title":"Request"},{"location":"api_projects/#where_1","text":"Project_name: Name of the project to create","title":"Where"},{"location":"api_projects/#post-body","text":"{ description : a simple description }","title":"Post body:"},{"location":"api_projects/#example-request_2","text":"curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/PROJECT_NEW?key=S3CR3T","title":"Example request"},{"location":"api_projects/#responses_2","text":"If successful, the response contains the newly created project Success Response 200 OK { name : PROJET_NEW created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : userA , description : brand new project }","title":"Responses"},{"location":"api_projects/#errors_2","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#put-manage-projects-update-a-project","text":"This request updates information (such as name,description) on an existing project (PUT)","title":"[PUT] Manage Projects - Update a project"},{"location":"api_projects/#request_3","text":"PUT /v1/projects/{project_name}","title":"Request"},{"location":"api_projects/#where_2","text":"Project_name: Name of the project to create","title":"Where"},{"location":"api_projects/#put-body","text":"{ name : new project name , description : a simple description }","title":"PUT body:"},{"location":"api_projects/#example-request_3","text":"curl -X PUT -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/PROJECT_NEW?key=S3CR3T","title":"Example request"},{"location":"api_projects/#responses_3","text":"If successful, the response contains the newly updated Success Response 200 OK { name : PROJET_NEW_UPDATED , created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-13T23:00:00Z , created_by : userA , description : description project updated }","title":"Responses"},{"location":"api_projects/#errors_3","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#delete-manage-projects-delete-project","text":"This request deletes a specific project","title":"[DELETE] Manage Projects - Delete Project"},{"location":"api_projects/#request_4","text":"DELETE /v1/projects/{project_name}","title":"Request"},{"location":"api_projects/#where_3","text":"Project_name: Name of the project to delete","title":"Where"},{"location":"api_projects/#example-request_4","text":"curl -X DELETE -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW?key=S3CR3T","title":"Example request"},{"location":"api_projects/#responses_4","text":"Success Response Code: 200 OK , Empty response if successful.","title":"Responses"},{"location":"api_projects/#errors_4","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#get-list-all-users-that-are-members-of-a-specific-project","text":"","title":"[GET] List all users that are members of a specific project"},{"location":"api_projects/#example-request_5","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/ARGO2/members?key=S3CR3T","title":"Example request"},{"location":"api_projects/#responses_5","text":"If successful, the response contains a list of all available users in the specific project Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : , totalSize : 1 }","title":"Responses"},{"location":"api_projects/#unpriviledge-mode-non-service_admin-user","text":"When a user is project_admin instead of service_admin and lists a project's users the results returned remove user information such as token , service_roles and created_by For example: { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : , totalSize : 1 }","title":"Unpriviledge mode (non service_admin user)"},{"location":"api_projects/#get-show-a-specific-member-user-of-the-specific-project","text":"","title":"[GET] Show a specific member user of the specific project"},{"location":"api_projects/#example-request_6","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/ARGO2/members/Test?key=S3CR3T","title":"Example request"},{"location":"api_projects/#responses_6","text":"If successful, the response contains information of the specific user Test Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : , totalSize : 1 }","title":"Responses"},{"location":"api_projects/#errors_5","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#post-create-a-new-member-user-under-the-specific-project","text":"","title":"[POST] Create a new member user under the specific project"},{"location":"api_projects/#example-request_7","text":"curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/ARGO2/members/NewUser?key=S3CR3T","title":"Example request"},{"location":"api_projects/#post-body_1","text":"{ projects : [ { project : ARGO2 , roles : [ consumer ] } ], email : email@test.com }","title":"Post body:"},{"location":"api_projects/#responses_7","text":"If successful, the response contains information about the newly created user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer ], topics : [], subscriptions : [] } ], name : NewUSer , token : S3CR3T , email : email@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }","title":"Responses"},{"location":"api_projects/#errors_6","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#put-updates-the-roles-for-a-member-user-under-the-specific-project","text":"","title":"[PUT] Updates the roles for a member user under the specific project"},{"location":"api_projects/#example-request_8","text":"curl -X PUT -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/ARGO2/members/NewUser?key=S3CR3T","title":"Example request"},{"location":"api_projects/#post-body_2","text":"{ projects : [ { project : ARGO2 , roles : [ consumer ] } ] }","title":"Post body:"},{"location":"api_projects/#responses_8","text":"If successful, the response contains information about the updated user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer ], topics : [], subscriptions : [] } ], name : NewUSer , token : S3CR3T , email : email@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }","title":"Responses"},{"location":"api_projects/#errors_7","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#post-addinvite-a-user-to-a-project","text":"","title":"[POST] Add/Invite a user to a project"},{"location":"api_projects/#example-request_9","text":"curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/ARGO2/members/NewUser:add?key=S3CR3T","title":"Example request"},{"location":"api_projects/#post-body_3","text":"{ roles : [ consumer ], topics : [ topic1 ], subscriptions : [ sub1 ] }","title":"Post body:"},{"location":"api_projects/#responses_9","text":"If successful, the response contains information about the added user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer ], topics : [ topic1 ], subscriptions : [ sub1 ] } ], name : NewUSer , token : S3CR3T , email : email@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }","title":"Responses"},{"location":"api_projects/#errors_8","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#post-remove-a-user-from-the-project","text":"","title":"[POST] Remove a user from the project"},{"location":"api_projects/#example-request_10","text":"curl -X POST -H Content-Type: application/json https://{URL}/v1/projects/ARGO2/members/NewUser:remove?key=S3CR3T","title":"Example request"},{"location":"api_projects/#responses_10","text":"Empty response on success 200 OK {}","title":"Responses"},{"location":"api_projects/#errors_9","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_projects/#get-project-metrics","text":"The following request returns related metrics for the specific project: eg. the number of topics","title":"[GET] Project Metrics"},{"location":"api_projects/#request_5","text":"GET /v1/projects/{project_name}:metrics","title":"Request"},{"location":"api_projects/#where_4","text":"Project_name: name of the project topic_name: name of the topic","title":"Where"},{"location":"api_projects/#example-request_11","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW:metrics?key=S3CR3T","title":"Example request"},{"location":"api_projects/#responses_11","text":"If successful it returns projects related metrics (number of topics, number of subscriptions). Success Response 200 OK { metrics : [ { metric : project.number_of_topics , metric_type : counter , value_type : int64 , resource_type : project , resource_name : ARGO , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 3 } ], description : Counter that displays the number of topics belonging to the specific project }, { metric : project.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project , resource_name : ARGO , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 4 } ], description : Counter that displays the number of subscriptions belonging to the specific project }, { metric : project.user.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project.user , resource_name : ARGO.UserA , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 3 } ], description : Counter that displays the number of subscriptions that a user has access to the specific project }, { metric : project.user.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project.user , resource_name : ARGO.UserB , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 3 } ], description : Counter that displays the number of subscriptions that a user has access to the specific project }, { metric : project.user.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project.user , resource_name : ARGO.UserX , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 1 } ], description : Counter that displays the number of subscriptions that a user has access to the specific project }, { metric : project.user.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : project.user , resource_name : ARGO.UserZ , timeseries : [ { timestamp : 2017-06-30T13:53:13Z , value : 2 } ], description : Counter that displays the number of subscriptions that a user has access to the specific project }, { metric : project.number_of_daily_messages , metric_type : counter , value_type : int64 , resource_type : project , resource_name : ARGO , timeseries : [ { timestamp : 2018-10-02 , value : 30 }, { timestamp : 2018-10-01 , value : 110 } ], description : A collection of counters that represents the total number of messages published each day to all of the project's topics } ] }","title":"Responses"},{"location":"api_projects/#errors_10","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_registrations/","text":"Registrations API Calls ARGO Messaging Service supports calls for registering users [POST] Manage Registrations - New user registration This request creates a new registration for a future user Request POST /v1/registrations Post body: { name : new-register-user , first_name : first-name , last_name : last-name , email : test@example.com , organization : org1 , description : desc1 } Example request curl -X POST -H Content-Type: application/json https://{URL}/v1/registrations Responses If successful, the response contains the newly registered user Success Response 200 OK { uuid : 99bfd746-4ebe-11p0-9c2d-fa7ae01bbebc , name : new-register-user , first_name : first-name , last_name : last-name , organization : org1 , description : desc1 , email : test@example.com , activation_token : a-token , status : pending , registered_at : 2009-11-10T23:00:00Z , modified_at : 2009-11-10T23:00:00Z , modified_by : UserA } Errors Please refer to section Errors to see all possible Errors [POST] Manage Registrations - Accept a User's Registration This request accepts a user's registration and as a result it creates a new user with the provided information. Request POST /v1/registrations/{uuid}:accept Example request curl -X POST -H Content-Type: application/json https://{URL}/v1/registrations/uuid1:accept Responses If successful, the response contains the newly created user Success Response 200 OK { uuid : 1d0aa54e-44b8-4d2a-8cf7-d4cb2e350c61 , projects : [], name : user-acc-344 , first_name : fname , last_name : lname , organization : grnet , description : simple user , token : bb0ad3da48f69372e38e55e423324b7366e32804 , email : test@example.com , service_roles : [], created_on : 2020-05-17T22:27:09Z , modified_on : 2020-05-17T22:27:09Z } Errors Please refer to section Errors to see all possible Errors [POST] Manage Registrations - Decline a User's Registration This request declines a user's registration Request POST /v1/registrations/{uuid}:decline Example request curl -X POST -H Content-Type: application/json https://{URL}/v1/registrations/uuid1:decline Responses If successful, the response contains the newly created user Success Response 200 OK {} Errors Please refer to section Errors to see all possible Errors [GET] Manage Registrations - Retrieve a User's Registration This request retrieves a user's registration Request GET /v1/registrations/{uuid} Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/registrations/ur-uuid1 Responses If successful, the response contains user's registration Success Response 200 OK { uuid : ur-uuid1 , name : urname , first_name : urfname , last_name : urlname , organization : urorg , description : urdesc , email : uremail , status : pending , activation_token : uratkn-1 , registered_at : 2019-05-12T22:26:58Z , modified_by : UserA , modified_at : 2020-05-15T22:26:58Z } Errors Please refer to section Errors to see all possible Errors [GET] Manage Registrations - Retrieve all registrations This request retrieves all registration in the service Request GET /v1/registrations Optional Filters status activation_token email organization name Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/registrations Responses If successful, the response contains all registrations Success Response 200 OK { user_registrations : [ { uuid : ur-uuid1 , name : urname , first_name : urfname , last_name : urlname , organization : urorg , description : urdesc , email : uremail , status : pending , activation_token : uratkn-1 , registered_at : 2019-05-12T22:26:58Z , modified_by : UserA , modified_at : 2020-05-15T22:26:58Z } ] } Errors Please refer to section Errors to see all possible Errors","title":"Api registrations"},{"location":"api_registrations/#registrations-api-calls","text":"ARGO Messaging Service supports calls for registering users","title":"Registrations API Calls"},{"location":"api_registrations/#post-manage-registrations-new-user-registration","text":"This request creates a new registration for a future user","title":"[POST] Manage Registrations - New user registration"},{"location":"api_registrations/#request","text":"POST /v1/registrations","title":"Request"},{"location":"api_registrations/#post-body","text":"{ name : new-register-user , first_name : first-name , last_name : last-name , email : test@example.com , organization : org1 , description : desc1 }","title":"Post body:"},{"location":"api_registrations/#example-request","text":"curl -X POST -H Content-Type: application/json https://{URL}/v1/registrations","title":"Example request"},{"location":"api_registrations/#responses","text":"If successful, the response contains the newly registered user Success Response 200 OK { uuid : 99bfd746-4ebe-11p0-9c2d-fa7ae01bbebc , name : new-register-user , first_name : first-name , last_name : last-name , organization : org1 , description : desc1 , email : test@example.com , activation_token : a-token , status : pending , registered_at : 2009-11-10T23:00:00Z , modified_at : 2009-11-10T23:00:00Z , modified_by : UserA }","title":"Responses"},{"location":"api_registrations/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_registrations/#post-manage-registrations-accept-a-users-registration","text":"This request accepts a user's registration and as a result it creates a new user with the provided information.","title":"[POST] Manage Registrations - Accept a User's Registration"},{"location":"api_registrations/#request_1","text":"POST /v1/registrations/{uuid}:accept","title":"Request"},{"location":"api_registrations/#example-request_1","text":"curl -X POST -H Content-Type: application/json https://{URL}/v1/registrations/uuid1:accept","title":"Example request"},{"location":"api_registrations/#responses_1","text":"If successful, the response contains the newly created user Success Response 200 OK { uuid : 1d0aa54e-44b8-4d2a-8cf7-d4cb2e350c61 , projects : [], name : user-acc-344 , first_name : fname , last_name : lname , organization : grnet , description : simple user , token : bb0ad3da48f69372e38e55e423324b7366e32804 , email : test@example.com , service_roles : [], created_on : 2020-05-17T22:27:09Z , modified_on : 2020-05-17T22:27:09Z }","title":"Responses"},{"location":"api_registrations/#errors_1","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_registrations/#post-manage-registrations-decline-a-users-registration","text":"This request declines a user's registration","title":"[POST] Manage Registrations - Decline a User's Registration"},{"location":"api_registrations/#request_2","text":"POST /v1/registrations/{uuid}:decline","title":"Request"},{"location":"api_registrations/#example-request_2","text":"curl -X POST -H Content-Type: application/json https://{URL}/v1/registrations/uuid1:decline","title":"Example request"},{"location":"api_registrations/#responses_2","text":"If successful, the response contains the newly created user Success Response 200 OK {}","title":"Responses"},{"location":"api_registrations/#errors_2","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_registrations/#get-manage-registrations-retrieve-a-users-registration","text":"This request retrieves a user's registration","title":"[GET] Manage Registrations - Retrieve a User's Registration"},{"location":"api_registrations/#request_3","text":"GET /v1/registrations/{uuid}","title":"Request"},{"location":"api_registrations/#example-request_3","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/registrations/ur-uuid1","title":"Example request"},{"location":"api_registrations/#responses_3","text":"If successful, the response contains user's registration Success Response 200 OK { uuid : ur-uuid1 , name : urname , first_name : urfname , last_name : urlname , organization : urorg , description : urdesc , email : uremail , status : pending , activation_token : uratkn-1 , registered_at : 2019-05-12T22:26:58Z , modified_by : UserA , modified_at : 2020-05-15T22:26:58Z }","title":"Responses"},{"location":"api_registrations/#errors_3","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_registrations/#get-manage-registrations-retrieve-all-registrations","text":"This request retrieves all registration in the service","title":"[GET] Manage Registrations - Retrieve all registrations"},{"location":"api_registrations/#request_4","text":"GET /v1/registrations","title":"Request"},{"location":"api_registrations/#optional-filters","text":"status activation_token email organization name","title":"Optional Filters"},{"location":"api_registrations/#example-request_4","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/registrations","title":"Example request"},{"location":"api_registrations/#responses_4","text":"If successful, the response contains all registrations Success Response 200 OK { user_registrations : [ { uuid : ur-uuid1 , name : urname , first_name : urfname , last_name : urlname , organization : urorg , description : urdesc , email : uremail , status : pending , activation_token : uratkn-1 , registered_at : 2019-05-12T22:26:58Z , modified_by : UserA , modified_at : 2020-05-15T22:26:58Z } ] }","title":"Responses"},{"location":"api_registrations/#errors_4","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_schemas/","text":"Schemas Api Calls Schemas is a resource that works with topics by validating the published messages. [GET] Manage Schemas - Retrieve a Schema This request retrieves a specific schema under the given project Request GET /v1/projects/{project_name}/schemas/{schema_name} Where project_name: Name of the project in which the schema will belong schema_name: Name of the schema to be created Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T Responses If successful, the response contains the requested schema. Success Response 200 OK { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b50 , name : projects/project-1/schemas/schema-1 , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email ], type : object } } Errors Please refer to section Errors to see all possible Errors [GET] Manage Schemas - Retrieve All Schemas This request retrieves all schemas under the given project. Request GET /v1/projects/{project_name}/schemas Where project_name: Name of the project in which the schema will belong Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/project-1/schemas?key=S3CR3T Responses If successful, the response contains all the schemas of the given project. Success Response 200 OK { schemas : [ { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b50 , name : projects/project-1/schemas/schema-1 , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email ], type : object } }, { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b55 , name : projects/project-1/schemas/schema-2 , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email ], type : object } } ] } Errors Please refer to section Errors to see all possible Errors [POST] Manage Schemas - Create new Schema This request creates a new schema Supported Schema Types JSON,AVRO Request POST /v1/projects/{project_name}/schemas/{schema_name} Where project_name: Name of the project in which the schema will belong schema_name: Name of the schema to be created Example request curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T Post body: { type : json , schema :{ type : object , properties : { name : { type : string }, email : { type : string }, address : { type : string }, telephone : { type : string } }, required : [ name , email ] } } Responses If successful, the response contains the newly created schema. Success Response 200 OK { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b50 , name : projects/project-1/schemas/schema-1 , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email ], type : object } } Errors Please refer to section Errors to see all possible Errors [PUT] Manage Schemas - Update Schema This request updates the contents of a schema. You can update one or all of the fields at a time. Request PUT /v1/projects/{project_name}/schemas/{schema_name} Where project_name: Name of the project under which the schema belongs schema_name: Name of the schema to be updated Example request curl -X PUT -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T Post body: { type : json , name : projects/project-1/schemas/new-name , schema :{ type : object , properties : { name : { type : string }, email : { type : string }, address : { type : string }, telephone : { type : string } }, required : [ name , email , address ] } } Responses If successful, the response contains the updated schema. Success Response 200 OK { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b50 , name : projects/project-1/schemas/new-name , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email , address ], type : object } } Errors Please refer to section Errors to see all possible Errors [DELETE] Manage Schemas - Delete Schema This request deletes a schema. Request DELETE /v1/projects/{project_name}/schemas/{schema_name} Where project_name: Name of the project under which the schema belongs schema_name: Name of the schema to be deleted Example request curl -X DELETE -H Content-Type: application/json https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T Responses If successful, the response is empty. Success Response 200 OK Errors Please refer to section Errors to see all possible Errors [POST] Manage Schemas - Validate Message This request is used whenever we want to test a message against a schema. The process to check that your schema and messages are working as expected is to create a new topic that needs to be associated with the schema, then create the message in bas64 encoding and publish it to the topic.Instead of creating all this pipeline in order to check your schema and messages we can explicitly do it on this API call. Request POST /v1/projects/{project_name}/schemas/{schema_name}:validate Where project_name: Name of the project under which the schema belongs schema_name: Name of the schema to be updated Example request curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/project-1/schemas/schema-1:validate?key=S3CR3T Post body: JSON Schema { name : name1 , email : e1@example.com , address : address1 , telephone : 6980574421 } AVRO Schema When dealing with an AVRO Schema, the binary message needs to be encoded to base64 alongside its schema and sent via the data field which is required. { data : DGFnZWxvc8T8Cg== } Responses Success Response 200 OK { message : Message validated successfully } Errors Please refer to section Errors to see all possible Errors","title":"API Schemas"},{"location":"api_schemas/#schemas-api-calls","text":"Schemas is a resource that works with topics by validating the published messages.","title":"Schemas Api Calls"},{"location":"api_schemas/#get-manage-schemas-retrieve-a-schema","text":"This request retrieves a specific schema under the given project","title":"[GET] Manage Schemas - Retrieve a Schema"},{"location":"api_schemas/#request","text":"GET /v1/projects/{project_name}/schemas/{schema_name}","title":"Request"},{"location":"api_schemas/#where","text":"project_name: Name of the project in which the schema will belong schema_name: Name of the schema to be created","title":"Where"},{"location":"api_schemas/#example-request","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T","title":"Example request"},{"location":"api_schemas/#responses","text":"If successful, the response contains the requested schema. Success Response 200 OK { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b50 , name : projects/project-1/schemas/schema-1 , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email ], type : object } }","title":"Responses"},{"location":"api_schemas/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_schemas/#get-manage-schemas-retrieve-all-schemas","text":"This request retrieves all schemas under the given project.","title":"[GET] Manage Schemas - Retrieve All Schemas"},{"location":"api_schemas/#request_1","text":"GET /v1/projects/{project_name}/schemas","title":"Request"},{"location":"api_schemas/#where_1","text":"project_name: Name of the project in which the schema will belong","title":"Where"},{"location":"api_schemas/#example-request_1","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/project-1/schemas?key=S3CR3T","title":"Example request"},{"location":"api_schemas/#responses_1","text":"If successful, the response contains all the schemas of the given project. Success Response 200 OK { schemas : [ { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b50 , name : projects/project-1/schemas/schema-1 , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email ], type : object } }, { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b55 , name : projects/project-1/schemas/schema-2 , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email ], type : object } } ] }","title":"Responses"},{"location":"api_schemas/#errors_1","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_schemas/#post-manage-schemas-create-new-schema","text":"This request creates a new schema","title":"[POST] Manage Schemas - Create new Schema"},{"location":"api_schemas/#supported-schema-types","text":"JSON,AVRO","title":"Supported Schema Types"},{"location":"api_schemas/#request_2","text":"POST /v1/projects/{project_name}/schemas/{schema_name}","title":"Request"},{"location":"api_schemas/#where_2","text":"project_name: Name of the project in which the schema will belong schema_name: Name of the schema to be created","title":"Where"},{"location":"api_schemas/#example-request_2","text":"curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T","title":"Example request"},{"location":"api_schemas/#post-body","text":"{ type : json , schema :{ type : object , properties : { name : { type : string }, email : { type : string }, address : { type : string }, telephone : { type : string } }, required : [ name , email ] } }","title":"Post body:"},{"location":"api_schemas/#responses_2","text":"If successful, the response contains the newly created schema. Success Response 200 OK { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b50 , name : projects/project-1/schemas/schema-1 , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email ], type : object } }","title":"Responses"},{"location":"api_schemas/#errors_2","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_schemas/#put-manage-schemas-update-schema","text":"This request updates the contents of a schema. You can update one or all of the fields at a time.","title":"[PUT] Manage Schemas - Update Schema"},{"location":"api_schemas/#request_3","text":"PUT /v1/projects/{project_name}/schemas/{schema_name}","title":"Request"},{"location":"api_schemas/#where_3","text":"project_name: Name of the project under which the schema belongs schema_name: Name of the schema to be updated","title":"Where"},{"location":"api_schemas/#example-request_3","text":"curl -X PUT -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T","title":"Example request"},{"location":"api_schemas/#post-body_1","text":"{ type : json , name : projects/project-1/schemas/new-name , schema :{ type : object , properties : { name : { type : string }, email : { type : string }, address : { type : string }, telephone : { type : string } }, required : [ name , email , address ] } }","title":"Post body:"},{"location":"api_schemas/#responses_3","text":"If successful, the response contains the updated schema. Success Response 200 OK { uuid : 50811bd1-c94c-4ad7-8f55-a561c6270b50 , name : projects/project-1/schemas/new-name , type : json , schema : { properties : { address : { type : string }, email : { type : string }, name : { type : string }, telephone : { type : string } }, required : [ name , email , address ], type : object } }","title":"Responses"},{"location":"api_schemas/#errors_3","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_schemas/#delete-manage-schemas-delete-schema","text":"This request deletes a schema.","title":"[DELETE] Manage Schemas - Delete Schema"},{"location":"api_schemas/#request_4","text":"DELETE /v1/projects/{project_name}/schemas/{schema_name}","title":"Request"},{"location":"api_schemas/#where_4","text":"project_name: Name of the project under which the schema belongs schema_name: Name of the schema to be deleted","title":"Where"},{"location":"api_schemas/#example-request_4","text":"curl -X DELETE -H Content-Type: application/json https://{URL}/v1/projects/project-1/schemas/schema-1?key=S3CR3T","title":"Example request"},{"location":"api_schemas/#responses_4","text":"If successful, the response is empty. Success Response 200 OK","title":"Responses"},{"location":"api_schemas/#errors_4","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_schemas/#post-manage-schemas-validate-message","text":"This request is used whenever we want to test a message against a schema. The process to check that your schema and messages are working as expected is to create a new topic that needs to be associated with the schema, then create the message in bas64 encoding and publish it to the topic.Instead of creating all this pipeline in order to check your schema and messages we can explicitly do it on this API call.","title":"[POST] Manage Schemas - Validate Message"},{"location":"api_schemas/#request_5","text":"POST /v1/projects/{project_name}/schemas/{schema_name}:validate","title":"Request"},{"location":"api_schemas/#where_5","text":"project_name: Name of the project under which the schema belongs schema_name: Name of the schema to be updated","title":"Where"},{"location":"api_schemas/#example-request_5","text":"curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/project-1/schemas/schema-1:validate?key=S3CR3T","title":"Example request"},{"location":"api_schemas/#post-body_2","text":"","title":"Post body:"},{"location":"api_schemas/#json-schema","text":"{ name : name1 , email : e1@example.com , address : address1 , telephone : 6980574421 }","title":"JSON Schema"},{"location":"api_schemas/#avro-schema","text":"When dealing with an AVRO Schema, the binary message needs to be encoded to base64 alongside its schema and sent via the data field which is required. { data : DGFnZWxvc8T8Cg== }","title":"AVRO Schema"},{"location":"api_schemas/#responses_5","text":"Success Response 200 OK { message : Message validated successfully }","title":"Responses"},{"location":"api_schemas/#errors_5","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/","text":"Subscriptions Api Calls [PUT] Manage Subscriptions - Create subscriptions This request creates a new subscription in a project with a PUT request Request PUT /v1/projects/{project_name}/subscriptions/{subscription_name} Where Project_name: Name of the project to create subscription_name: The subscription name to create Example request curl -X PUT -H Content-Type: application/json -d 'PUTBODY' https://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine ?key=S3CR3T ` PUT BODY { topic : projects/BRAND_NEW/topics/monitoring , ackDeadlineSeconds :10 } Responses Success Response 200 OK { name : projects/BRAND_NEW/subscriptions/alert_engine , topic : projects/BRAND_NEW/topics/monitoring , ackDeadlineSeconds : 10 , created_on : 2020-11-19T00:00:00Z } Push Enabled Subscriptions Whenever a subscription is created with a valid push configuration, the service will also generate a unique hash that should be later used to validate the ownership of the registered push endpoint, and will mark the subscription as unverified. The maxMessages field declares the number of messages that should be send per push action. The default value is 1 . If maxMessages holds a value of 1 your push endpoint should expect a request body with the following schema: { message : { attributes : { key : value }, data : SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ== , messageId : 136969346945 }, subscription : projects/myproject/subscriptions/mysubscription } If the maxMessages field holds a value of greater than 1 your push endpoint should expect a request body with the following schema: { messages :[ { message :{ attributes :{ key : value }, data : SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ== , messageId : 136969346945 }, subscription : projects/myproject/subscriptions/mysubscription }, { message :{ attributes :{ key : value }, data : SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ== , messageId : 136969346945 }, subscription : projects/myproject/subscriptions/mysubscription } ] } Request to create Push Enabled Subscription { topic : projects/BRAND_NEW/topics/monitoring , ackDeadlineSeconds :10, pushConfig : { pushEndpoint : https://127.0.0.1:5000/receive_here , maxMessages : 3, retryPolicy : { type : linear , period : 1000 } } } Response { name : projects/BRAND_NEW/subscriptions/alert_engine , topic : projects/BRAND_NEW/topics/monitoring , ackDeadlineSeconds : 10, pushConfig : { pushEndpoint : https://127.0.0.1:5000/receive_here , maxMessages : 3, authorization_header : { type : autogen , value : 4551h9j7f7dde380a5f8bc4fdb4fe980c565b67b } , retryPolicy : { type : linear , period : 1000 }, verification_hash : 9d5189f7f758e380a5f8bc4fdb4fe980c565b67b , verified : false }, created_on : 2020-11-19T00:00:00Z } Authorization headers Specify an authorization header value and how it is going to be generated, to be included in the outgoing push request with each message, to the remote push endpoint. autogen(default) : The authorization header value will be automatically generated by the service itself. disabled : No authorization header will be provided with the outgoing push requests. Different Retry Policies Creating a push enabled subscription with a linear retry policy and a period of 3000 means that you will be receiving message(s) every 3000ms . If you decide to choose a retry policy of slowstart , you will be receiving messages with dynamic internals. The slowstart retry policy starts by pushing the first message(s) and then deciding the time that should elapse before the next push action. - IF the message(s) are delivered successfully the elapsed time until the next push request will be halved, until it reaches the lower limit of 300ms . IF the message(s) are not delivered successfully the elapsed time until the next push request will be doubled, until it reached the upper limit of 1day . So for example, the first push action will have by default a 1 second interval. If it successful the next push re request will happen in 0.5 seconds . If it is unsuccessful the next push request will happen in 2 seconds . Errors Please refer to section Errors to see all possible Errors [POST] Manage Subscriptions - Verify ownership of a push endpoint This request triggers the process of verifying the ownership of a registered push endpoint Request PUT /v1/projects/{project_name}/subscriptions/{subscription_name}:verifyPushEndpoint Where Project_name: Name of the project subscription_name: The subscription name Example request curl -X POST https://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:verifyPushEndpoint?key=S3CR3T ` Push Enabled Subscriptions Whenever a subscription is created with a valid push configuration, the service will also generate a unique hash that should be later used to validate the ownership of the registered push endpoint, and will mark the subscription as unverified. The owner of the push endpoint needs to execute the following steps in order to verify the ownership of the registered endpoint. Open an api call with a path of /ams_verification_hash . The service will try to access this path using the host:port of the push endpoint. For example, if the push endpoint is https://example.com:8443/receive_here , the push endpoint should also support the api route of https://example.com:8443/ams_verification_hash . The api route of https://example.com:8443/ams_verification_hash should support the http GET method. A GET request to https://example.com:8443/ams_verification_hash should return a response body with only the verification_hash that is found inside the subscriptions push configuration, a status code of 200 and the header Content-type: plain/text . Errors Please refer to section Errors to see all possible Errors [GET] Manage Subscriptions - List All Subscriptions under a specific Topic This request lists all available subscriptions under a specific topic in the service. Request GET /v1/projects/{project_name}/topics/{topic_name}/subscriptions Where Project_name: Name of the project the topic belongs to Topic_name: Name of the topic Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/p1/topics/t1/subscriptions?key=S3CR3T Success Response 200 OK { subscriptions : [ /projects/p1/subscriptions/sub1 , /projects/p1/subscriptions/sub2 ] } Errors Please refer to section Errors to see all possible Errors [GET] Manage Subscriptions - List All Subscriptions This request lists all available subscriptions under a specific project in the service using pagination If the USER making the request has only consumer role for the respective project, it will load only the subscriptions that he has access to(being present in a subscriptions's acl). It is important to note that if there are no results to return the service will return the following: Success Response 200 OK { subscriptions : [], nextPageToken : , totalSize : 0 } Also the default value for pageSize = 0 and pageToken = \" . Pagesize = 0 returns all the results. Paginated Request that returns all subscriptions under the specified project This request lists all subscriptions in a project with a GET request Request GET /v1/projects/{project_name}/subscriptions Where Project_name: Name of the project to list the subscriptions Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions?key=S3CR3T Responses Success Response 200 OK { subscriptions :[ { name : projects/BRAND_NEW/subscriptions/alert_engine , topic : projects/BRAND_NEW/topics/monitoring , pushConfig : {}, ackDeadlineSeconds : 10, created_on : 2020-11-19T00:00:00Z }, { name : projects/BRAND_NEW/subscriptions/alert_engine2 , topic : projects/BRAND_NEW/topics/monitoring , pushConfig : {}, ackDeadlineSeconds : 10, created_on : 2020-11-19T00:00:00Z }], nextPageToken : , totalSize : 2 } Paginated Request that returns the next page of a specific size This request lists subscriptions in a project with a GET request Request GET /v1/projects/{project_name}/subscriptions Where Project_name: Name of the project to list the subscriptions Example request curl -X PUT -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions?key=S3CR3T pageSize=1 pageToken=some_token Responses Success Response 200 OK { subscriptions :[ { name : projects/BRAND_NEW/subscriptions/alert_engine , topic : projects/BRAND_NEW/topics/monitoring , pushConfig : {}, ackDeadlineSeconds : 10, created_on : 2020-11-19T00:00:00Z } ], nextPageToken : , totalSize : 2 } Paginated Request that returns the first page of a specific size This request lists subscriptions in a project with a GET request Request GET /v1/projects/{project_name}/subscriptions Where Project_name: Name of the project to list the subscriptions Example request curl -X PUT -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions?key=S3CR3T pageSize=1 Responses Success Response 200 OK { subscriptions :[ { name : projects/BRAND_NEW/subscriptions/alert_engine2 , topic : projects/BRAND_NEW/topics/monitoring , pushConfig : {}, ackDeadlineSeconds : 10, created_on : 2020-11-19T00:00:00Z } ], nextPageToken : some_token , totalSize : 2 } Errors Please refer to section Errors to see all possible Errors [GET] Manage Subscriptions - Get a subscription's list of authorized users This request returns a list of authorized users to consume from the subscription Request GET /v1/projects/{project_name}/subscriptions/{sub_name}:acl Where Project_name: Name of the project to get Sub_name: The subscription name Example request curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions/subscription:acl?key=S3CR3T ` Responses Success Response 200 OK { authorized_users : [ userC , userD ] } Errors Please refer to section Errors to see all possible Errors [POST] Modify ACL of a given subscription The following request Modifies the authorized users list of a given subscription Request POST /v1/projects/{project_name}/subscriptions/{sub_name}:modifyAcl Where project_name: Name of the project sub_name: name of the subscription Post data { authorized_users : [ UserX , UserY ] } Example request curl -X POST -H Content-Type: application/json -d { POSTDATA } https://{URL}/v1/projects/BRAND_NEW/subscriptions/subscription:modifyAcl?key=S3CR3T Responses Success Response 200 OK Errors If the to-be updated ACL contains users that are non-existent in the project, the API returns the following error: 404 NOT_FOUND { error : { code : 404, message : User(s): UserFoo1,UserFoo2 do not exist , status : NOT_FOUND } } Please refer to section Errors to see all possible Errors [DELETE] Manage Subscriptions - Delete Subscriptions This request deletes a subscription in a project with a DELETE request Request DELETE /v1/projects/{project_name}/subscriptions/{subscription_name} Where Project_name: Name of the project subscription_name: The subscription name to delete Example request curl -X DELETE -H Content-Type: application/json http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine?key=S3CR3T Responses Success Response Code: 200 OK , Empty response if successful. Errors Please refer to section Errors to see all possible Errors [POST] Modify Ack Deadline This request modifies the acknowledgment deadline for the subscription. The ack deadline value is measured in seconds. The minimum ack deadline value allowed is 0sec and the maximum 600sec. Request POST /v1/projects/{project_name}/subscriptions/{subscription_name}:modifyAckDeadline Post body: { ackDeadlineSeconds : 20 } Where Project_name: Name of the project subscription_name: The subscription name to consume ackDeadlineSeconds: integer representing seconds for the acknowledgment deadline (min=0sec, max=600sec). Example request curl -X POST -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:modifyAckDeadline?key=S3CR3T post body: { ackDeadlineSeconds : 30 } Responses Success Response Code: 200 OK , Empty response if successful. The deadline will change to 30seconds Errors Please refer to section Errors to see all possible Errors [POST] Modify Push Configuration This request modifies the push configuration of a subscription Request POST /v1/projects/{project_name}/subscriptions/{subscription_name}:modifyPushConfig Post body: { pushConfig :{ pushEndpoint : , maxMessages : 5, authorization_header : { type : autogen }, retryPolicy :{ type : linear , period :300 } } } Where Project_name: Name of the project subscription_name: The subscription name to consume pushConfig: configuration including pushEndpoint for the remote endpoint to receive the messages. Also includes retryPolicy (type of retryPolicy and period parameters) autogen(default when modyfing a sub from pull to push) : The authorization header value will be automatically generated by the service itself. disabled : No authorization header will be provided with the outgoing push requests. NOTE that if you updated a push configuration with autogen the service will generate a new value every time the update request happens. For example, if you want to update your authorization header value, you can use the update request with the autogen type. Example request curl -X POST -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:modifyPushConfig?key=S3CR3T post body: { pushConfig :{ pushEndpoint : host:example.com:8080/path/to/hook , maxMessages : 3, retryPolicy :{ type : linear , period :300 } } } Responses Success Response Code: 200 OK , Empty response if successful. Whenever a subscription is created with a valid push configuration, the service will also generate a unique hash that should be later used to validate the ownership of the registered push endpoint, and will mark the subscription as unverified. NOTE Changing the push endpoint of a push enabled subscription, or removing the push configuration and then re-applying will mark the subscription as unverified and a new verification process should take place. Errors Please refer to section Errors to see all possible Errors [POST] Pull messages from a subscription (Consume) This request consumes messages from a subscription in a project with a POST request. It's important to note that the subscription's topic must exist in order for the user to pull messages. Request POST /v1/projects/{project_name}/subscriptions/{subscription_name}:pull Post body: { maxMessages : 1 } Where Project_name: Name of the project subscription_name: The subscription name to consume maxMessages: the max number of messages to consume returnImmediately: (true or false) to prevent the subscriber from waiting if the queue is currently empty. If not specified the default value is true. You can specify the max number of messages returned by one call by setting maxMessages field. By default, the server will keep the connection open until at least one message is received; you can optionally set the returnImmediately field to true to prevent the subscriber from waiting if the queue is currently empty. Example request curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:pull?key=S3CR3T post body: { \"maxMessages\": \"1\" } Responses 200 OK { receivedMessages : [ { ackId : dQNNHlAbEGEIBE... , message : { attributes : [ { key : whatever , value : foo } ], data : U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ , messageId : 100309303 } } ] } Errors Please refer to section Errors to see all possible Errors [POST] Sending an ACK Messages retrieved from a pull subscription can be acknowledged by sending message with an array of ackIDs. Request POST /v1/projects/{project_name}/subscriptions/{subscription_name}:acknowledge Post body: { ackIds : [ dQNNHlAbEGEIBE... ] } Where Project_name: Name of the project subscription_name: The subscription name to consume ackIds: the ids of the messages Example request curl -X POST -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:acknowledge?key=S3CR3T post body: { ackIds : [ dQNNHlAbEGEIBE... ] } Responses Success Response 200 OK Errors Please refer to section Errors to see all possible Errors [GET] Get Offsets This request returns the min, max and current offset of a subscription Request GET /v1/projects/{project_name}/subscriptions/{subscription_name}:offsets Post body: { max : 14, min : 0, current : 4 } Where Project_name: Name of the project subscription_name: The subscription name to consume Example request curl -X GET -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:offsets?key=S3CR3T post body: { max : 14, min : 0, current : 4 } Responses Success Response Code: 200 OK , Empty response if successful. Errors Please refer to section Errors to see all possible Errors [GET] Get Offset by Timestamp This request returns the offset of the first message with a timestamp equal or greater than the time given. Request GET /v1/projects/{project_name}/subscriptions/{subscription_name}:timeToOffset?time={{timestamp}} Where Project_name: Name of the project subscription_name: The subscription name to consume timestamp: timestamp in Zulu format - (2006-11-02T13:39:11.000Z) Example request curl -X GET -H Content-Type: application/json http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:timeToOffset?key=S3CR3T time=2019-09-02T13:39:11.100Z Responses Success Response Code: 200 OK Response body: { offset : 640 } Errors Please refer to section Errors to see all possible Errors [POST] Modify Offsets This request modifies the current offset of a subscription Request POST /v1/projects/{project_name}/subscriptions/{subscription_name}:modifyOFfset Post body: { offset :3 } Where Project_name: Name of the project subscription_name: The subscription name to consume offset_config: an offset number in int64 Example request curl -X POST -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:modifyOffset?key=S3CR3T post body: { offset :14 } Responses Success Response Code: 200 OK , Empty response if successful. Errors Please refer to section Errors to see all possible Errors [GET] Subscription Metrics The following request returns related metrics for the specific subscription: for eg the number of consumed messages Request GET /v1/projects/{project_name}/subscriptions/{sub_name}:metrics Where Project_name: name of the project sub_name: name of the subscription Example request curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions/monitoring:metrics?key=S3CR3T Responses If successful it returns the number of messages consumed in the specific subscription Success Response 200 OK { metrics : [ { metric : subscription.number_of_messages , metric_type : counter , value_type : int64 , resource_type : subscription , resource_name : sub1 , timeseries : [ { timestamp : 2017-06-30T14:20:38Z , value : 0 } ], description : Counter that displays the number number of messages published to the specific topic }, { metric : topic.number_of_bytes , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : sub1 , timeseries : [ { timestamp : 2017-06-30T14:20:38Z , value : 0 } ], description : Counter that displays the total size of data (in bytes) published to the specific topic }, { metric : subscription.consumption_rate , metric_type : rate , value_type : float64 , resource_type : subscription , resource_name : sub1 , timeseries : [ { timestamp : 2019-05-06T00:00:00Z , value : 10 } ], description : A rate that displays how many messages were consumed per second between the last two consume events } ] } Errors Please refer to section Errors to see all possible Errors","title":"API Subscriptions"},{"location":"api_subs/#subscriptions-api-calls","text":"","title":"Subscriptions Api Calls"},{"location":"api_subs/#put-manage-subscriptions-create-subscriptions","text":"This request creates a new subscription in a project with a PUT request","title":"[PUT] Manage Subscriptions - Create subscriptions"},{"location":"api_subs/#request","text":"PUT /v1/projects/{project_name}/subscriptions/{subscription_name}","title":"Request"},{"location":"api_subs/#where","text":"Project_name: Name of the project to create subscription_name: The subscription name to create","title":"Where"},{"location":"api_subs/#example-request","text":"curl -X PUT -H Content-Type: application/json -d 'PUTBODY' https://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine ?key=S3CR3T `","title":"Example request"},{"location":"api_subs/#put-body","text":"{ topic : projects/BRAND_NEW/topics/monitoring , ackDeadlineSeconds :10 }","title":"PUT  BODY"},{"location":"api_subs/#responses","text":"Success Response 200 OK { name : projects/BRAND_NEW/subscriptions/alert_engine , topic : projects/BRAND_NEW/topics/monitoring , ackDeadlineSeconds : 10 , created_on : 2020-11-19T00:00:00Z }","title":"Responses"},{"location":"api_subs/#push-enabled-subscriptions","text":"Whenever a subscription is created with a valid push configuration, the service will also generate a unique hash that should be later used to validate the ownership of the registered push endpoint, and will mark the subscription as unverified. The maxMessages field declares the number of messages that should be send per push action. The default value is 1 . If maxMessages holds a value of 1 your push endpoint should expect a request body with the following schema: { message : { attributes : { key : value }, data : SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ== , messageId : 136969346945 }, subscription : projects/myproject/subscriptions/mysubscription } If the maxMessages field holds a value of greater than 1 your push endpoint should expect a request body with the following schema: { messages :[ { message :{ attributes :{ key : value }, data : SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ== , messageId : 136969346945 }, subscription : projects/myproject/subscriptions/mysubscription }, { message :{ attributes :{ key : value }, data : SGVsbG8gQ2xvdWQgUHViL1N1YiEgSGVyZSBpcyBteSBtZXNzYWdlIQ== , messageId : 136969346945 }, subscription : projects/myproject/subscriptions/mysubscription } ] }","title":"Push Enabled Subscriptions"},{"location":"api_subs/#request-to-create-push-enabled-subscription","text":"{ topic : projects/BRAND_NEW/topics/monitoring , ackDeadlineSeconds :10, pushConfig : { pushEndpoint : https://127.0.0.1:5000/receive_here , maxMessages : 3, retryPolicy : { type : linear , period : 1000 } } }","title":"Request to create Push Enabled Subscription"},{"location":"api_subs/#response","text":"{ name : projects/BRAND_NEW/subscriptions/alert_engine , topic : projects/BRAND_NEW/topics/monitoring , ackDeadlineSeconds : 10, pushConfig : { pushEndpoint : https://127.0.0.1:5000/receive_here , maxMessages : 3, authorization_header : { type : autogen , value : 4551h9j7f7dde380a5f8bc4fdb4fe980c565b67b } , retryPolicy : { type : linear , period : 1000 }, verification_hash : 9d5189f7f758e380a5f8bc4fdb4fe980c565b67b , verified : false }, created_on : 2020-11-19T00:00:00Z }","title":"Response"},{"location":"api_subs/#authorization-headers","text":"Specify an authorization header value and how it is going to be generated, to be included in the outgoing push request with each message, to the remote push endpoint. autogen(default) : The authorization header value will be automatically generated by the service itself. disabled : No authorization header will be provided with the outgoing push requests.","title":"Authorization headers"},{"location":"api_subs/#different-retry-policies","text":"Creating a push enabled subscription with a linear retry policy and a period of 3000 means that you will be receiving message(s) every 3000ms . If you decide to choose a retry policy of slowstart , you will be receiving messages with dynamic internals. The slowstart retry policy starts by pushing the first message(s) and then deciding the time that should elapse before the next push action. - IF the message(s) are delivered successfully the elapsed time until the next push request will be halved, until it reaches the lower limit of 300ms . IF the message(s) are not delivered successfully the elapsed time until the next push request will be doubled, until it reached the upper limit of 1day . So for example, the first push action will have by default a 1 second interval. If it successful the next push re request will happen in 0.5 seconds . If it is unsuccessful the next push request will happen in 2 seconds .","title":"Different Retry Policies"},{"location":"api_subs/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#post-manage-subscriptions-verify-ownership-of-a-push-endpoint","text":"This request triggers the process of verifying the ownership of a registered push endpoint","title":"[POST] Manage Subscriptions - Verify ownership of a push endpoint"},{"location":"api_subs/#request_1","text":"PUT /v1/projects/{project_name}/subscriptions/{subscription_name}:verifyPushEndpoint","title":"Request"},{"location":"api_subs/#where_1","text":"Project_name: Name of the project subscription_name: The subscription name","title":"Where"},{"location":"api_subs/#example-request_1","text":"curl -X POST https://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:verifyPushEndpoint?key=S3CR3T `","title":"Example request"},{"location":"api_subs/#push-enabled-subscriptions_1","text":"Whenever a subscription is created with a valid push configuration, the service will also generate a unique hash that should be later used to validate the ownership of the registered push endpoint, and will mark the subscription as unverified. The owner of the push endpoint needs to execute the following steps in order to verify the ownership of the registered endpoint. Open an api call with a path of /ams_verification_hash . The service will try to access this path using the host:port of the push endpoint. For example, if the push endpoint is https://example.com:8443/receive_here , the push endpoint should also support the api route of https://example.com:8443/ams_verification_hash . The api route of https://example.com:8443/ams_verification_hash should support the http GET method. A GET request to https://example.com:8443/ams_verification_hash should return a response body with only the verification_hash that is found inside the subscriptions push configuration, a status code of 200 and the header Content-type: plain/text .","title":"Push Enabled Subscriptions"},{"location":"api_subs/#errors_1","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#get-manage-subscriptions-list-all-subscriptions-under-a-specific-topic","text":"This request lists all available subscriptions under a specific topic in the service.","title":"[GET] Manage Subscriptions - List All Subscriptions under a specific Topic"},{"location":"api_subs/#request_2","text":"GET /v1/projects/{project_name}/topics/{topic_name}/subscriptions","title":"Request"},{"location":"api_subs/#where_2","text":"Project_name: Name of the project the topic belongs to Topic_name: Name of the topic","title":"Where"},{"location":"api_subs/#example-request_2","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/p1/topics/t1/subscriptions?key=S3CR3T Success Response 200 OK { subscriptions : [ /projects/p1/subscriptions/sub1 , /projects/p1/subscriptions/sub2 ] }","title":"Example request"},{"location":"api_subs/#errors_2","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#get-manage-subscriptions-list-all-subscriptions","text":"This request lists all available subscriptions under a specific project in the service using pagination If the USER making the request has only consumer role for the respective project, it will load only the subscriptions that he has access to(being present in a subscriptions's acl). It is important to note that if there are no results to return the service will return the following: Success Response 200 OK { subscriptions : [], nextPageToken : , totalSize : 0 } Also the default value for pageSize = 0 and pageToken = \" . Pagesize = 0 returns all the results.","title":"[GET] Manage Subscriptions - List All Subscriptions"},{"location":"api_subs/#paginated-request-that-returns-all-subscriptions-under-the-specified-project","text":"This request lists all subscriptions in a project with a GET request","title":"Paginated Request that returns all subscriptions under the specified project"},{"location":"api_subs/#request_3","text":"GET /v1/projects/{project_name}/subscriptions","title":"Request"},{"location":"api_subs/#where_3","text":"Project_name: Name of the project to list the subscriptions","title":"Where"},{"location":"api_subs/#example-request_3","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions?key=S3CR3T","title":"Example request"},{"location":"api_subs/#responses_1","text":"Success Response 200 OK { subscriptions :[ { name : projects/BRAND_NEW/subscriptions/alert_engine , topic : projects/BRAND_NEW/topics/monitoring , pushConfig : {}, ackDeadlineSeconds : 10, created_on : 2020-11-19T00:00:00Z }, { name : projects/BRAND_NEW/subscriptions/alert_engine2 , topic : projects/BRAND_NEW/topics/monitoring , pushConfig : {}, ackDeadlineSeconds : 10, created_on : 2020-11-19T00:00:00Z }], nextPageToken : , totalSize : 2 }","title":"Responses"},{"location":"api_subs/#paginated-request-that-returns-the-next-page-of-a-specific-size","text":"This request lists subscriptions in a project with a GET request","title":"Paginated Request that returns the next page of a specific size"},{"location":"api_subs/#request_4","text":"GET /v1/projects/{project_name}/subscriptions","title":"Request"},{"location":"api_subs/#where_4","text":"Project_name: Name of the project to list the subscriptions","title":"Where"},{"location":"api_subs/#example-request_4","text":"curl -X PUT -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions?key=S3CR3T pageSize=1 pageToken=some_token","title":"Example request"},{"location":"api_subs/#responses_2","text":"Success Response 200 OK { subscriptions :[ { name : projects/BRAND_NEW/subscriptions/alert_engine , topic : projects/BRAND_NEW/topics/monitoring , pushConfig : {}, ackDeadlineSeconds : 10, created_on : 2020-11-19T00:00:00Z } ], nextPageToken : , totalSize : 2 }","title":"Responses"},{"location":"api_subs/#paginated-request-that-returns-the-first-page-of-a-specific-size","text":"This request lists subscriptions in a project with a GET request","title":"Paginated Request that returns the first page of a specific size"},{"location":"api_subs/#request_5","text":"GET /v1/projects/{project_name}/subscriptions","title":"Request"},{"location":"api_subs/#where_5","text":"Project_name: Name of the project to list the subscriptions","title":"Where"},{"location":"api_subs/#example-request_5","text":"curl -X PUT -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions?key=S3CR3T pageSize=1","title":"Example request"},{"location":"api_subs/#responses_3","text":"Success Response 200 OK { subscriptions :[ { name : projects/BRAND_NEW/subscriptions/alert_engine2 , topic : projects/BRAND_NEW/topics/monitoring , pushConfig : {}, ackDeadlineSeconds : 10, created_on : 2020-11-19T00:00:00Z } ], nextPageToken : some_token , totalSize : 2 }","title":"Responses"},{"location":"api_subs/#errors_3","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#get-manage-subscriptions-get-a-subscriptions-list-of-authorized-users","text":"This request returns a list of authorized users to consume from the subscription","title":"[GET] Manage Subscriptions - Get a subscription's list of authorized users"},{"location":"api_subs/#request_6","text":"GET /v1/projects/{project_name}/subscriptions/{sub_name}:acl","title":"Request"},{"location":"api_subs/#where_6","text":"Project_name: Name of the project to get Sub_name: The subscription name","title":"Where"},{"location":"api_subs/#example-request_6","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions/subscription:acl?key=S3CR3T `","title":"Example request"},{"location":"api_subs/#responses_4","text":"Success Response 200 OK { authorized_users : [ userC , userD ] }","title":"Responses"},{"location":"api_subs/#errors_4","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#post-modify-acl-of-a-given-subscription","text":"The following request Modifies the authorized users list of a given subscription","title":"[POST] Modify ACL of a given subscription"},{"location":"api_subs/#request_7","text":"POST /v1/projects/{project_name}/subscriptions/{sub_name}:modifyAcl","title":"Request"},{"location":"api_subs/#where_7","text":"project_name: Name of the project sub_name: name of the subscription","title":"Where"},{"location":"api_subs/#post-data","text":"{ authorized_users : [ UserX , UserY ] }","title":"Post data"},{"location":"api_subs/#example-request_7","text":"curl -X POST -H Content-Type: application/json -d { POSTDATA } https://{URL}/v1/projects/BRAND_NEW/subscriptions/subscription:modifyAcl?key=S3CR3T","title":"Example request"},{"location":"api_subs/#responses_5","text":"Success Response 200 OK","title":"Responses"},{"location":"api_subs/#errors_5","text":"If the to-be updated ACL contains users that are non-existent in the project, the API returns the following error: 404 NOT_FOUND { error : { code : 404, message : User(s): UserFoo1,UserFoo2 do not exist , status : NOT_FOUND } } Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#delete-manage-subscriptions-delete-subscriptions","text":"This request deletes a subscription in a project with a DELETE request","title":"[DELETE] Manage Subscriptions - Delete Subscriptions"},{"location":"api_subs/#request_8","text":"DELETE /v1/projects/{project_name}/subscriptions/{subscription_name}","title":"Request"},{"location":"api_subs/#where_8","text":"Project_name: Name of the project subscription_name: The subscription name to delete","title":"Where"},{"location":"api_subs/#example-request_8","text":"curl -X DELETE -H Content-Type: application/json http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine?key=S3CR3T","title":"Example request"},{"location":"api_subs/#responses_6","text":"Success Response Code: 200 OK , Empty response if successful.","title":"Responses"},{"location":"api_subs/#errors_6","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#post-modify-ack-deadline","text":"This request modifies the acknowledgment deadline for the subscription. The ack deadline value is measured in seconds. The minimum ack deadline value allowed is 0sec and the maximum 600sec.","title":"[POST] Modify Ack Deadline"},{"location":"api_subs/#request_9","text":"POST /v1/projects/{project_name}/subscriptions/{subscription_name}:modifyAckDeadline","title":"Request"},{"location":"api_subs/#post-body","text":"{ ackDeadlineSeconds : 20 }","title":"Post body:"},{"location":"api_subs/#where_9","text":"Project_name: Name of the project subscription_name: The subscription name to consume ackDeadlineSeconds: integer representing seconds for the acknowledgment deadline (min=0sec, max=600sec).","title":"Where"},{"location":"api_subs/#example-request_9","text":"curl -X POST -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:modifyAckDeadline?key=S3CR3T","title":"Example request"},{"location":"api_subs/#post-body_1","text":"{ ackDeadlineSeconds : 30 }","title":"post body:"},{"location":"api_subs/#responses_7","text":"Success Response Code: 200 OK , Empty response if successful. The deadline will change to 30seconds","title":"Responses"},{"location":"api_subs/#errors_7","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#post-modify-push-configuration","text":"This request modifies the push configuration of a subscription","title":"[POST] Modify Push Configuration"},{"location":"api_subs/#request_10","text":"POST /v1/projects/{project_name}/subscriptions/{subscription_name}:modifyPushConfig","title":"Request"},{"location":"api_subs/#post-body_2","text":"{ pushConfig :{ pushEndpoint : , maxMessages : 5, authorization_header : { type : autogen }, retryPolicy :{ type : linear , period :300 } } }","title":"Post body:"},{"location":"api_subs/#where_10","text":"Project_name: Name of the project subscription_name: The subscription name to consume pushConfig: configuration including pushEndpoint for the remote endpoint to receive the messages. Also includes retryPolicy (type of retryPolicy and period parameters) autogen(default when modyfing a sub from pull to push) : The authorization header value will be automatically generated by the service itself. disabled : No authorization header will be provided with the outgoing push requests. NOTE that if you updated a push configuration with autogen the service will generate a new value every time the update request happens. For example, if you want to update your authorization header value, you can use the update request with the autogen type.","title":"Where"},{"location":"api_subs/#example-request_10","text":"curl -X POST -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:modifyPushConfig?key=S3CR3T","title":"Example request"},{"location":"api_subs/#post-body_3","text":"{ pushConfig :{ pushEndpoint : host:example.com:8080/path/to/hook , maxMessages : 3, retryPolicy :{ type : linear , period :300 } } }","title":"post body:"},{"location":"api_subs/#responses_8","text":"Success Response Code: 200 OK , Empty response if successful. Whenever a subscription is created with a valid push configuration, the service will also generate a unique hash that should be later used to validate the ownership of the registered push endpoint, and will mark the subscription as unverified. NOTE Changing the push endpoint of a push enabled subscription, or removing the push configuration and then re-applying will mark the subscription as unverified and a new verification process should take place.","title":"Responses"},{"location":"api_subs/#errors_8","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#post-pull-messages-from-a-subscription-consume","text":"This request consumes messages from a subscription in a project with a POST request. It's important to note that the subscription's topic must exist in order for the user to pull messages.","title":"[POST] Pull messages from a subscription (Consume)"},{"location":"api_subs/#request_11","text":"POST /v1/projects/{project_name}/subscriptions/{subscription_name}:pull","title":"Request"},{"location":"api_subs/#post-body_4","text":"{ maxMessages : 1 }","title":"Post body:"},{"location":"api_subs/#where_11","text":"Project_name: Name of the project subscription_name: The subscription name to consume maxMessages: the max number of messages to consume returnImmediately: (true or false) to prevent the subscriber from waiting if the queue is currently empty. If not specified the default value is true. You can specify the max number of messages returned by one call by setting maxMessages field. By default, the server will keep the connection open until at least one message is received; you can optionally set the returnImmediately field to true to prevent the subscriber from waiting if the queue is currently empty.","title":"Where"},{"location":"api_subs/#example-request_11","text":"curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:pull?key=S3CR3T","title":"Example request"},{"location":"api_subs/#post-body_5","text":"{ \"maxMessages\": \"1\" }","title":"post body:"},{"location":"api_subs/#responses_9","text":"200 OK { receivedMessages : [ { ackId : dQNNHlAbEGEIBE... , message : { attributes : [ { key : whatever , value : foo } ], data : U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ , messageId : 100309303 } } ] }","title":"Responses"},{"location":"api_subs/#errors_9","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#post-sending-an-ack","text":"Messages retrieved from a pull subscription can be acknowledged by sending message with an array of ackIDs.","title":"[POST] Sending an ACK"},{"location":"api_subs/#request_12","text":"POST /v1/projects/{project_name}/subscriptions/{subscription_name}:acknowledge","title":"Request"},{"location":"api_subs/#post-body_6","text":"{ ackIds : [ dQNNHlAbEGEIBE... ] }","title":"Post body:"},{"location":"api_subs/#where_12","text":"Project_name: Name of the project subscription_name: The subscription name to consume ackIds: the ids of the messages","title":"Where"},{"location":"api_subs/#example-request_12","text":"curl -X POST -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:acknowledge?key=S3CR3T","title":"Example request"},{"location":"api_subs/#post-body_7","text":"{ ackIds : [ dQNNHlAbEGEIBE... ] }","title":"post body:"},{"location":"api_subs/#responses_10","text":"Success Response 200 OK","title":"Responses"},{"location":"api_subs/#errors_10","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#get-get-offsets","text":"This request returns the min, max and current offset of a subscription","title":"[GET] Get Offsets"},{"location":"api_subs/#request_13","text":"GET /v1/projects/{project_name}/subscriptions/{subscription_name}:offsets","title":"Request"},{"location":"api_subs/#post-body_8","text":"{ max : 14, min : 0, current : 4 }","title":"Post body:"},{"location":"api_subs/#where_13","text":"Project_name: Name of the project subscription_name: The subscription name to consume","title":"Where"},{"location":"api_subs/#example-request_13","text":"curl -X GET -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:offsets?key=S3CR3T","title":"Example request"},{"location":"api_subs/#post-body_9","text":"{ max : 14, min : 0, current : 4 }","title":"post body:"},{"location":"api_subs/#responses_11","text":"Success Response Code: 200 OK , Empty response if successful.","title":"Responses"},{"location":"api_subs/#errors_11","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#get-get-offset-by-timestamp","text":"This request returns the offset of the first message with a timestamp equal or greater than the time given.","title":"[GET] Get Offset by Timestamp"},{"location":"api_subs/#request_14","text":"GET /v1/projects/{project_name}/subscriptions/{subscription_name}:timeToOffset?time={{timestamp}}","title":"Request"},{"location":"api_subs/#where_14","text":"Project_name: Name of the project subscription_name: The subscription name to consume timestamp: timestamp in Zulu format - (2006-11-02T13:39:11.000Z)","title":"Where"},{"location":"api_subs/#example-request_14","text":"curl -X GET -H Content-Type: application/json http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:timeToOffset?key=S3CR3T time=2019-09-02T13:39:11.100Z","title":"Example request"},{"location":"api_subs/#responses_12","text":"Success Response Code: 200 OK","title":"Responses"},{"location":"api_subs/#response-body","text":"{ offset : 640 }","title":"Response body:"},{"location":"api_subs/#errors_12","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#post-modify-offsets","text":"This request modifies the current offset of a subscription","title":"[POST] Modify Offsets"},{"location":"api_subs/#request_15","text":"POST /v1/projects/{project_name}/subscriptions/{subscription_name}:modifyOFfset","title":"Request"},{"location":"api_subs/#post-body_10","text":"{ offset :3 }","title":"Post body:"},{"location":"api_subs/#where_15","text":"Project_name: Name of the project subscription_name: The subscription name to consume offset_config: an offset number in int64","title":"Where"},{"location":"api_subs/#example-request_15","text":"curl -X POST -H Content-Type: application/json -d POSTDATA http://{URL}/v1/projects/BRAND_NEW/subscriptions/alert_engine:modifyOffset?key=S3CR3T","title":"Example request"},{"location":"api_subs/#post-body_11","text":"{ offset :14 }","title":"post body:"},{"location":"api_subs/#responses_13","text":"Success Response Code: 200 OK , Empty response if successful.","title":"Responses"},{"location":"api_subs/#errors_13","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_subs/#get-subscription-metrics","text":"The following request returns related metrics for the specific subscription: for eg the number of consumed messages","title":"[GET] Subscription Metrics"},{"location":"api_subs/#request_16","text":"GET /v1/projects/{project_name}/subscriptions/{sub_name}:metrics","title":"Request"},{"location":"api_subs/#where_16","text":"Project_name: name of the project sub_name: name of the subscription","title":"Where"},{"location":"api_subs/#example-request_16","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/subscriptions/monitoring:metrics?key=S3CR3T","title":"Example request"},{"location":"api_subs/#responses_14","text":"If successful it returns the number of messages consumed in the specific subscription Success Response 200 OK { metrics : [ { metric : subscription.number_of_messages , metric_type : counter , value_type : int64 , resource_type : subscription , resource_name : sub1 , timeseries : [ { timestamp : 2017-06-30T14:20:38Z , value : 0 } ], description : Counter that displays the number number of messages published to the specific topic }, { metric : topic.number_of_bytes , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : sub1 , timeseries : [ { timestamp : 2017-06-30T14:20:38Z , value : 0 } ], description : Counter that displays the total size of data (in bytes) published to the specific topic }, { metric : subscription.consumption_rate , metric_type : rate , value_type : float64 , resource_type : subscription , resource_name : sub1 , timeseries : [ { timestamp : 2019-05-06T00:00:00Z , value : 10 } ], description : A rate that displays how many messages were consumed per second between the last two consume events } ] }","title":"Responses"},{"location":"api_subs/#errors_14","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_topics/","text":"Topics Api Calls Topics are resources that can hold messages. Publishers (users/systems) can create topics on demand and name them (Usually with names that make sense and express the class of messages delivered in the topic). A topic name must be scoped to a project. [PUT] Manage Topics - Create new topic This request creates a new topic with the given topic_name in a project with a PUT request Request PUT /v1/projects/{project_name}/topics/{topic_name} RequestBody If you need to link a schema with the topic you need to provide its name. { schema : schema-1 } Where Project_name: Name of the project to create Topic_name: The topic name to create Example request curl -X PUT -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/monitoring?key=S3CR3T Responses If successful, the response contains the newly created topic. Success Response 200 OK { name : projects/BRAND_NEW/topics/monitoring , created_on : 2020-11-21T00:00:00Z } Errors Please refer to section Errors to see all possible Errors [DELETE] Manage Topics - Delete topic This request deletes the defined topic in a project with a DELETE request Request DELETE /v1/projects/{project_name}/topics/{topic_name} Where Project_name: Name of the project to delete Topic_name: The topic name to delete Example request curl -X DELETE -H Content-Type: application/json -d '' https://{URL}/v1/projects/BRAND_NEW/topics/monitoring?key=S3CR3T Responses Success Response Code: 200 OK , Empty response if successful. Errors Please refer to section Errors to see all possible Errors [GET] Manage Topics - Get a topic This request gets the details of a topic in a project with a GET request Request GET /v1/projects/{project_name}/topics/{topic_name} Where Project_name: Name of the project to get Topic_name: The topic name to get Example request curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/monitoring?key=S3CR3T Responses If successful, the response returns the details of the defined topic. Success Response 200 OK { name : projects/BRAND_NEW/topics/monitoring , created_on : 2020-11-21T00:00:00Z } Errors Please refer to section Errors to see all possible Errors [GET] Manage Topics - List Topics This request lists all available topics under a specific project in the service using pagination. If the USER making the request has only publisher role for the respective project, it will load only the topics that he has access to(being present in a topic's acl). It is important to note that if there are no results to return the service will return the following: Success Response 200 OK { users : [], nextPageToken : , totalSize : 0 } Also the default value for pageSize = 0 and pageToken = \" . Pagesize = 0 returns all the results. Paginated Request that returns all topics under the specified project GET \"/v1/projects/{project_name}/topics\" Where Project_name: Name of the project to get the list of topics Example request curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/?key=S3CR3T ` Responses Success Response 200 OK { topics : [ { name : /project/BRAND_NEW/topics/monitoring , created_on : 2020-11-21T00:00:00Z }, { name : /project/BRAND_NEW/topics/accounting , created_on : 2020-11-21T00:00:00Z } ], nextPageToken : , totalSize : 2 } Paginated Request that returns the first page of a specific size GET \"/v1/projects/{project_name}/topics\" Where Project_name: Name of the project to get the list of topics Example request curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/?key=S3CR3T pageSize=1 ` Responses Success Response 200 OK { topics : [ { name : /project/BRAND_NEW/topics/monitoring , created_on : 2020-11-21T00:00:00Z } ], nextPageToken : some_token , totalSize : 2 } Paginated Request that returns the next page of a specific size GET \"/v1/projects/{project_name}/topics\" Where Project_name: Name of the project to get the list of topics Example request curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/?key=S3CR3T pageSize=1 pageToken=some_token ` Responses Success Response 200 OK { topics : [ { name : /project/BRAND_NEW/topics/accounting , created_on : 2020-11-21T00:00:00Z } ], nextPageToken : , totalSize : 2 } Errors Please refer to section Errors to see all possible Errors [POST] Publish message/s to a topic The topic:publish endpoint publishes a message, or a list of messages to a specific topic with a POST request Request POST /v1/projects/{project_name}/topics/{topic_name}:publish Where Project_name: Name of the project to post the messages topic_name: to post the messages Post data { messages : [ { attributes : { attr1 : test1 , attr2 : test2 } , data : U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ } ] } The value of the data property must be always encoded in base64 format. AVRO Schema Use case Whenever a topic has an AVRO Schema attached to it, all messages need to have their schema encoded alongside them in order for the validation to work properly. Example request curl -X POST -H Content-Type: application/json -d { POSTDATA } https://{URL}/v1/projects/BRAND_NEW/topics/monitoring:publish?key=S3CR3T Responses If successful, the response contains the messageIds of the messages published. Success Response 200 OK { messageIds : [ 100309303 ] } Errors Please refer to section Errors to see all possible Errors [GET] List ACL of a given topic The following request returns a list of authorized users (publishers) of a given topic. Request GET /v1/projects/{project_name}/topics/{topic_name}:acl Where Project_name: name of the project topic_name: name of the topic Example request curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/monitoring:acl?key=S3CR3T Responses If successful it returns the authorized users of the topic. Success Response 200 OK { authorized_users : [ UserA , UserB ] } Errors Please refer to section Errors to see all possible Errors [POST] Modify ACL of a given topic The following request Modifies the authorized users list of a given topic Request POST /v1/projects/{project_name}/topics/{topic_name}:modifyAcl Where Project_name: Name of the project topic_name: name of the topic Post data { authorized_users : [ UserX , UserY ] } Example request curl -X POST -H Content-Type: application/json -d { POSTDATA } https://{URL}/v1/projects/BRAND_NEW/topics/monitoring:modifyAcl?key=S3CR3T Responses Success Response 200 OK Errors If the to-be updated ACL contains users that are non-existent in the project the API returns the following error: 404 NOT_FOUND { error : { code : 404, message : User(s): UserFoo1,UserFoo2 do not exist , status : NOT_FOUND } } Please refer to section Errors to see all possible Errors [GET] Topic Metrics The following request returns related metrics for the specific topic: for eg the number of published messages Request GET /v1/projects/{project_name}/topics/{topic_name}:metrics Where Project_name: name of the project topic_name: name of the topic Example request curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/monitoring:metrics?key=S3CR3T Responses If successful it returns topic's related metrics (number of messages published and total bytes). Success Response 200 OK { metrics : [ { metric : topic.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2017-06-27T10:20:18Z , value : 1 } ], description : Counter that displays the number of subscriptions belonging to a specific topic }, { metric : topic.number_of_messages , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2017-06-27T10:20:18Z , value : 0 } ], description : Counter that displays the number number of messages published to the specific topic }, { metric : topic.number_of_bytes , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2017-06-27T10:20:18Z , value : 0 } ], description : Counter that displays the total size of data (in bytes) published to the specific topic }, { metric : topic.number_of_daily_messages , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2018-10-02 , value : 30 }, { timestamp : 2018-10-01 , value : 40 } ], description : A collection of counters that represents the total number of messages published each day to a specific topic }, { metric : topic.publishing_rate , metric_type : rate , value_type : float64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2019-05-06T00:00:00Z , value : 10 } ], description : A rate that displays how many messages were published per second between the last two publish events } ] } Errors Please refer to section Errors to see all possible Errors","title":"API Topics"},{"location":"api_topics/#topics-api-calls","text":"Topics are resources that can hold messages. Publishers (users/systems) can create topics on demand and name them (Usually with names that make sense and express the class of messages delivered in the topic). A topic name must be scoped to a project.","title":"Topics Api Calls"},{"location":"api_topics/#put-manage-topics-create-new-topic","text":"This request creates a new topic with the given topic_name in a project with a PUT request","title":"[PUT] Manage Topics - Create new topic"},{"location":"api_topics/#request","text":"PUT /v1/projects/{project_name}/topics/{topic_name}","title":"Request"},{"location":"api_topics/#requestbody","text":"If you need to link a schema with the topic you need to provide its name. { schema : schema-1 }","title":"RequestBody"},{"location":"api_topics/#where","text":"Project_name: Name of the project to create Topic_name: The topic name to create","title":"Where"},{"location":"api_topics/#example-request","text":"curl -X PUT -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/monitoring?key=S3CR3T","title":"Example request"},{"location":"api_topics/#responses","text":"If successful, the response contains the newly created topic. Success Response 200 OK { name : projects/BRAND_NEW/topics/monitoring , created_on : 2020-11-21T00:00:00Z }","title":"Responses"},{"location":"api_topics/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_topics/#delete-manage-topics-delete-topic","text":"This request deletes the defined topic in a project with a DELETE request","title":"[DELETE] Manage Topics - Delete topic"},{"location":"api_topics/#request_1","text":"DELETE /v1/projects/{project_name}/topics/{topic_name}","title":"Request"},{"location":"api_topics/#where_1","text":"Project_name: Name of the project to delete Topic_name: The topic name to delete","title":"Where"},{"location":"api_topics/#example-request_1","text":"curl -X DELETE -H Content-Type: application/json -d '' https://{URL}/v1/projects/BRAND_NEW/topics/monitoring?key=S3CR3T","title":"Example request"},{"location":"api_topics/#responses_1","text":"Success Response Code: 200 OK , Empty response if successful.","title":"Responses"},{"location":"api_topics/#errors_1","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_topics/#get-manage-topics-get-a-topic","text":"This request gets the details of a topic in a project with a GET request","title":"[GET] Manage Topics - Get a topic"},{"location":"api_topics/#request_2","text":"GET /v1/projects/{project_name}/topics/{topic_name}","title":"Request"},{"location":"api_topics/#where_2","text":"Project_name: Name of the project to get Topic_name: The topic name to get","title":"Where"},{"location":"api_topics/#example-request_2","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/monitoring?key=S3CR3T","title":"Example request"},{"location":"api_topics/#responses_2","text":"If successful, the response returns the details of the defined topic. Success Response 200 OK { name : projects/BRAND_NEW/topics/monitoring , created_on : 2020-11-21T00:00:00Z }","title":"Responses"},{"location":"api_topics/#errors_2","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_topics/#get-manage-topics-list-topics","text":"This request lists all available topics under a specific project in the service using pagination. If the USER making the request has only publisher role for the respective project, it will load only the topics that he has access to(being present in a topic's acl). It is important to note that if there are no results to return the service will return the following: Success Response 200 OK { users : [], nextPageToken : , totalSize : 0 } Also the default value for pageSize = 0 and pageToken = \" . Pagesize = 0 returns all the results.","title":"[GET] Manage Topics - List Topics"},{"location":"api_topics/#paginated-request-that-returns-all-topics-under-the-specified-project","text":"GET \"/v1/projects/{project_name}/topics\"","title":"Paginated Request that returns all topics under the specified project"},{"location":"api_topics/#where_3","text":"Project_name: Name of the project to get the list of topics","title":"Where"},{"location":"api_topics/#example-request_3","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/?key=S3CR3T `","title":"Example request"},{"location":"api_topics/#responses_3","text":"Success Response 200 OK { topics : [ { name : /project/BRAND_NEW/topics/monitoring , created_on : 2020-11-21T00:00:00Z }, { name : /project/BRAND_NEW/topics/accounting , created_on : 2020-11-21T00:00:00Z } ], nextPageToken : , totalSize : 2 }","title":"Responses"},{"location":"api_topics/#paginated-request-that-returns-the-first-page-of-a-specific-size","text":"GET \"/v1/projects/{project_name}/topics\"","title":"Paginated Request that returns the first page of a specific size"},{"location":"api_topics/#where_4","text":"Project_name: Name of the project to get the list of topics","title":"Where"},{"location":"api_topics/#example-request_4","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/?key=S3CR3T pageSize=1 `","title":"Example request"},{"location":"api_topics/#responses_4","text":"Success Response 200 OK { topics : [ { name : /project/BRAND_NEW/topics/monitoring , created_on : 2020-11-21T00:00:00Z } ], nextPageToken : some_token , totalSize : 2 }","title":"Responses"},{"location":"api_topics/#paginated-request-that-returns-the-next-page-of-a-specific-size","text":"GET \"/v1/projects/{project_name}/topics\"","title":"Paginated Request that returns the next  page of a specific size"},{"location":"api_topics/#where_5","text":"Project_name: Name of the project to get the list of topics","title":"Where"},{"location":"api_topics/#example-request_5","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/?key=S3CR3T pageSize=1 pageToken=some_token `","title":"Example request"},{"location":"api_topics/#responses_5","text":"Success Response 200 OK { topics : [ { name : /project/BRAND_NEW/topics/accounting , created_on : 2020-11-21T00:00:00Z } ], nextPageToken : , totalSize : 2 }","title":"Responses"},{"location":"api_topics/#errors_3","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_topics/#post-publish-messages-to-a-topic","text":"The topic:publish endpoint publishes a message, or a list of messages to a specific topic with a POST request","title":"[POST] Publish message/s to a topic"},{"location":"api_topics/#request_3","text":"POST /v1/projects/{project_name}/topics/{topic_name}:publish","title":"Request"},{"location":"api_topics/#where_6","text":"Project_name: Name of the project to post the messages topic_name: to post the messages","title":"Where"},{"location":"api_topics/#post-data","text":"{ messages : [ { attributes : { attr1 : test1 , attr2 : test2 } , data : U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ } ] } The value of the data property must be always encoded in base64 format.","title":"Post data"},{"location":"api_topics/#avro-schema-use-case","text":"Whenever a topic has an AVRO Schema attached to it, all messages need to have their schema encoded alongside them in order for the validation to work properly.","title":"AVRO Schema Use case"},{"location":"api_topics/#example-request_6","text":"curl -X POST -H Content-Type: application/json -d { POSTDATA } https://{URL}/v1/projects/BRAND_NEW/topics/monitoring:publish?key=S3CR3T","title":"Example request"},{"location":"api_topics/#responses_6","text":"If successful, the response contains the messageIds of the messages published. Success Response 200 OK { messageIds : [ 100309303 ] }","title":"Responses"},{"location":"api_topics/#errors_4","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_topics/#get-list-acl-of-a-given-topic","text":"The following request returns a list of authorized users (publishers) of a given topic.","title":"[GET] List ACL of a given topic"},{"location":"api_topics/#request_4","text":"GET /v1/projects/{project_name}/topics/{topic_name}:acl","title":"Request"},{"location":"api_topics/#where_7","text":"Project_name: name of the project topic_name: name of the topic","title":"Where"},{"location":"api_topics/#example-request_7","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/monitoring:acl?key=S3CR3T","title":"Example request"},{"location":"api_topics/#responses_7","text":"If successful it returns the authorized users of the topic. Success Response 200 OK { authorized_users : [ UserA , UserB ] }","title":"Responses"},{"location":"api_topics/#errors_5","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_topics/#post-modify-acl-of-a-given-topic","text":"The following request Modifies the authorized users list of a given topic","title":"[POST] Modify ACL of a given topic"},{"location":"api_topics/#request_5","text":"POST /v1/projects/{project_name}/topics/{topic_name}:modifyAcl","title":"Request"},{"location":"api_topics/#where_8","text":"Project_name: Name of the project topic_name: name of the topic","title":"Where"},{"location":"api_topics/#post-data_1","text":"{ authorized_users : [ UserX , UserY ] }","title":"Post data"},{"location":"api_topics/#example-request_8","text":"curl -X POST -H Content-Type: application/json -d { POSTDATA } https://{URL}/v1/projects/BRAND_NEW/topics/monitoring:modifyAcl?key=S3CR3T","title":"Example request"},{"location":"api_topics/#responses_8","text":"Success Response 200 OK","title":"Responses"},{"location":"api_topics/#errors_6","text":"If the to-be updated ACL contains users that are non-existent in the project the API returns the following error: 404 NOT_FOUND { error : { code : 404, message : User(s): UserFoo1,UserFoo2 do not exist , status : NOT_FOUND } } Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_topics/#get-topic-metrics","text":"The following request returns related metrics for the specific topic: for eg the number of published messages","title":"[GET] Topic Metrics"},{"location":"api_topics/#request_6","text":"GET /v1/projects/{project_name}/topics/{topic_name}:metrics","title":"Request"},{"location":"api_topics/#where_9","text":"Project_name: name of the project topic_name: name of the topic","title":"Where"},{"location":"api_topics/#example-request_9","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/BRAND_NEW/topics/monitoring:metrics?key=S3CR3T","title":"Example request"},{"location":"api_topics/#responses_9","text":"If successful it returns topic's related metrics (number of messages published and total bytes). Success Response 200 OK { metrics : [ { metric : topic.number_of_subscriptions , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2017-06-27T10:20:18Z , value : 1 } ], description : Counter that displays the number of subscriptions belonging to a specific topic }, { metric : topic.number_of_messages , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2017-06-27T10:20:18Z , value : 0 } ], description : Counter that displays the number number of messages published to the specific topic }, { metric : topic.number_of_bytes , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2017-06-27T10:20:18Z , value : 0 } ], description : Counter that displays the total size of data (in bytes) published to the specific topic }, { metric : topic.number_of_daily_messages , metric_type : counter , value_type : int64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2018-10-02 , value : 30 }, { timestamp : 2018-10-01 , value : 40 } ], description : A collection of counters that represents the total number of messages published each day to a specific topic }, { metric : topic.publishing_rate , metric_type : rate , value_type : float64 , resource_type : topic , resource_name : topic1 , timeseries : [ { timestamp : 2019-05-06T00:00:00Z , value : 10 } ], description : A rate that displays how many messages were published per second between the last two publish events } ] }","title":"Responses"},{"location":"api_topics/#errors_7","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_users/","text":"User Api Calls ARGO Messaging Service supports calls for creating and modifing users [GET] Manage Users - List all users This request lists all available users in the service using pagination It is important to note that if there are no results to return the service will return the following: Success Response 200 OK { users : [], nextPageToken : , totalSize : 0 } Also the default value for pageSize = 0 and pageToken = \" . Pagesize = 0 returns all the results. Request GET /v1/users Paginated Request that returns all users in one page Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/users?key=S3CR3T Responses If successful, the response contains a list of all available users in the service Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }, { uuid : 94bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub3 , sub4 ] } ], name : UserB , token : S3CR3T2 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bberr , projects : [ { project : ARGO , roles : [ publisher , consumer ], topics : [ topic3 ], subscriptions : [ sub2 ] } ], name : UserX , token : S3CR3T3 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbfrt , projects : [ { project : ARGO , roles : [ publisher , consumer ], topics : [ topic2 ], subscriptions : [ sub3 , sub4 ] } ], name : UserZ , token : S3CR3T4 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA } ], nextPageToken : , totalSize : 5 } Paginated Request that returns the 2 most recent users Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/users?key=S3CR3T pageSize=2 Responses If successful, the response contains a list of the 2 most recently added users Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : some_token2 , totalSize : 5 } Paginated Request that returns the next 3 users Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/users?key=S3CR3T pageSize=3 pageToken=some_token2 Responses If successful, the response contains a list of the next 3 users Success Response 200 OK { users : [ { uuid : 94bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub3 , sub4 ] } ], name : UserB , token : S3CR3T2 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bberr , projects : [ { project : ARGO , roles : [ publisher , consumer ], topics : [ topic3 ], subscriptions : [ sub2 ] } ], name : UserX , token : S3CR3T3 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbfrt , projects : [ { project : ARGO , roles : [ publisher , consumer ], topics : [ topic2 ], subscriptions : [ sub3 , sub4 ] } ], name : UserZ , token : S3CR3T4 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA } ], nextPageToken : some_token3 , totalSize : 5 } Paginated Request that returns all users that are members of a specific project Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/users?key=S3CR3T project=ARGO2 Responses If successful, the response contains a list of all available users that are members in the project ARGO2 Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : , totalSize : 1 } Errors Please refer to section Errors to see all possible Errors [GET] Manage Users - List a specific user This request lists information about a specific user in the service Request GET /v1/users/{user_name} Where user_name: Name of the user Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/users/UserA?key=S3CR3T Responses If successful, the response contains information about the specific user Success Response 200 OK { uuid : 99bfd746-4rte-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } Errors Please refer to section Errors to see all possible Errors [GET] Manage Users - List a specific user by token This request lists information about a specific user using user's token as input Request GET /v1/users:byToken/{token} Where token: the token of the user Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/users:byToken/S3CR3T1?key=S3CR3T Responses If successful, the response contains information about the specific user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } Errors Please refer to section Errors to see all possible Errors [GET] Manage Users - List a specific user by authentication key This request lists information about a specific user based on the authentication key provided as a url parameter Request GET /v1/users/profile Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/users/profile?key=S3CR3T1 Responses If successful, the response contains information about the specific user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } Errors Please refer to section Errors to see all possible Errors [GET] Manage Users - List a specific user by UUID This request lists information about a specific user using user's UUID as input Request GET /v1/users:byUUID/{uuid} Where uuid: the uuid of the user Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/users:byUUID/99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc?key=S3CR3T Responses If successful, the response contains information about the specific user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } Errors Please refer to section Errors to see all possible Errors [POST] Manage Users - Create new user This request creates a new user in a project Request POST /v1/users/{user_name} Post body: { projects : [ { project : ARGO , roles : [ project_admin ] } ], email : foo-email , first_name : fname-1 , last_name : lname-1 , organization : org-1 , description : desc-1 , service_roles :[] } Where user_name: Name of the user projects: A list of Projects associated roles that the user has on those projects email: User's email service_roles: A list of service-wide roles. An example of service-wide role is service_admin which can manage projects or other users Available Roles ARGO Messaging Service has the following predefined project roles: Role Description project_admin Users that have the project_admin have, by default, all capabilities in their project. They can also manage resources such as topics and subscriptions (CRUD) and also manage ACLs (users) on those resources as well consumer Users that have the consumer role are only able to pull messages from subscriptions that are authorized to use (based on ACLs) publisher Users that have the publisher role are only able to publish messages on topics that are authorized to use (based on ACLs) and the following service-wide role: Role Description service_admin Users with service_admin role operate service wide. They are able to create, modify and delete projects. Also they are able to create, modify and delete users and assign them to projects. Example request json curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/ARGO/users/USERNEW?key=S3CR3T Responses If successful, the response contains the newly created user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2a-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ project_admin ], topics :[], subscriptions :[] } ], name : USERNEW , token : R4ND0MT0K3N , email : foo-email , first_name : fname-1 , last_name : lname-1 , organization : org-1 , description : desc-1 , service_roles :[], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA } Errors Please refer to section Errors to see all possible Errors [PUT] Manage Users - Update a user This request updates an existing user's information Request PUT /v1/users/{user_name} Put body: { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebz , projects : [ { project : ARGO2 , roles : [ project_admin ] } ], name : CHANGED_NAME , first_name : fname-1 , last_name : lname-1 , organization : org-1 , description : desc-1 , email : foo-email , service_roles :[] } Where user_name: Name of the user projects: A list of Projects associated roles that the user has on those projects email: User's email service_roles: A list of service-wide roles. An example of service-wide role is service_admin which can manage projects or other users Example request json curl -X POST -H Content-Type: application/json -d PUTDATA https://{URL}/v1/projects/ARGO/users/USERNEW?key=S3CR3T Responses If successful, the response contains the newly created project Success Response 200 OK { uuid : 99bfd740-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO2 , roles : [ project_admin ], topics :[], subscriptions :[] } ], name : CHANGED_NAME , token : R4ND0MT0K3N , email : foo-email , first_name : fname-1 , last_name : lname-1 , organization : org-1 , description : desc-1 , service_roles :[], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-11T10:00:00Z , created_by : UserA } Errors Please refer to section Errors to see all possible Errors [POST] Manage Users - Refresh token This request refreshes an existing user's token Request POST /v1/users/{user_name}:refreshToken Where user_name: Name of the user Example request json curl -X POST -H Content-Type: application/json https://{URL}/v1/projects/ARGO/users/USER2:refreshToken?key=S3CR3T Responses If successful, the response contains the newly created project Success Response 200 OK { uuid : 99bfd746-4ebe-11p0-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ project_admin ], topics :[], subscriptions :[] } ], name : USER2 , token : NEWRANDOMTOKEN , email : foo-email , service_roles :[], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-11T12:00:00Z , created_by : UserA } Errors Please refer to section Errors to see all possible Errors [DELETE] Manage Users - Delete User This request deletes an existing user Request DELETE /v1/users/{user_name} Where user_name: Name of the user Example request curl -X DELETE -H Content-Type: application/json https://{URL}/v1/projects/ARGO/users/USER2?key=S3CR3T Responses If successful, the response returns empty Success Response 200 OK Errors Please refer to section Errors to see all possible Errors","title":"API Users"},{"location":"api_users/#user-api-calls","text":"ARGO Messaging Service supports calls for creating and modifing users","title":"User Api Calls"},{"location":"api_users/#get-manage-users-list-all-users","text":"This request lists all available users in the service using pagination It is important to note that if there are no results to return the service will return the following: Success Response 200 OK { users : [], nextPageToken : , totalSize : 0 } Also the default value for pageSize = 0 and pageToken = \" . Pagesize = 0 returns all the results.","title":"[GET] Manage Users - List all users"},{"location":"api_users/#request","text":"GET /v1/users","title":"Request"},{"location":"api_users/#paginated-request-that-returns-all-users-in-one-page","text":"","title":"Paginated Request that returns all users in one page"},{"location":"api_users/#example-request","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/users?key=S3CR3T","title":"Example request"},{"location":"api_users/#responses","text":"If successful, the response contains a list of all available users in the service Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }, { uuid : 94bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub3 , sub4 ] } ], name : UserB , token : S3CR3T2 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bberr , projects : [ { project : ARGO , roles : [ publisher , consumer ], topics : [ topic3 ], subscriptions : [ sub2 ] } ], name : UserX , token : S3CR3T3 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbfrt , projects : [ { project : ARGO , roles : [ publisher , consumer ], topics : [ topic2 ], subscriptions : [ sub3 , sub4 ] } ], name : UserZ , token : S3CR3T4 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA } ], nextPageToken : , totalSize : 5 }","title":"Responses"},{"location":"api_users/#paginated-request-that-returns-the-2-most-recent-users","text":"","title":"Paginated Request that returns the 2 most recent users"},{"location":"api_users/#example-request_1","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/users?key=S3CR3T pageSize=2","title":"Example request"},{"location":"api_users/#responses_1","text":"If successful, the response contains a list of the 2 most recently added users Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : some_token2 , totalSize : 5 }","title":"Responses"},{"location":"api_users/#paginated-request-that-returns-the-next-3-users","text":"","title":"Paginated Request that returns the next 3 users"},{"location":"api_users/#example-request_2","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/users?key=S3CR3T pageSize=3 pageToken=some_token2","title":"Example request"},{"location":"api_users/#responses_2","text":"If successful, the response contains a list of the next 3 users Success Response 200 OK { users : [ { uuid : 94bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub3 , sub4 ] } ], name : UserB , token : S3CR3T2 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bberr , projects : [ { project : ARGO , roles : [ publisher , consumer ], topics : [ topic3 ], subscriptions : [ sub2 ] } ], name : UserX , token : S3CR3T3 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA }, { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbfrt , projects : [ { project : ARGO , roles : [ publisher , consumer ], topics : [ topic2 ], subscriptions : [ sub3 , sub4 ] } ], name : UserZ , token : S3CR3T4 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA } ], nextPageToken : some_token3 , totalSize : 5 }","title":"Responses"},{"location":"api_users/#paginated-request-that-returns-all-users-that-are-members-of-a-specific-project","text":"","title":"Paginated Request that returns all users that are members of a specific project"},{"location":"api_users/#example-request_3","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/users?key=S3CR3T project=ARGO2","title":"Example request"},{"location":"api_users/#responses_3","text":"If successful, the response contains a list of all available users that are members in the project ARGO2 Success Response 200 OK { users : [ { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebw , projects : [ { project : ARGO2 , roles : [ consumer , publisher ], topics : [], subscriptions : [] } ], name : Test , token : S3CR3T , email : Test@test.com , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z } ], nextPageToken : , totalSize : 1 }","title":"Responses"},{"location":"api_users/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_users/#get-manage-users-list-a-specific-user","text":"This request lists information about a specific user in the service","title":"[GET] Manage Users - List a specific user"},{"location":"api_users/#request_1","text":"GET /v1/users/{user_name}","title":"Request"},{"location":"api_users/#where","text":"user_name: Name of the user","title":"Where"},{"location":"api_users/#example-request_4","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/users/UserA?key=S3CR3T","title":"Example request"},{"location":"api_users/#responses_4","text":"If successful, the response contains information about the specific user Success Response 200 OK { uuid : 99bfd746-4rte-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }","title":"Responses"},{"location":"api_users/#errors_1","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_users/#get-manage-users-list-a-specific-user-by-token","text":"This request lists information about a specific user using user's token as input","title":"[GET] Manage Users - List a specific user by token"},{"location":"api_users/#request_2","text":"GET /v1/users:byToken/{token}","title":"Request"},{"location":"api_users/#where_1","text":"token: the token of the user","title":"Where"},{"location":"api_users/#example-request_5","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/users:byToken/S3CR3T1?key=S3CR3T","title":"Example request"},{"location":"api_users/#responses_5","text":"If successful, the response contains information about the specific user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }","title":"Responses"},{"location":"api_users/#errors_2","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_users/#get-manage-users-list-a-specific-user-by-authentication-key","text":"This request lists information about a specific user based on the authentication key provided as a url parameter","title":"[GET] Manage Users - List a specific user by authentication key"},{"location":"api_users/#request_3","text":"GET /v1/users/profile","title":"Request"},{"location":"api_users/#example-request_6","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/users/profile?key=S3CR3T1","title":"Example request"},{"location":"api_users/#responses_6","text":"If successful, the response contains information about the specific user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }","title":"Responses"},{"location":"api_users/#errors_3","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_users/#get-manage-users-list-a-specific-user-by-uuid","text":"This request lists information about a specific user using user's UUID as input","title":"[GET] Manage Users - List a specific user by UUID"},{"location":"api_users/#request_4","text":"GET /v1/users:byUUID/{uuid}","title":"Request"},{"location":"api_users/#where_2","text":"uuid: the uuid of the user","title":"Where"},{"location":"api_users/#example-request_7","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/users:byUUID/99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc?key=S3CR3T","title":"Example request"},{"location":"api_users/#responses_7","text":"If successful, the response contains information about the specific user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ consumer , publisher ], topics : [ topic1 , topic2 ], subscriptions : [ sub1 , sub2 , sub3 ] } ], name : UserA , first_name : FirstA , last_name : LastA , organization : OrgA , description : DescA , token : S3CR3T1 , email : foo-email , service_roles : [], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z }","title":"Responses"},{"location":"api_users/#errors_4","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_users/#post-manage-users-create-new-user","text":"This request creates a new user in a project","title":"[POST] Manage Users - Create new user"},{"location":"api_users/#request_5","text":"POST /v1/users/{user_name}","title":"Request"},{"location":"api_users/#post-body","text":"{ projects : [ { project : ARGO , roles : [ project_admin ] } ], email : foo-email , first_name : fname-1 , last_name : lname-1 , organization : org-1 , description : desc-1 , service_roles :[] }","title":"Post body:"},{"location":"api_users/#where_3","text":"user_name: Name of the user projects: A list of Projects associated roles that the user has on those projects email: User's email service_roles: A list of service-wide roles. An example of service-wide role is service_admin which can manage projects or other users","title":"Where"},{"location":"api_users/#available-roles","text":"ARGO Messaging Service has the following predefined project roles: Role Description project_admin Users that have the project_admin have, by default, all capabilities in their project. They can also manage resources such as topics and subscriptions (CRUD) and also manage ACLs (users) on those resources as well consumer Users that have the consumer role are only able to pull messages from subscriptions that are authorized to use (based on ACLs) publisher Users that have the publisher role are only able to publish messages on topics that are authorized to use (based on ACLs) and the following service-wide role: Role Description service_admin Users with service_admin role operate service wide. They are able to create, modify and delete projects. Also they are able to create, modify and delete users and assign them to projects.","title":"Available Roles"},{"location":"api_users/#example-request_8","text":"json curl -X POST -H Content-Type: application/json -d POSTDATA https://{URL}/v1/projects/ARGO/users/USERNEW?key=S3CR3T","title":"Example request"},{"location":"api_users/#responses_8","text":"If successful, the response contains the newly created user Success Response 200 OK { uuid : 99bfd746-4ebe-11e8-9c2a-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ project_admin ], topics :[], subscriptions :[] } ], name : USERNEW , token : R4ND0MT0K3N , email : foo-email , first_name : fname-1 , last_name : lname-1 , organization : org-1 , description : desc-1 , service_roles :[], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-10T23:00:00Z , created_by : UserA }","title":"Responses"},{"location":"api_users/#errors_5","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_users/#put-manage-users-update-a-user","text":"This request updates an existing user's information","title":"[PUT] Manage Users - Update a user"},{"location":"api_users/#request_6","text":"PUT /v1/users/{user_name}","title":"Request"},{"location":"api_users/#put-body","text":"{ uuid : 99bfd746-4ebe-11e8-9c2d-fa7ae01bbebz , projects : [ { project : ARGO2 , roles : [ project_admin ] } ], name : CHANGED_NAME , first_name : fname-1 , last_name : lname-1 , organization : org-1 , description : desc-1 , email : foo-email , service_roles :[] }","title":"Put body:"},{"location":"api_users/#where_4","text":"user_name: Name of the user projects: A list of Projects associated roles that the user has on those projects email: User's email service_roles: A list of service-wide roles. An example of service-wide role is service_admin which can manage projects or other users","title":"Where"},{"location":"api_users/#example-request_9","text":"json curl -X POST -H Content-Type: application/json -d PUTDATA https://{URL}/v1/projects/ARGO/users/USERNEW?key=S3CR3T","title":"Example request"},{"location":"api_users/#responses_9","text":"If successful, the response contains the newly created project Success Response 200 OK { uuid : 99bfd740-4ebe-11e8-9c2d-fa7ae01bbebc , projects : [ { project : ARGO2 , roles : [ project_admin ], topics :[], subscriptions :[] } ], name : CHANGED_NAME , token : R4ND0MT0K3N , email : foo-email , first_name : fname-1 , last_name : lname-1 , organization : org-1 , description : desc-1 , service_roles :[], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-11T10:00:00Z , created_by : UserA }","title":"Responses"},{"location":"api_users/#errors_6","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_users/#post-manage-users-refresh-token","text":"This request refreshes an existing user's token","title":"[POST] Manage Users - Refresh token"},{"location":"api_users/#request_7","text":"POST /v1/users/{user_name}:refreshToken","title":"Request"},{"location":"api_users/#where_5","text":"user_name: Name of the user","title":"Where"},{"location":"api_users/#example-request_10","text":"json curl -X POST -H Content-Type: application/json https://{URL}/v1/projects/ARGO/users/USER2:refreshToken?key=S3CR3T","title":"Example request"},{"location":"api_users/#responses_10","text":"If successful, the response contains the newly created project Success Response 200 OK { uuid : 99bfd746-4ebe-11p0-9c2d-fa7ae01bbebc , projects : [ { project : ARGO , roles : [ project_admin ], topics :[], subscriptions :[] } ], name : USER2 , token : NEWRANDOMTOKEN , email : foo-email , service_roles :[], created_on : 2009-11-10T23:00:00Z , modified_on : 2009-11-11T12:00:00Z , created_by : UserA }","title":"Responses"},{"location":"api_users/#errors_7","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_users/#delete-manage-users-delete-user","text":"This request deletes an existing user","title":"[DELETE] Manage Users - Delete User"},{"location":"api_users/#request_8","text":"DELETE /v1/users/{user_name}","title":"Request"},{"location":"api_users/#where_6","text":"user_name: Name of the user","title":"Where"},{"location":"api_users/#example-request_11","text":"curl -X DELETE -H Content-Type: application/json https://{URL}/v1/projects/ARGO/users/USER2?key=S3CR3T","title":"Example request"},{"location":"api_users/#responses_11","text":"If successful, the response returns empty Success Response 200 OK","title":"Responses"},{"location":"api_users/#errors_8","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_version/","text":"List API Version Information This method can be used to retrieve api version information Input GET /v1/version Request headers Accept: application/json Response Headers: Status: 200 OK Response Body Json Response { release : 1.0.5 , commit : f9f2e8c5f02lbcc94fe76b0d3cfa5d20d9365444 , build_time : 2019-11-01T12:51:04Z , golang : go1.11.5 , compiler : gc , os : linux , architecture : amd64 }","title":"List API Version Information"},{"location":"api_version/#list-api-version-information","text":"This method can be used to retrieve api version information","title":"List API Version Information"},{"location":"api_version/#input","text":"GET /v1/version","title":"Input"},{"location":"api_version/#request-headers","text":"Accept: application/json","title":"Request headers"},{"location":"api_version/#response","text":"Headers: Status: 200 OK","title":"Response"},{"location":"api_version/#response-body","text":"Json Response { release : 1.0.5 , commit : f9f2e8c5f02lbcc94fe76b0d3cfa5d20d9365444 , build_time : 2019-11-01T12:51:04Z , golang : go1.11.5 , compiler : gc , os : linux , architecture : amd64 }","title":"Response Body"},{"location":"auth/","text":"Security and privacy considerations Authentication is the process of determining the identity of a client, which is typically a user account. Authorization is the process of determining what permissions an authenticated identity has on a set of specified resources. In the Messaging API, there can be no authorization without authentication. This is an initial implementation of the user authentication and authorization. In the next versions of the ARGO Messaging service we are going to provide support for both bear and OpenID Connect tokens for the API access and it will be possible to apply ACLs at each (resource) subscriptions and topics. User Authentication Authentication requires the presence of a populated \u201cusers\u201d collection in the datastore in the adhering to the following schema: { name : john , email : john@doe.com , project : ARGO , token : S3CR3T , roles : [ admin , member ] } Parameter Description name username email User\u2019s email project Project that the user belongs to token Secret token for authentication roles List of roles that user has. Each role definition is used in authorization (explained later) Each user is authenticated by adding the url parameter ?key=T0K3N in each API request Authorization Authorization requires the presence of a populated \u201croles\u201d collection in the datastore in the adhering to the following schema: { resource : resource_name:action , roles : [ admin , member ] } Parameter Description resource Holds the name of the resource and the action on that resource in the following format: resource_name:action roles A list of roles allowed on this resource:action Resource_name:action must be the same with the default routes supported in the api currently and those are: Action Description topics:list Allow user to list all topics in a project when using GET /projects/PROJECT_A/topics topics:show Allow user to get information on a specific topic when using GET /projects/PROJECT_A/topics/TOPIC_A topics:create Allow user to create a new topic when using PUT /projects/PROJECT_A/topics/TOPIC_NEW topics:delete Allow user to delete an existing topic when using DELETE /projects/PROJECT_A/topics/TOPIC_A topics:publish Allow user to publish messages in a topic when using POST /projects/PROJECT_A/topics/TOPIC_A:publish subscriptions:list Allow user to list all subscriptions in a project when using GET /projects/PROJECT_A/subscriptions subscriptions:show Allow user to get information on a specific subscription when using GET /projects/PROJECT_A/subscriptions/SUB_A subscriptions:create Allow user to create a new subscription when using PUT /projects/PROJECT_A/subscriptions/SUB_NEW subscriptions:delete Allow user to delete an existing subscription when using DELETE /projects/PROJECT_A/subscriptions/SUB_A subscriptions:pull Allow user to pull messages from a subscription when using POST /projects/PROJECT_A/subscriptions/SUB_A:pull subscriptions:acknowledge Allow user to acknowledge messages that has pulled when using POST /projects/PROJECT_A/subscriptions/SUB_A:acknowledge Per Resource Authorization Messaging API provides the option to control in finer detail access on resources such as topics and subscriptions for users(clients) that are producers or subscribers. Each resource (topic/subscription) comes with an access list (ACL) that contains producers or subscribers that are eligible to use that resource (when publishing or pulling messages respectively). Users with the admin role are able to modify Access lists for topics and subscriptions on the project they belong. In order for the feature to be available Messaging API should have the config parameter per_resource_auth set to true [GET] List ACL of a given topic Please refer to section Topics:List ACL of a given topic . [POST] Modify ACL of a given topic Please refer to section Topics:Modify ACL of a given topic . [GET] List ACL of a given subscription The following request returns a list of authorized users for a given subscription Request GET /v1/projects/{project_name}/subscriptions/{sub_name}:acl Where Project_name: Name of the project sub_name: name of the subscription Example request curl -X POST -H Content-Type: application/json -d { POSTDATA } https://{URL}/v1/projects/EGI/subscriptions/monitoring:acl?key=S3CR3T ` Responses Success Response 200 OK { authorized_users : [ UserA , UserB ] } Errors Please refer to section Errors to see all possible Errors [POST] Modify ACL of a given subscription The following request Modifies the authorized users list of a given subscription Request POST /v1/projects/{project_name}/subscriptions/{sub_name}:modifyAcl Where Project_name: Name of the project sub_name: name of the subpscription Post data { authorized_users : [ UserX , UserY ] } Example request curl -H Content-Type: application/json https://{URL}/v1/projects/EGI/subscriptions/monitoring:modifyAcl?key=S3CR3T ` Responses Success Response 200 OK Errors If the to-be updated ACL contains users that are non-existent in the project the API returns the following error: 404 NOT_FOUND { error : { code : 404, message : User(s): UserFoo1,UserFoo2 do not exist , status : NOT_FOUND } } Please refer to section Errors to see all possible Errors","title":"Authentication & Authorization"},{"location":"auth/#security-and-privacy-considerations","text":"Authentication is the process of determining the identity of a client, which is typically a user account. Authorization is the process of determining what permissions an authenticated identity has on a set of specified resources. In the Messaging API, there can be no authorization without authentication. This is an initial implementation of the user authentication and authorization. In the next versions of the ARGO Messaging service we are going to provide support for both bear and OpenID Connect tokens for the API access and it will be possible to apply ACLs at each (resource) subscriptions and topics.","title":"Security and privacy considerations"},{"location":"auth/#user-authentication","text":"Authentication requires the presence of a populated \u201cusers\u201d collection in the datastore in the adhering to the following schema: { name : john , email : john@doe.com , project : ARGO , token : S3CR3T , roles : [ admin , member ] } Parameter Description name username email User\u2019s email project Project that the user belongs to token Secret token for authentication roles List of roles that user has. Each role definition is used in authorization (explained later) Each user is authenticated by adding the url parameter ?key=T0K3N in each API request","title":"User Authentication"},{"location":"auth/#authorization","text":"Authorization requires the presence of a populated \u201croles\u201d collection in the datastore in the adhering to the following schema: { resource : resource_name:action , roles : [ admin , member ] } Parameter Description resource Holds the name of the resource and the action on that resource in the following format: resource_name:action roles A list of roles allowed on this resource:action Resource_name:action must be the same with the default routes supported in the api currently and those are: Action Description topics:list Allow user to list all topics in a project when using GET /projects/PROJECT_A/topics topics:show Allow user to get information on a specific topic when using GET /projects/PROJECT_A/topics/TOPIC_A topics:create Allow user to create a new topic when using PUT /projects/PROJECT_A/topics/TOPIC_NEW topics:delete Allow user to delete an existing topic when using DELETE /projects/PROJECT_A/topics/TOPIC_A topics:publish Allow user to publish messages in a topic when using POST /projects/PROJECT_A/topics/TOPIC_A:publish subscriptions:list Allow user to list all subscriptions in a project when using GET /projects/PROJECT_A/subscriptions subscriptions:show Allow user to get information on a specific subscription when using GET /projects/PROJECT_A/subscriptions/SUB_A subscriptions:create Allow user to create a new subscription when using PUT /projects/PROJECT_A/subscriptions/SUB_NEW subscriptions:delete Allow user to delete an existing subscription when using DELETE /projects/PROJECT_A/subscriptions/SUB_A subscriptions:pull Allow user to pull messages from a subscription when using POST /projects/PROJECT_A/subscriptions/SUB_A:pull subscriptions:acknowledge Allow user to acknowledge messages that has pulled when using POST /projects/PROJECT_A/subscriptions/SUB_A:acknowledge","title":"Authorization"},{"location":"auth/#per-resource-authorization","text":"Messaging API provides the option to control in finer detail access on resources such as topics and subscriptions for users(clients) that are producers or subscribers. Each resource (topic/subscription) comes with an access list (ACL) that contains producers or subscribers that are eligible to use that resource (when publishing or pulling messages respectively). Users with the admin role are able to modify Access lists for topics and subscriptions on the project they belong. In order for the feature to be available Messaging API should have the config parameter per_resource_auth set to true","title":"Per Resource Authorization"},{"location":"auth/#get-list-acl-of-a-given-topic","text":"Please refer to section Topics:List ACL of a given topic .","title":"[GET] List ACL of a given topic"},{"location":"auth/#post-modify-acl-of-a-given-topic","text":"Please refer to section Topics:Modify ACL of a given topic .","title":"[POST] Modify ACL of a given topic"},{"location":"auth/#get-list-acl-of-a-given-subscription","text":"The following request returns a list of authorized users for a given subscription","title":"[GET] List ACL of a given subscription"},{"location":"auth/#request","text":"GET /v1/projects/{project_name}/subscriptions/{sub_name}:acl","title":"Request"},{"location":"auth/#where","text":"Project_name: Name of the project sub_name: name of the subscription","title":"Where"},{"location":"auth/#example-request","text":"curl -X POST -H Content-Type: application/json -d { POSTDATA } https://{URL}/v1/projects/EGI/subscriptions/monitoring:acl?key=S3CR3T `","title":"Example request"},{"location":"auth/#responses","text":"Success Response 200 OK { authorized_users : [ UserA , UserB ] }","title":"Responses"},{"location":"auth/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"auth/#post-modify-acl-of-a-given-subscription","text":"The following request Modifies the authorized users list of a given subscription","title":"[POST] Modify ACL of a given subscription"},{"location":"auth/#request_1","text":"POST /v1/projects/{project_name}/subscriptions/{sub_name}:modifyAcl","title":"Request"},{"location":"auth/#where_1","text":"Project_name: Name of the project sub_name: name of the subpscription","title":"Where"},{"location":"auth/#post-data","text":"{ authorized_users : [ UserX , UserY ] }","title":"Post data"},{"location":"auth/#example-request_1","text":"curl -H Content-Type: application/json https://{URL}/v1/projects/EGI/subscriptions/monitoring:modifyAcl?key=S3CR3T `","title":"Example request"},{"location":"auth/#responses_1","text":"Success Response 200 OK","title":"Responses"},{"location":"auth/#errors_1","text":"If the to-be updated ACL contains users that are non-existent in the project the API returns the following error: 404 NOT_FOUND { error : { code : 404, message : User(s): UserFoo1,UserFoo2 do not exist , status : NOT_FOUND } } Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"msg_backend/","text":"Using Apache Kafka as a Backend Message system The ARGO Messaging API has been designed to rely on a generic Message Backend Interface and use specific implementation of that interface for supporting different systems. Right now the first implementation for the messaging backend relies on Apache Kafka as a distributed messaging system. A big advantage of the ARGO Messaging API is that provides a mechanism to easily support namespacing and different tenants on a Kafka Backend (Apache Kafka doesn\u2019t support natively namespacing yet). ARGO Messaging API uses the notion of \u2018projects\u2019 for each tenant and can support multiple projects each one containing multiple topics/subscriptions and users on the same Kafka backend.","title":"Messaging Backend - Apache Kafka"},{"location":"msg_backend/#using-apache-kafka-as-a-backend-message-system","text":"The ARGO Messaging API has been designed to rely on a generic Message Backend Interface and use specific implementation of that interface for supporting different systems. Right now the first implementation for the messaging backend relies on Apache Kafka as a distributed messaging system. A big advantage of the ARGO Messaging API is that provides a mechanism to easily support namespacing and different tenants on a Kafka Backend (Apache Kafka doesn\u2019t support natively namespacing yet). ARGO Messaging API uses the notion of \u2018projects\u2019 for each tenant and can support multiple projects each one containing multiple topics/subscriptions and users on the same Kafka backend.","title":"Using Apache Kafka as a Backend Message system"},{"location":"msg_flow/","text":"The Messaging API flow The main steps of the messaging API: A user creates a Topic Users that want to consume a message set up subscriptions. Each subscription is set on one Topic A Topic can have multiple Subscriptions Each subscription sets up a sync point in time. Messages that are published after that sync point can be pull by or push to the subscribers. Messages that have been published to the Topic that the Subscription was configured for before the creation of the Subscription, will not be delivered to the Subscribers. Each Topic has a TTL values for each messages published to it. Older messages are purged. Message deliveries can be out-of-order and might have duplicate messages. Each Subscriber should be idempotent A Subscription is configured either as in PULL or on PUSH mode. PUSH mode receives a client URI in order to POST messages there A Topic might have multiple subscriptions and each subscription has it\u2019s own tracked offset on the topic. Above: A single Topic holding multiple Subscriptions","title":"Messaging API flow"},{"location":"msg_flow/#the-messaging-api-flow","text":"The main steps of the messaging API: A user creates a Topic Users that want to consume a message set up subscriptions. Each subscription is set on one Topic A Topic can have multiple Subscriptions Each subscription sets up a sync point in time. Messages that are published after that sync point can be pull by or push to the subscribers. Messages that have been published to the Topic that the Subscription was configured for before the creation of the Subscription, will not be delivered to the Subscribers. Each Topic has a TTL values for each messages published to it. Older messages are purged. Message deliveries can be out-of-order and might have duplicate messages. Each Subscriber should be idempotent A Subscription is configured either as in PULL or on PUSH mode. PUSH mode receives a client URI in order to POST messages there A Topic might have multiple subscriptions and each subscription has it\u2019s own tracked offset on the topic. Above: A single Topic holding multiple Subscriptions","title":"The Messaging API flow"},{"location":"overview/","text":"Introduction The Messaging Services is implemented as a Publish/Subscribe Service. Instead of focusing on a single Messaging API specification for handling the logic of publishing/subscribing to the broker network the API focuses on creating nodes of Publishers and Subscribers as a Service. Terminology Term Description Project ARGO Messaging Service uses the notion of \u2018projects\u2019 for each tenant and can support multiple projects each one containing multiple topics/subscriptions and users on the same Kafka backend. topic A named resource to which messages are sent by publishers. A topic name must be scoped to a project. subscription A named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application. A subscription name must be scoped to a project. ackDeadlineSeconds Time window in seconds during which client can send an acknowledgement to notify the Service that a message has been successfully received ack Acknowledgement issued by the client that the message has been received pushConfig Contains information about the push endpoint pushEndpoint Webhook URL which will receive the messages Message The combination of data and (optional) attributes that a publisher sends to a topic and is eventually delivered to subscribers. Messages - messageId Id of the message - GENERATED by the api Messages - data Data payload ALWAYS encoded in Base64 Messages - attributes Dictionary with key/value metadata - OPTIONAL Messages - publishTime Timestamp when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API (UTC+2 at devel infrastructure) AMS ARGO Messaging Service maxMessages the max number of messages returned by one call by setting maxMessages field (when a client pull messages from a subscription). returnImmediately By default, the server will keep the connection open until at least one message is received; you can optionally set the returnImmediately field to true to prevent the subscriber from waiting if the queue is currently empty. (when a client pull messages from a subscription). The ARGO Messaging Service The ARGO Messaging Service is a Publish/Subscribe Service, which implements the Google PubSub protocol. It provides an HTTP API that enables Users/Systems to implement message oriented service using the Publish/Subscribe Model over plain HTTP. In the Publish/Subscribe paradigm, Publishers are users/systems that can send messages to named-channels called Topics. Subscribers are users/systems that create Subscriptions to specific topics and receive messages. Topics Topics are resources that can hold messages. Publishers (users/systems) can create topics on demand and name them (Usually with names that make sense and express the class of messages delivered in the topic) Subscriptions In order for a user to be able to consume messages, he must first create a subscription. Subscriptions are resources that can be created by users on demand and are attached to specific topics. Each topic can have multiple subscriptions but each subscription can be attached to just one topic. Subscriptions allows Subscribers to incrementally consume messages, at their own pace, while the progress is automatically tracked for each subscription. Pull vs Push Subscriptions Pub/Sub supports both push and pull message delivery. In push delivery, the Pub/Sub initiates requests to your subscriber application to deliver messages. In pull delivery, your subscription application initiates requests to the Pub/Sub server to retrieve messages. Pull subscriptions Pull subscriptions can be configured to require that message deliveries are acknowledged by the Subscribers. If an acknowledgement is made, subscription can resume progressing and send the next available messages. If no acknowledgement is made subscription pauses progressing and re-sends the same messages. In a pull subscription, the subscribing application explicitly calls the API pull method, which requests delivery of a message in the subscription queue. The Pub/Sub server responds with the message (or an error if the queue is empty), and an ack ID. The subscriber then explicitly calls the acknowledge method, using the returned ack ID, to acknowledge receipt. Push subscriptions In a push subscription, the Pub/Sub server sends a request to the subscriber application, at a preconfigured endpoint. The subscriber's HTTP response serves as an implicit acknowledgement: a success response indicates that the message has been successfully processed and the Pub/Sub system can delete it from the subscription; a non-success response indicates that the Pub/Sub server should resend it (implicit \"nack\"). To ensure that subscribers can handle the message flow, the Pub/Sub dynamically adjusts the flow of requests and uses an algorithm to rate-limit retries. In the current implementation of the AMS there is support only for pull subscriptions. Support for push subscriptions will be available in a later version. Messages In the ARGO Messaging Service each message has an identifier, data (payload) and metadata (optional). The metadata are stored in a attribute dictionary as key/value pairs. The message is represented in json format as follows: { messageId : 12 , data : YmFzZTY0 , attributes : [ { key : attribute1 , value : value1 }, { key : attribute2 , value : value2 } ], publishTime : 2016-03-15T17:11:34.035345612Z } Field Description messageId Id of the message - GENERATED by the ARGO Messaging Service. Judging from interaction with the service emulator locally and with the service itself online, yes the messages were identified with sequential numbers. data Data payload ALWAYS encoded in Base64 attributes Dictionary with key/value metadata - OPTIONAL publishTime Timestamp when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API Message acknowledgement deadline The ack deadline is the number of seconds after delivery, during which the subscriber must acknowledge the receipt of a pull or push message. If a subscriber does not respond with an explicit acknowledge (for a pull subscriber) or with a success response code (for a push subscriber) by this deadline, the server will attempt to resend the message. By default this deadline is 10 seconds. If a client tries to acknowledge a message while the Ack period has passed it will receive a 408 ERROR in the following format: { error : { code : 408, message : ack timeout , status : TIMEOUT } } The Ack deadline can be set-up to a higher number during subscription creation by assigning a value to ackDeadlineSeconds json field. More on subscription creation here","title":"Overview and Introduction"},{"location":"overview/#introduction","text":"The Messaging Services is implemented as a Publish/Subscribe Service. Instead of focusing on a single Messaging API specification for handling the logic of publishing/subscribing to the broker network the API focuses on creating nodes of Publishers and Subscribers as a Service.","title":"Introduction"},{"location":"overview/#terminology","text":"Term Description Project ARGO Messaging Service uses the notion of \u2018projects\u2019 for each tenant and can support multiple projects each one containing multiple topics/subscriptions and users on the same Kafka backend. topic A named resource to which messages are sent by publishers. A topic name must be scoped to a project. subscription A named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application. A subscription name must be scoped to a project. ackDeadlineSeconds Time window in seconds during which client can send an acknowledgement to notify the Service that a message has been successfully received ack Acknowledgement issued by the client that the message has been received pushConfig Contains information about the push endpoint pushEndpoint Webhook URL which will receive the messages Message The combination of data and (optional) attributes that a publisher sends to a topic and is eventually delivered to subscribers. Messages - messageId Id of the message - GENERATED by the api Messages - data Data payload ALWAYS encoded in Base64 Messages - attributes Dictionary with key/value metadata - OPTIONAL Messages - publishTime Timestamp when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API (UTC+2 at devel infrastructure) AMS ARGO Messaging Service maxMessages the max number of messages returned by one call by setting maxMessages field (when a client pull messages from a subscription). returnImmediately By default, the server will keep the connection open until at least one message is received; you can optionally set the returnImmediately field to true to prevent the subscriber from waiting if the queue is currently empty. (when a client pull messages from a subscription).","title":"Terminology"},{"location":"overview/#the-argo-messaging-service","text":"The ARGO Messaging Service is a Publish/Subscribe Service, which implements the Google PubSub protocol. It provides an HTTP API that enables Users/Systems to implement message oriented service using the Publish/Subscribe Model over plain HTTP. In the Publish/Subscribe paradigm, Publishers are users/systems that can send messages to named-channels called Topics. Subscribers are users/systems that create Subscriptions to specific topics and receive messages.","title":"The ARGO Messaging Service"},{"location":"overview/#topics","text":"Topics are resources that can hold messages. Publishers (users/systems) can create topics on demand and name them (Usually with names that make sense and express the class of messages delivered in the topic)","title":"Topics"},{"location":"overview/#subscriptions","text":"In order for a user to be able to consume messages, he must first create a subscription. Subscriptions are resources that can be created by users on demand and are attached to specific topics. Each topic can have multiple subscriptions but each subscription can be attached to just one topic. Subscriptions allows Subscribers to incrementally consume messages, at their own pace, while the progress is automatically tracked for each subscription.","title":"Subscriptions"},{"location":"overview/#pull-vs-push-subscriptions","text":"Pub/Sub supports both push and pull message delivery. In push delivery, the Pub/Sub initiates requests to your subscriber application to deliver messages. In pull delivery, your subscription application initiates requests to the Pub/Sub server to retrieve messages.","title":"Pull vs Push Subscriptions"},{"location":"overview/#pull-subscriptions","text":"Pull subscriptions can be configured to require that message deliveries are acknowledged by the Subscribers. If an acknowledgement is made, subscription can resume progressing and send the next available messages. If no acknowledgement is made subscription pauses progressing and re-sends the same messages. In a pull subscription, the subscribing application explicitly calls the API pull method, which requests delivery of a message in the subscription queue. The Pub/Sub server responds with the message (or an error if the queue is empty), and an ack ID. The subscriber then explicitly calls the acknowledge method, using the returned ack ID, to acknowledge receipt.","title":"Pull subscriptions"},{"location":"overview/#push-subscriptions","text":"In a push subscription, the Pub/Sub server sends a request to the subscriber application, at a preconfigured endpoint. The subscriber's HTTP response serves as an implicit acknowledgement: a success response indicates that the message has been successfully processed and the Pub/Sub system can delete it from the subscription; a non-success response indicates that the Pub/Sub server should resend it (implicit \"nack\"). To ensure that subscribers can handle the message flow, the Pub/Sub dynamically adjusts the flow of requests and uses an algorithm to rate-limit retries. In the current implementation of the AMS there is support only for pull subscriptions. Support for push subscriptions will be available in a later version.","title":"Push subscriptions"},{"location":"overview/#messages","text":"In the ARGO Messaging Service each message has an identifier, data (payload) and metadata (optional). The metadata are stored in a attribute dictionary as key/value pairs. The message is represented in json format as follows: { messageId : 12 , data : YmFzZTY0 , attributes : [ { key : attribute1 , value : value1 }, { key : attribute2 , value : value2 } ], publishTime : 2016-03-15T17:11:34.035345612Z } Field Description messageId Id of the message - GENERATED by the ARGO Messaging Service. Judging from interaction with the service emulator locally and with the service itself online, yes the messages were identified with sequential numbers. data Data payload ALWAYS encoded in Base64 attributes Dictionary with key/value metadata - OPTIONAL publishTime Timestamp when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API","title":"Messages"},{"location":"overview/#message-acknowledgement-deadline","text":"The ack deadline is the number of seconds after delivery, during which the subscriber must acknowledge the receipt of a pull or push message. If a subscriber does not respond with an explicit acknowledge (for a pull subscriber) or with a success response code (for a push subscriber) by this deadline, the server will attempt to resend the message. By default this deadline is 10 seconds. If a client tries to acknowledge a message while the Ack period has passed it will receive a 408 ERROR in the following format: { error : { code : 408, message : ack timeout , status : TIMEOUT } } The Ack deadline can be set-up to a higher number during subscription creation by assigning a value to ackDeadlineSeconds json field. More on subscription creation here","title":"Message acknowledgement deadline"},{"location":"projects_users/","text":"Initial Project and user management This document describes some of the more advanced setup you may need to do while configuring and deploying the ARGO Messaging Service. A typical quick-start scenario After a fresh install of the ARGO Messaging Service, the steps you need to follow are: Configure service_token : to enable the service. Create a service_admin user: to start managing the service. Create a project: Project entities is used as a basis of organizing and isolating groups of users resources Create a project_admin user: Users that have the project_admin have, by default, all capabilities in their project. They can also manage resources such as topics and subscriptions (CRUD) and also manage ACLs (users) on those resources as well. Create a topic: The main resource that is scoped in a project, and can hold messages. Create a subscription: A subscription is the main resource from which users consume messages. Create users for the new resources: Usually a project has publisher and consumer accounts for clients that either are authorized to publish or consume messages. Configure service_token ARGO Messaging Service configuration includes the service_token parameter. This service_token configuration parameter can be used to create the first service_admin user of the service First a service token must be defined in the config.json as such: { bind_ip : , port :8080, zookeeper_hosts :[ localhost ], kafka_znode : , store_host : localhost , store_db : argo_msg , certificate : /etc/pki/tls/certs/localhost.crt , certificate_key : /etc/pki/tls/private/localhost.key , per_resource_auth : true , service_token : S3CR3T , push_enabled : false } The service token in this example has the value: S3CR3T This service_token is authorized for all available actions (projects,users,topics,subscriptions). In order to enable the use of this service_token you must restart the service. service argo-messaging restart Create a service_admin user The service_token is intended to be used for the first initialization of the API. The first thing the service needs is a user with all possible capabilities, which is a service_admin . Now even though no user has been initialized in the service, the administrator can use the ARGO Messaging API Call with service_token S3CR3T to create the user. The service_admin will be able to further define projects and other users. Using the service_token an admin can create a new service_admin user with the username demo_service_admin by calling: POST https://{URL}/v1/users/demo_service_admin?key=S3CR3T with the following POST BODY: { email : sadmin@mail.example.foo , service_roles :[ service_admin ] } It is important to mention that the user has the \"service_admin\" role defined in the service_roles list in order to be a service_admin. The response: { projects : [], name : demo_service_admin , token : 904c56cc6e2b1955dbd98ace80a45be8238432fc , email : sadmin@mail.example.foo , service_roles : [ service_admin ], created_on : 2016-10-13T11:19:07Z , modified_on : 2016-10-13T11:19:07Z } The generated token 904c56cc6e2b1955dbd98ace80a45be8238432fc can be used to authenticate the new user. For more details visit the API Users to see all possible actions for users. Create a project Using the demo_service_admin account, the user can create the first project (ex named 'DEMO') by issuing: POST https://{URL}/v1/projects/DEMO?key=904c56cc6e2b1955dbd98ace80a45be8238432fc with the following POST BODY: { description : my first demo project } and the response: { name : DEMO , created_on : 2016-10-13T12:19:07Z , modified_on : 2016-10-13T12:19:07Z , created_by : demo_service_admin , description : my first demo project } Response informs that the project has been indeed created_by the demo_service_admin user. For more details visit the API Projects to see all possible actions for projects. Create a project_admin Service_admin users are not attached to specific projects. Instead each project should have a project_admin user that will manage topics, subscriptions and ACLs on those resources. To create a project_admin user in project DEMO , the user demo_service_admin will issue: POST https://{URL}/v1/users/admin_DEMO?key=904c56cc6e2b1955dbd98ace80a45be8238432fc with the following POST BODY: { email : demoadmin@mail.example.foo , projects :[{ project : DEMO , roles :[ project_admin ]}] } The user definition (in POST body) should have the field projects defined. The field accepts a list of tuple items (project,roles) which describe each project that the user participates to and under which roles. A user can have multiple roles in a project and also participate in multiple projects as well. In this example, the user must participate in project DEMO and under the role of project_admin . The response: { projects : [ { project : DEMO , roles : [ project_admin ] } ], name : admin_DEMO , token : 6311196665befcc1523b8e013979347b8780254c , email : demoadmin@mail.example.foo , service_roles : [], created_on : 2016-10-13T12:29:07Z , modified_on : 2016-10-13T12:29:07Z , created_by : demo_service_admin } For more details visit the API Users to see all possible actions for users. Create a topic Service_admin users don't manage resources such as topics/subscriptions. Instead in each project the project_admin is eligible for creating (and managing) topics and subscriptions. To create a new topic (named topic101 ) as admin_DEMO user in project DEMO the user issues: PUT https://{URL}/v1/projects/DEMO/topics/topic101?key=6311196665befcc1523b8e013979347b8780254c with response: { name : /projects/DEMO/topics/topic101 } Notice that the token used in api key changes to that of the admin_DEMO user For more details visit the API Topics to see all possible actions for topics. Create a subscription To create a new subscription (named sub101 ) to topic topic101 of project DEMO the admin_DEMO user issues: PUT https://{URL}/v1/projects/DEMO/subscriptions/subs101?key=6311196665befcc1523b8e013979347b8780254c with POST Body: { topic : projects/DEMO/topic/topic101 } and response: { name : /projects/DEMO/subscriptions/sub101 , topic : /projects/DEMO/topics/topic101 , pushConfig : { pushEndpoint : , retryPolicy : {} }, ackDeadlineSeconds : 10 } For more details visit the API Subscriptions to see all possible actions for Subscriptions. Create users for the new resources Usually a project will have also publisher and consumer accounts for clients that either are authorized to publish or consume messages. The user demo_service_admin can create a publisher_DEMO and consumer_DEMO for project DEMO as such: To create the publisher_DEMO user: POST https://{URL}/v1/users/publisher_DEMO?key=904c56cc6e2b1955dbd98ace80a45be8238432fc with POST Body: { email : demopublisher@mail.example.foo , projects :[{ project : DEMO , roles :[ publisher ]}] } resulting in response: { projects : [ { project : DEMO , roles : [ publisher ] } ], name : publisher_DEMO , token : 915dff62846dd1d790b4296c034c184fa3a859b6 , email : demopublisher@mail.example.foo , service_roles : [], created_on : 2016-10-13T12:39:07Z , modified_on : 2016-10-13T12:39:07Z , created_by : demo_service_admin } To create the consumer_DEMO user: POST https://{URL}/v1/users/consumer_DEMO?key=904c56cc6e2b1955dbd98ace80a45be8238432fc with POST Body: { email : democonsumer@mail.example.foo , projects :[{ project : DEMO , roles :[ consumer ]}] } resulting in response: { projects : [ { project : DEMO , roles : [ consumer ] } ], name : consumer_DEMO , token : dba38fd1a45337a617a59e7278c756f23642e9e7 , email : democonsumer@mail.example.foo , service_roles : [], created_on : 2016-10-13T12:40:07Z , modified_on : 2016-10-13T12:40:07Z , created_by : demo_service_admin } For more details visit the API Users to see all possible actions for users. Modify topic ACL to give access to publisher In order to give access to user publisher_DEMO to topic topic101 , the user admin_DEMO must modify the topic's ACL as such: POST https://{URL}/v1/projects/DEMO/topics/topic101:modifyAcl?key=6311196665befcc1523b8e013979347b8780254c with POST body: { authorized_users :[ publisher_DEMO ] } and empty response with 200 OK Now the user publisher_DEMO will be authorized to call action topic:publish on topic101 and send messages Modify subscription ACL to give access to consumer In order to give access to user consumer_DEMO to subscription sub101 , the user admin_DEMO must modify the subscription's ACL as such: POST https://{URL}/v1/projects/DEMO/subscriptions/sub101:modifyAcl?key=6311196665befcc1523b8e013979347b8780254c with POST body: { authorized_users :[ consumer_DEMO ] } and empty response with 200 OK Now the user consumer_DEMO will be authorized to call action subscription:pull on sub101 and consume messages","title":"Project & User management guide"},{"location":"projects_users/#initial-project-and-user-management","text":"This document describes some of the more advanced setup you may need to do while configuring and deploying the ARGO Messaging Service.","title":"Initial Project and user management"},{"location":"projects_users/#a-typical-quick-start-scenario","text":"After a fresh install of the ARGO Messaging Service, the steps you need to follow are: Configure service_token : to enable the service. Create a service_admin user: to start managing the service. Create a project: Project entities is used as a basis of organizing and isolating groups of users resources Create a project_admin user: Users that have the project_admin have, by default, all capabilities in their project. They can also manage resources such as topics and subscriptions (CRUD) and also manage ACLs (users) on those resources as well. Create a topic: The main resource that is scoped in a project, and can hold messages. Create a subscription: A subscription is the main resource from which users consume messages. Create users for the new resources: Usually a project has publisher and consumer accounts for clients that either are authorized to publish or consume messages.","title":"A typical quick-start scenario"},{"location":"projects_users/#configure-service_token","text":"ARGO Messaging Service configuration includes the service_token parameter. This service_token configuration parameter can be used to create the first service_admin user of the service First a service token must be defined in the config.json as such: { bind_ip : , port :8080, zookeeper_hosts :[ localhost ], kafka_znode : , store_host : localhost , store_db : argo_msg , certificate : /etc/pki/tls/certs/localhost.crt , certificate_key : /etc/pki/tls/private/localhost.key , per_resource_auth : true , service_token : S3CR3T , push_enabled : false } The service token in this example has the value: S3CR3T This service_token is authorized for all available actions (projects,users,topics,subscriptions). In order to enable the use of this service_token you must restart the service. service argo-messaging restart","title":"Configure service_token"},{"location":"projects_users/#create-a-service_admin-user","text":"The service_token is intended to be used for the first initialization of the API. The first thing the service needs is a user with all possible capabilities, which is a service_admin . Now even though no user has been initialized in the service, the administrator can use the ARGO Messaging API Call with service_token S3CR3T to create the user. The service_admin will be able to further define projects and other users. Using the service_token an admin can create a new service_admin user with the username demo_service_admin by calling: POST https://{URL}/v1/users/demo_service_admin?key=S3CR3T with the following POST BODY: { email : sadmin@mail.example.foo , service_roles :[ service_admin ] } It is important to mention that the user has the \"service_admin\" role defined in the service_roles list in order to be a service_admin. The response: { projects : [], name : demo_service_admin , token : 904c56cc6e2b1955dbd98ace80a45be8238432fc , email : sadmin@mail.example.foo , service_roles : [ service_admin ], created_on : 2016-10-13T11:19:07Z , modified_on : 2016-10-13T11:19:07Z } The generated token 904c56cc6e2b1955dbd98ace80a45be8238432fc can be used to authenticate the new user. For more details visit the API Users to see all possible actions for users.","title":"Create a service_admin user"},{"location":"projects_users/#create-a-project","text":"Using the demo_service_admin account, the user can create the first project (ex named 'DEMO') by issuing: POST https://{URL}/v1/projects/DEMO?key=904c56cc6e2b1955dbd98ace80a45be8238432fc with the following POST BODY: { description : my first demo project } and the response: { name : DEMO , created_on : 2016-10-13T12:19:07Z , modified_on : 2016-10-13T12:19:07Z , created_by : demo_service_admin , description : my first demo project } Response informs that the project has been indeed created_by the demo_service_admin user. For more details visit the API Projects to see all possible actions for projects.","title":"Create a project"},{"location":"projects_users/#create-a-project_admin","text":"Service_admin users are not attached to specific projects. Instead each project should have a project_admin user that will manage topics, subscriptions and ACLs on those resources. To create a project_admin user in project DEMO , the user demo_service_admin will issue: POST https://{URL}/v1/users/admin_DEMO?key=904c56cc6e2b1955dbd98ace80a45be8238432fc with the following POST BODY: { email : demoadmin@mail.example.foo , projects :[{ project : DEMO , roles :[ project_admin ]}] } The user definition (in POST body) should have the field projects defined. The field accepts a list of tuple items (project,roles) which describe each project that the user participates to and under which roles. A user can have multiple roles in a project and also participate in multiple projects as well. In this example, the user must participate in project DEMO and under the role of project_admin . The response: { projects : [ { project : DEMO , roles : [ project_admin ] } ], name : admin_DEMO , token : 6311196665befcc1523b8e013979347b8780254c , email : demoadmin@mail.example.foo , service_roles : [], created_on : 2016-10-13T12:29:07Z , modified_on : 2016-10-13T12:29:07Z , created_by : demo_service_admin } For more details visit the API Users to see all possible actions for users.","title":"Create a project_admin"},{"location":"projects_users/#create-a-topic","text":"Service_admin users don't manage resources such as topics/subscriptions. Instead in each project the project_admin is eligible for creating (and managing) topics and subscriptions. To create a new topic (named topic101 ) as admin_DEMO user in project DEMO the user issues: PUT https://{URL}/v1/projects/DEMO/topics/topic101?key=6311196665befcc1523b8e013979347b8780254c with response: { name : /projects/DEMO/topics/topic101 } Notice that the token used in api key changes to that of the admin_DEMO user For more details visit the API Topics to see all possible actions for topics.","title":"Create a topic"},{"location":"projects_users/#create-a-subscription","text":"To create a new subscription (named sub101 ) to topic topic101 of project DEMO the admin_DEMO user issues: PUT https://{URL}/v1/projects/DEMO/subscriptions/subs101?key=6311196665befcc1523b8e013979347b8780254c with POST Body: { topic : projects/DEMO/topic/topic101 } and response: { name : /projects/DEMO/subscriptions/sub101 , topic : /projects/DEMO/topics/topic101 , pushConfig : { pushEndpoint : , retryPolicy : {} }, ackDeadlineSeconds : 10 } For more details visit the API Subscriptions to see all possible actions for Subscriptions.","title":"Create a subscription"},{"location":"projects_users/#create-users-for-the-new-resources","text":"Usually a project will have also publisher and consumer accounts for clients that either are authorized to publish or consume messages. The user demo_service_admin can create a publisher_DEMO and consumer_DEMO for project DEMO as such: To create the publisher_DEMO user: POST https://{URL}/v1/users/publisher_DEMO?key=904c56cc6e2b1955dbd98ace80a45be8238432fc with POST Body: { email : demopublisher@mail.example.foo , projects :[{ project : DEMO , roles :[ publisher ]}] } resulting in response: { projects : [ { project : DEMO , roles : [ publisher ] } ], name : publisher_DEMO , token : 915dff62846dd1d790b4296c034c184fa3a859b6 , email : demopublisher@mail.example.foo , service_roles : [], created_on : 2016-10-13T12:39:07Z , modified_on : 2016-10-13T12:39:07Z , created_by : demo_service_admin } To create the consumer_DEMO user: POST https://{URL}/v1/users/consumer_DEMO?key=904c56cc6e2b1955dbd98ace80a45be8238432fc with POST Body: { email : democonsumer@mail.example.foo , projects :[{ project : DEMO , roles :[ consumer ]}] } resulting in response: { projects : [ { project : DEMO , roles : [ consumer ] } ], name : consumer_DEMO , token : dba38fd1a45337a617a59e7278c756f23642e9e7 , email : democonsumer@mail.example.foo , service_roles : [], created_on : 2016-10-13T12:40:07Z , modified_on : 2016-10-13T12:40:07Z , created_by : demo_service_admin } For more details visit the API Users to see all possible actions for users.","title":"Create users for the new resources"},{"location":"projects_users/#modify-topic-acl-to-give-access-to-publisher","text":"In order to give access to user publisher_DEMO to topic topic101 , the user admin_DEMO must modify the topic's ACL as such: POST https://{URL}/v1/projects/DEMO/topics/topic101:modifyAcl?key=6311196665befcc1523b8e013979347b8780254c with POST body: { authorized_users :[ publisher_DEMO ] } and empty response with 200 OK Now the user publisher_DEMO will be authorized to call action topic:publish on topic101 and send messages","title":"Modify topic ACL to give access to publisher"},{"location":"projects_users/#modify-subscription-acl-to-give-access-to-consumer","text":"In order to give access to user consumer_DEMO to subscription sub101 , the user admin_DEMO must modify the subscription's ACL as such: POST https://{URL}/v1/projects/DEMO/subscriptions/sub101:modifyAcl?key=6311196665befcc1523b8e013979347b8780254c with POST body: { authorized_users :[ consumer_DEMO ] } and empty response with 200 OK Now the user consumer_DEMO will be authorized to call action subscription:pull on sub101 and consume messages","title":"Modify subscription ACL to give access to consumer"},{"location":"publisher/","text":"Publisher Guide Publishers can send messages to named-channels called Topics. Before you start In order to get an account on the ARGO Messaging Service, submit a request through the ARGO Messaging Service account form Upon account approval, you will receive information via e-mail about your new project along with an API token. Start publishing When everything is set up you can start by following the general flow for a publisher: Step 1: Create a topic For more details visit section Topics: Create a topic Step 2: Create a subscription A Topic without at least one Subscription act like black holes. Publishers can send messages to those topics, but the messages will not be retrievable. In order to be able to publish and consume messages, at least one Subscription must created to the Topic that you are publishing messages to. By default, a Subscription is created in pull mode, meaning that consumers can query the Messaging API and retrieve the messages that are published to the Topic that the Subscription is configured for. More information about how create a Subscription, visit section Subscriptions: Create a subscription Step 3: Start publishing messages The ARGO Messaging Service accepts JSON over HTTP. In order to publish messages you have to represent them using the following schema: { $schema : http://json-schema.org/draft-04/schema# , type : object , properties : { messages : { type : array , items : { type : object , anyOf : [{ properties : { data : { type : string , contentEncoding : base64 , minLength : 1 }, }, required : [ data ] },{ properties : { attributes : { type : object , minProperties : 1, properties : {} } }, required : [ attributes ] }] } } }, required : [ messages ] } The JSON body send to the ARGO Messaging Service may contain one or more messages. Each message can have: attributes: optional key value pair of metadata you desire data: the data of the message. The data must be base64-encoded, and can not exceed 10MB after encoding. Note that the message payload must not be empty; it must contain either a non-empty data field, or at least one attribute. Below you can find an example, in which a user publishes two messages in one call: { messages : [ { attributes : { station : NW32ZC , status : PROD }, data : U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ }, { attributes : { station : GHJ32 , status : TEST }, data : U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ } ] } You can publish and consume any kind of data through the ARGO Messaging Service (as long as the base64 encoded payload is not larger than the maximum acceptable size). For more details visit section Topics: Publish message/s to a topic","title":"Publisher Guide"},{"location":"publisher/#publisher-guide","text":"Publishers can send messages to named-channels called Topics.","title":"Publisher Guide"},{"location":"publisher/#before-you-start","text":"In order to get an account on the ARGO Messaging Service, submit a request through the ARGO Messaging Service account form Upon account approval, you will receive information via e-mail about your new project along with an API token.","title":"Before you start"},{"location":"publisher/#start-publishing","text":"When everything is set up you can start by following the general flow for a publisher: Step 1: Create a topic For more details visit section Topics: Create a topic Step 2: Create a subscription A Topic without at least one Subscription act like black holes. Publishers can send messages to those topics, but the messages will not be retrievable. In order to be able to publish and consume messages, at least one Subscription must created to the Topic that you are publishing messages to. By default, a Subscription is created in pull mode, meaning that consumers can query the Messaging API and retrieve the messages that are published to the Topic that the Subscription is configured for. More information about how create a Subscription, visit section Subscriptions: Create a subscription Step 3: Start publishing messages The ARGO Messaging Service accepts JSON over HTTP. In order to publish messages you have to represent them using the following schema: { $schema : http://json-schema.org/draft-04/schema# , type : object , properties : { messages : { type : array , items : { type : object , anyOf : [{ properties : { data : { type : string , contentEncoding : base64 , minLength : 1 }, }, required : [ data ] },{ properties : { attributes : { type : object , minProperties : 1, properties : {} } }, required : [ attributes ] }] } } }, required : [ messages ] } The JSON body send to the ARGO Messaging Service may contain one or more messages. Each message can have: attributes: optional key value pair of metadata you desire data: the data of the message. The data must be base64-encoded, and can not exceed 10MB after encoding. Note that the message payload must not be empty; it must contain either a non-empty data field, or at least one attribute. Below you can find an example, in which a user publishes two messages in one call: { messages : [ { attributes : { station : NW32ZC , status : PROD }, data : U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ }, { attributes : { station : GHJ32 , status : TEST }, data : U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ } ] } You can publish and consume any kind of data through the ARGO Messaging Service (as long as the base64 encoded payload is not larger than the maximum acceptable size). For more details visit section Topics: Publish message/s to a topic","title":"Start publishing"},{"location":"qa_general_questions/","text":"Q A :: General Questions Questions and answers based on problems encountered during implementation. When I pull down messages, they have an publishTime associated with them. What time zone is this field in? The publishTime is the Timestamp associated with the message when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API (UTC+2 at devel infrastructure) if there aren\u2019t enough messages to supply the requested max_messages number, the request eventually returns however many messages are present. Is there a way to configure this timeout, in the post body for example? The current timeout is set to 5mins. But the user - client cannot change it. You can optionally set the returnImmediately field to true to prevent the subscriber from waiting if the queue is currently empty.","title":"General"},{"location":"qa_general_questions/#qa-general-questions","text":"Questions and answers based on problems encountered during implementation.","title":"Q&amp;A :: General Questions"},{"location":"qa_general_questions/#when-i-pull-down-messages-they-have-an-publishtime-associated-with-them-what-time-zone-is-this-field-in","text":"The publishTime is the Timestamp associated with the message when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API (UTC+2 at devel infrastructure)","title":"When I pull down messages, they have an publishTime associated with them. What time zone is this field in?"},{"location":"qa_general_questions/#if-there-arent-enough-messages-to-supply-the-requested-max_messages-number-the-request-eventually-returns-however-many-messages-are-present-is-there-a-way-to-configure-this-timeout-in-the-post-body-for-example","text":"The current timeout is set to 5mins. But the user - client cannot change it. You can optionally set the returnImmediately field to true to prevent the subscriber from waiting if the queue is currently empty.","title":"if there aren\u2019t enough messages to supply the requested max_messages number, the request eventually returns however many messages are present. Is there a way to configure this timeout, in the post body for example?"},{"location":"qa_ruby/","text":"Q A :: Ruby Questions and answers based on problems encountered during implementation. Base64 encoded string in Ruby The inbuilt Base64 library in Ruby is adding some '\\n's. We advice you to use Base64.strict_encode64() , which does not add newlines. The Ruby docs are somewhat confusing, the b64encode method is supposed to add a newline for every 60th character, and the example for the encode64 method is actually using the b64encode method. It seems the pack(\"m\") method for the Array class used by encode64 also adds the newlines. I would consider it a design bug that this is not optional. You could either remove the newlines yourself, or if you're using rails, there's ActiveSupport::CoreExtensions::Base64::Encoding with the encode64s method. Solution at Stackoverflow","title":"Ruby"},{"location":"qa_ruby/#qa-ruby","text":"Questions and answers based on problems encountered during implementation.","title":"Q&amp;A :: Ruby"},{"location":"qa_ruby/#base64-encoded-string-in-ruby","text":"The inbuilt Base64 library in Ruby is adding some '\\n's. We advice you to use Base64.strict_encode64() , which does not add newlines. The Ruby docs are somewhat confusing, the b64encode method is supposed to add a newline for every 60th character, and the example for the encode64 method is actually using the b64encode method. It seems the pack(\"m\") method for the Array class used by encode64 also adds the newlines. I would consider it a design bug that this is not optional. You could either remove the newlines yourself, or if you're using rails, there's ActiveSupport::CoreExtensions::Base64::Encoding with the encode64s method. Solution at Stackoverflow","title":"Base64 encoded string in Ruby"},{"location":"security/","text":"Security in Argo Messaging service Authentication Authentication in the AMS takes place using an url key provided with each API request. The large majority of api calls support the url parameter , key . E.g. /v1/projects?key=b328c7890f061f87cbd4rff34f36fa2ae20993a5 Each request will extract the key from the request parameters and will try to find a user associated with it in the respective data store. The key can also be refreshed when needed with the /users/{user}:refreshToken api call. API keys are expected to be used by external service's clients. X509 Authentication Although AMS doesn't support direct authentication through an x509 certificate, you can use the argo-authentication-service to map an x509 certificate to an AMS key . The service will also validate the certificate. The ams-library will effortlessly hide this complexity if you decide to use it in order to access AMS. Authorization After the authentication part takes place, the user will be also assigned its privileges/roles in order for the service to determine, if the user is allowed to access - the requested resource. - perform a certain action. The Argo Messaging Service supports the following core roles: service_admin - which is targeted to users that have an administrative duty over the service. Service admin is a service wide role. project_admin - which is targeted towards users that manage the resources/actions under a specific ams project.Project admins can only access the project(s) they belong to. Project admin is a per project role not a service wide role. publisher - which is targeted towards users that primarily publish messages to topics. Publishers are able to access topic(s) under the project(s) they belong to. Publisher is a per project role not a service wide role. consuner - which is targeted towards users that primarily consume messages from subscriptions. Consumers are able to access subscriptions(s) under the project(s) they belong to. Consumer is a per project role not a service wide role. E.g. userA can be a - project_admin under projectA , - publihser under projectB - publisher consumer under projectC . Each API route gets assigned which roles it should accept, /v1/projects is only accessible by service_admin , /v1/topics/{topic}:publish is accessible by service_admin , project_admin and publisher . ## ACL Based access All publishers cannot access all topics under their project. Same for consumers, they cannot access all subscriptions under their project. Both Topics and Subscriptions have ACLs which determine which of the project's publishers and consumers respectively, can access them. ACLs for topics and subscriptions contain user names . Push Enabled Subscriptions Verifying Ownership of Push Subscriptions Endpoints Whenever a subscription is created with a valid push configuration, the service will also generate a unique hash that should be later used to validate the ownership of the registered push endpoint, and will mark the subscription as unverified.This procedure is mandatory in order to avoid spam requests to endpoints that don't belong to the right user. The owner of the push endpoint needs to execute the following steps in order to verify the ownership of the registered endpoint. Expose an api call with a path of /ams_verification_hash . The service will try to access this path using the host:port of the push endpoint. For example, if the push endpoint is https://example.com:8443/receive_here , the push endpoint should also support the api route of https://example.com:8443/ams_verification_hash . The api route of https://example.com:8443/ams_verification_hash should support the http GET method. A GET request to https://example.com:8443/ams_verification_hash should return a response body with only the verification_hash that is found inside the subscriptions push configuration, a status code of 200 and the header Content-type: plain/text . Securing remote push endpoints If you want to secure your remote endpoint, you can have the service generate a unique authorization hash for the subscription, which means that all push messages will contain the generated token inside the Authorization header. As a result the remote endpoint can authenticate incoming push messages. AMS - Push Server Connectivity AMS doesn't handle the actual pushing of messages for push enabled subscriptions ,only the configuration part of them. The ams-push-server component is responsible for delivering push messages to remote endpoints. AMS and Push server communicate with each other using mutual TLS for authentication, while the push server also implements an authorization strategy of accepting requests only from certificates that have specific Common Name(s) .","title":"Security in Argo Messaging service"},{"location":"security/#security-in-argo-messaging-service","text":"","title":"Security in Argo Messaging service"},{"location":"security/#authentication","text":"Authentication in the AMS takes place using an url key provided with each API request. The large majority of api calls support the url parameter , key . E.g. /v1/projects?key=b328c7890f061f87cbd4rff34f36fa2ae20993a5 Each request will extract the key from the request parameters and will try to find a user associated with it in the respective data store. The key can also be refreshed when needed with the /users/{user}:refreshToken api call. API keys are expected to be used by external service's clients.","title":"Authentication"},{"location":"security/#x509-authentication","text":"Although AMS doesn't support direct authentication through an x509 certificate, you can use the argo-authentication-service to map an x509 certificate to an AMS key . The service will also validate the certificate. The ams-library will effortlessly hide this complexity if you decide to use it in order to access AMS.","title":"X509 Authentication"},{"location":"security/#authorization","text":"After the authentication part takes place, the user will be also assigned its privileges/roles in order for the service to determine, if the user is allowed to access - the requested resource. - perform a certain action. The Argo Messaging Service supports the following core roles: service_admin - which is targeted to users that have an administrative duty over the service. Service admin is a service wide role. project_admin - which is targeted towards users that manage the resources/actions under a specific ams project.Project admins can only access the project(s) they belong to. Project admin is a per project role not a service wide role. publisher - which is targeted towards users that primarily publish messages to topics. Publishers are able to access topic(s) under the project(s) they belong to. Publisher is a per project role not a service wide role. consuner - which is targeted towards users that primarily consume messages from subscriptions. Consumers are able to access subscriptions(s) under the project(s) they belong to. Consumer is a per project role not a service wide role. E.g. userA can be a - project_admin under projectA , - publihser under projectB - publisher consumer under projectC . Each API route gets assigned which roles it should accept, /v1/projects is only accessible by service_admin , /v1/topics/{topic}:publish is accessible by service_admin , project_admin and publisher . ## ACL Based access All publishers cannot access all topics under their project. Same for consumers, they cannot access all subscriptions under their project. Both Topics and Subscriptions have ACLs which determine which of the project's publishers and consumers respectively, can access them. ACLs for topics and subscriptions contain user names .","title":"Authorization"},{"location":"security/#push-enabled-subscriptions","text":"","title":"Push Enabled Subscriptions"},{"location":"security/#verifying-ownership-of-push-subscriptions-endpoints","text":"Whenever a subscription is created with a valid push configuration, the service will also generate a unique hash that should be later used to validate the ownership of the registered push endpoint, and will mark the subscription as unverified.This procedure is mandatory in order to avoid spam requests to endpoints that don't belong to the right user. The owner of the push endpoint needs to execute the following steps in order to verify the ownership of the registered endpoint. Expose an api call with a path of /ams_verification_hash . The service will try to access this path using the host:port of the push endpoint. For example, if the push endpoint is https://example.com:8443/receive_here , the push endpoint should also support the api route of https://example.com:8443/ams_verification_hash . The api route of https://example.com:8443/ams_verification_hash should support the http GET method. A GET request to https://example.com:8443/ams_verification_hash should return a response body with only the verification_hash that is found inside the subscriptions push configuration, a status code of 200 and the header Content-type: plain/text .","title":"Verifying Ownership of Push Subscriptions Endpoints"},{"location":"security/#securing-remote-push-endpoints","text":"If you want to secure your remote endpoint, you can have the service generate a unique authorization hash for the subscription, which means that all push messages will contain the generated token inside the Authorization header. As a result the remote endpoint can authenticate incoming push messages.","title":"Securing remote push endpoints"},{"location":"security/#ams-push-server-connectivity","text":"AMS doesn't handle the actual pushing of messages for push enabled subscriptions ,only the configuration part of them. The ams-push-server component is responsible for delivering push messages to remote endpoints. AMS and Push server communicate with each other using mutual TLS for authentication, while the push server also implements an authorization strategy of accepting requests only from certificates that have specific Common Name(s) .","title":"AMS - Push Server Connectivity"}]}