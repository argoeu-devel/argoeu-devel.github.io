{
    "docs": [
        {
            "location": "/", 
            "text": "ARGO Messaging Service Documentation\n\n\n\n\nOverview and Introduction\n\n\nMessaging Backend: Apache Kafka\n\n\nMessaging API flow\n\n\nAuthentication \n Authorization\n\n\n\n\nArgo Messaging API\n\n\n\n\nBasic Information\n\n\nAPI Error Messages\n\n\n\n\nAPI Calls\n\n\n\n\nAuthentication\n\n\nTopics\n\n\nSubscriptions", 
            "title": "Home"
        }, 
        {
            "location": "/#argo-messaging-service-documentation", 
            "text": "Overview and Introduction  Messaging Backend: Apache Kafka  Messaging API flow  Authentication   Authorization", 
            "title": "ARGO Messaging Service Documentation"
        }, 
        {
            "location": "/#argo-messaging-api", 
            "text": "Basic Information  API Error Messages", 
            "title": "Argo Messaging API"
        }, 
        {
            "location": "/#api-calls", 
            "text": "Authentication  Topics  Subscriptions", 
            "title": "API Calls"
        }, 
        {
            "location": "/overview/", 
            "text": "Introduction\n\n\nThe Messaging Services is implemented as a Publish/Subscribe Service. Instead of focusing on a single Messaging API specification for handling the logic of publishing/subscribing to the broker network the API focuses on creating nodes of Publishers and Subscribers as a Service.\n\n\nTerminology\n\n\n\n\n\n\n\n\nTerm\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nProject\n\n\nARGO Messaging Service uses the notion of \u2018projects\u2019 for each tenant and can support multiple projects each one containing multiple topics/subscriptions and users on the same Kafka backend.\n\n\n\n\n\n\ntopic\n\n\nA named resource to which messages are sent by publishers. A topic name must be scoped to a project.\n\n\n\n\n\n\nsubscription\n\n\nA named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application. A subscription name  must be scoped to a project.\n\n\n\n\n\n\nackDeadlineSeconds\n\n\nTime window in seconds during which client can send an acknowledgement to notify the Service that a message has been successfully received\n\n\n\n\n\n\nack\n\n\nAcknowledgement issued by the client that the message has been received\n\n\n\n\n\n\npushConfig\n\n\nContains information about the push endpoint\n\n\n\n\n\n\npushEndpoint\n\n\nWebhook URL which will receive the messages\n\n\n\n\n\n\nMessage\n\n\nThe combination of data and (optional) attributes that a publisher sends to a topic and is eventually delivered to subscribers.\n\n\n\n\n\n\nMessages - messageId\n\n\nId of the message - GENERATED by the api\n\n\n\n\n\n\nMessages - data\n\n\nData payload ALWAYS encoded in Base64\n\n\n\n\n\n\nMessages - attributes\n\n\nDictionary with key/value metadata - OPTIONAL\n\n\n\n\n\n\nMessages - publishTime\n\n\nTimestamp when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API\n\n\n\n\n\n\nAMS\n\n\nARGO Messaging Service\n\n\n\n\n\n\n\n\nThe ARGO Messaging Service\n\n\nThe ARGO Messaging Service is a Publish/Subscribe Service, which implements the Google PubSub protocol. It provides an HTTP API that enables Users/Systems to implement message oriented service using the Publish/Subscribe Model over plain HTTP.\n\n\nIn the Publish/Subscribe paradigm, Publishers are users/systems that can send messages to named-channels called Topics. Subscribers are users/systems that create Subscriptions to specific topics and receive messages.\n\n\nTopics\n\n\nTopics are resources that can hold messages. Publishers (users/systems) can create topics on demand and name them (Usually with names that make sense and express the class of messages delivered in the topic)\n\n\nSubscriptions\n\n\nIn order for a user to be able to consume messages, he must first create a subscription. Subscriptions are resources that can be created by users   on demand and are attached to specific topics. Each topic can have multiple subscriptions but each subscription can be attached to just one topic. Subscriptions allows Subscribers to incrementally consume messages, at their own pace, while the progress is automatically tracked for each subscription.\n\n\nPull vs Push Subscriptions\n\n\nPub/Sub supports both push and pull message delivery. In push delivery, the Pub/Sub initiates requests to your subscriber application to deliver messages. In pull delivery, your subscription application initiates requests to the Pub/Sub server to retrieve messages.\n\n\nPull subscriptions\n\n\nPull subscriptions can be configured to require that message deliveries are acknowledged by the Subscribers. If an acknowledgement is made, subscription can resume progressing and send the next available messages. If no acknowledgement is made subscription pauses progressing and re-sends the same messages.\n\n\nIn a pull subscription, the subscribing application explicitly calls the API pull method, which requests delivery of a message in the subscription queue. The Pub/Sub server responds with the message (or an error if the queue is empty), and an ack ID. The subscriber then explicitly calls the acknowledge method, using the returned ack ID, to acknowledge receipt.\n\n\nPush subscriptions\n\n\nIn a push subscription, the Pub/Sub server sends a request to the subscriber application, at a preconfigured endpoint. The subscriber's HTTP response serves as an implicit acknowledgement: a success response indicates that the message has been successfully processed and the Pub/Sub system can delete it from the subscription; a non-success response indicates that the Pub/Sub server should resend it (implicit \"nack\"). To ensure that subscribers can handle the message flow, the Pub/Sub dynamically adjusts the flow of requests and uses an algorithm to rate-limit retries.\n\n\n\n\nIn the current implementation of the AMS there is support only for pull subscriptions.\nSupport for pull subscription will be available in the next versions.\n\n\n\n\nMessages\n\n\nIn the ARGO Messaging Service each message has an identifier, data (payload) and metadata (optional). The metadata are stored in a attribute dictionary as key/value pairs. The message is represented in json format as follows:\n\n\n {\n   \nmessageId\n: \n12\n,\n   \ndata\n: \nYmFzZTY0\n,\n   \nattributes\n: [\n     {\n       \nkey\n: \nattribute1\n,\n       \nvalue\n: \nvalue1\n\n     },\n     {\n       \nkey\n: \nattribute2\n,\n       \nvalue\n: \nvalue2\n\n     }\n   ],\n   \npublishTime\n:\n2016-03-15T17:11:34.035345612Z\n  \n }\n\n\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmessageId\n\n\nId of the message - GENERATED by the ARGO Messaging Service. Judging from interaction with the service emulator locally and with the service itself online, yes the messages were identified with sequential numbers.\n\n\n\n\n\n\ndata\n\n\nData payload ALWAYS encoded in Base64\n\n\n\n\n\n\nattributes\n\n\nDictionary with key/value metadata - OPTIONAL\n\n\n\n\n\n\npublishTime\n\n\nTimestamp when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API\n\n\n\n\n\n\n\n\nMessage acknowledgement deadline\n\n\nThe ack deadline is the number of seconds after delivery, during which the subscriber must acknowledge the receipt of a pull or push message. If a subscriber does not respond with an explicit acknowledge (for a pull subscriber) or with a success response code (for a push subscriber) by this deadline, the server will attempt to resend the message. By default this deadline is 10 seconds.", 
            "title": "Overview and Introduction"
        }, 
        {
            "location": "/overview/#introduction", 
            "text": "The Messaging Services is implemented as a Publish/Subscribe Service. Instead of focusing on a single Messaging API specification for handling the logic of publishing/subscribing to the broker network the API focuses on creating nodes of Publishers and Subscribers as a Service.", 
            "title": "Introduction"
        }, 
        {
            "location": "/overview/#terminology", 
            "text": "Term  Description      Project  ARGO Messaging Service uses the notion of \u2018projects\u2019 for each tenant and can support multiple projects each one containing multiple topics/subscriptions and users on the same Kafka backend.    topic  A named resource to which messages are sent by publishers. A topic name must be scoped to a project.    subscription  A named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application. A subscription name  must be scoped to a project.    ackDeadlineSeconds  Time window in seconds during which client can send an acknowledgement to notify the Service that a message has been successfully received    ack  Acknowledgement issued by the client that the message has been received    pushConfig  Contains information about the push endpoint    pushEndpoint  Webhook URL which will receive the messages    Message  The combination of data and (optional) attributes that a publisher sends to a topic and is eventually delivered to subscribers.    Messages - messageId  Id of the message - GENERATED by the api    Messages - data  Data payload ALWAYS encoded in Base64    Messages - attributes  Dictionary with key/value metadata - OPTIONAL    Messages - publishTime  Timestamp when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API    AMS  ARGO Messaging Service", 
            "title": "Terminology"
        }, 
        {
            "location": "/overview/#the-argo-messaging-service", 
            "text": "The ARGO Messaging Service is a Publish/Subscribe Service, which implements the Google PubSub protocol. It provides an HTTP API that enables Users/Systems to implement message oriented service using the Publish/Subscribe Model over plain HTTP.  In the Publish/Subscribe paradigm, Publishers are users/systems that can send messages to named-channels called Topics. Subscribers are users/systems that create Subscriptions to specific topics and receive messages.", 
            "title": "The ARGO Messaging Service"
        }, 
        {
            "location": "/overview/#topics", 
            "text": "Topics are resources that can hold messages. Publishers (users/systems) can create topics on demand and name them (Usually with names that make sense and express the class of messages delivered in the topic)", 
            "title": "Topics"
        }, 
        {
            "location": "/overview/#subscriptions", 
            "text": "In order for a user to be able to consume messages, he must first create a subscription. Subscriptions are resources that can be created by users   on demand and are attached to specific topics. Each topic can have multiple subscriptions but each subscription can be attached to just one topic. Subscriptions allows Subscribers to incrementally consume messages, at their own pace, while the progress is automatically tracked for each subscription.", 
            "title": "Subscriptions"
        }, 
        {
            "location": "/overview/#pull-vs-push-subscriptions", 
            "text": "Pub/Sub supports both push and pull message delivery. In push delivery, the Pub/Sub initiates requests to your subscriber application to deliver messages. In pull delivery, your subscription application initiates requests to the Pub/Sub server to retrieve messages.  Pull subscriptions  Pull subscriptions can be configured to require that message deliveries are acknowledged by the Subscribers. If an acknowledgement is made, subscription can resume progressing and send the next available messages. If no acknowledgement is made subscription pauses progressing and re-sends the same messages.  In a pull subscription, the subscribing application explicitly calls the API pull method, which requests delivery of a message in the subscription queue. The Pub/Sub server responds with the message (or an error if the queue is empty), and an ack ID. The subscriber then explicitly calls the acknowledge method, using the returned ack ID, to acknowledge receipt.  Push subscriptions  In a push subscription, the Pub/Sub server sends a request to the subscriber application, at a preconfigured endpoint. The subscriber's HTTP response serves as an implicit acknowledgement: a success response indicates that the message has been successfully processed and the Pub/Sub system can delete it from the subscription; a non-success response indicates that the Pub/Sub server should resend it (implicit \"nack\"). To ensure that subscribers can handle the message flow, the Pub/Sub dynamically adjusts the flow of requests and uses an algorithm to rate-limit retries.   In the current implementation of the AMS there is support only for pull subscriptions.\nSupport for pull subscription will be available in the next versions.", 
            "title": "Pull vs Push Subscriptions"
        }, 
        {
            "location": "/overview/#messages", 
            "text": "In the ARGO Messaging Service each message has an identifier, data (payload) and metadata (optional). The metadata are stored in a attribute dictionary as key/value pairs. The message is represented in json format as follows:   {\n    messageId :  12 ,\n    data :  YmFzZTY0 ,\n    attributes : [\n     {\n        key :  attribute1 ,\n        value :  value1 \n     },\n     {\n        key :  attribute2 ,\n        value :  value2 \n     }\n   ],\n    publishTime : 2016-03-15T17:11:34.035345612Z   \n }     Field  Description      messageId  Id of the message - GENERATED by the ARGO Messaging Service. Judging from interaction with the service emulator locally and with the service itself online, yes the messages were identified with sequential numbers.    data  Data payload ALWAYS encoded in Base64    attributes  Dictionary with key/value metadata - OPTIONAL    publishTime  Timestamp when the message was published, in UTC Zulu time format - detailed to nanoseconds. - GENERATED BY THE API     Message acknowledgement deadline  The ack deadline is the number of seconds after delivery, during which the subscriber must acknowledge the receipt of a pull or push message. If a subscriber does not respond with an explicit acknowledge (for a pull subscriber) or with a success response code (for a push subscriber) by this deadline, the server will attempt to resend the message. By default this deadline is 10 seconds.", 
            "title": "Messages"
        }, 
        {
            "location": "/msg_backend/", 
            "text": "Using Apache Kafka as a Backend Message system\n\n\nThe ARGO Messaging API has been designed to rely on a generic Message Backend Interface and use specific implementation of that interface for supporting different systems. Right now the first implementation for the messaging backend relies on Apache Kafka as a distributed messaging system.\n\n\nA big advantage of the ARGO Messaging API is that provides a mechanism to easily support namespacing and different tenants on a Kafka Backend (Apache Kafka doesn\u2019t support natively namespacing yet). ARGO Messaging API uses the notion of \u2018projects\u2019 for each tenant and can support multiple projects each one containing multiple topics/subscriptions and users on the same Kafka backend.", 
            "title": "Messaging Backend - Apache Kafka"
        }, 
        {
            "location": "/msg_backend/#using-apache-kafka-as-a-backend-message-system", 
            "text": "The ARGO Messaging API has been designed to rely on a generic Message Backend Interface and use specific implementation of that interface for supporting different systems. Right now the first implementation for the messaging backend relies on Apache Kafka as a distributed messaging system.  A big advantage of the ARGO Messaging API is that provides a mechanism to easily support namespacing and different tenants on a Kafka Backend (Apache Kafka doesn\u2019t support natively namespacing yet). ARGO Messaging API uses the notion of \u2018projects\u2019 for each tenant and can support multiple projects each one containing multiple topics/subscriptions and users on the same Kafka backend.", 
            "title": "Using Apache Kafka as a Backend Message system"
        }, 
        {
            "location": "/msg_flow/", 
            "text": "The Messaging API flow\n\n\nThe main steps of the messaging API:\n\n\n\n\nA user creates a Topic\n\n\nUsers that want to consume a message set up subscriptions.\n\n\nEach subscription is set on one Topic\n\n\nA Topic can have multiple Subscriptions\n\n\nEach subscription sets up a sync point in time.\n\n\nMessages that are published after that sync point can be pull by or push to the subscribers.\n\n\nMessages that have been published to the Topic that the Subscription was configured for  before the creation of the Subscription, will not be delivered to the Subscribers.\n\n\nEach Topic has a TTL values for each messages published to it. Older messages are purged.\n\n\nMessage deliveries can be out-of-order and might have duplicate messages. Each Subscriber should be idempotent\n\n\nA Subscription is configured either as in PULL or on PUSH mode. PUSH mode receives a client URI in order to POST messages there\n\n\n\n\n\n\n\n\n\n\nA Topic might have multiple subscriptions and each subscription has it\u2019s own tracked offset on the topic.\n\n\n\n\n\n\nAbove: A single Topic holding multiple Subscriptions", 
            "title": "Messaging API flow"
        }, 
        {
            "location": "/msg_flow/#the-messaging-api-flow", 
            "text": "The main steps of the messaging API:   A user creates a Topic  Users that want to consume a message set up subscriptions.  Each subscription is set on one Topic  A Topic can have multiple Subscriptions  Each subscription sets up a sync point in time.  Messages that are published after that sync point can be pull by or push to the subscribers.  Messages that have been published to the Topic that the Subscription was configured for  before the creation of the Subscription, will not be delivered to the Subscribers.  Each Topic has a TTL values for each messages published to it. Older messages are purged.  Message deliveries can be out-of-order and might have duplicate messages. Each Subscriber should be idempotent  A Subscription is configured either as in PULL or on PUSH mode. PUSH mode receives a client URI in order to POST messages there      A Topic might have multiple subscriptions and each subscription has it\u2019s own tracked offset on the topic.    Above: A single Topic holding multiple Subscriptions", 
            "title": "The Messaging API flow"
        }, 
        {
            "location": "/auth/", 
            "text": "Security and privacy considerations\n\n\nAuthentication is the process of determining the identity of a client, which is typically a user account. Authorization is the process of determining what permissions an authenticated identity has on a set of specified resources. In the Messaging API, there can be no authorization without authentication.\n\n\n\n\nThis is an initial implementation of the user authentication and authorization. In the next versions of the ARGO Messaging service we are going to provide support for both bear and OpenID Connect tokens for the API access and it will be possible to apply ACLs at each (resource) subscriptions and topics.\n\n\n\n\nUser Authentication\n\n\nAuthentication requires the presence of a populated \u201cusers\u201d collection in the datastore in the adhering to the following schema:\n\n\n{\n    \nname\n : \njohn\n,\n    \nemail\n : \njohn@doe.com\n,\n    \nproject\n : \nARGO\n,\n    \ntoken\n : \nS3CR3T\n,\n    \nroles\n : [\n        \nadmin\n,\n        \nmember\n\n    ]\n}\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nusername\n\n\n\n\n\n\nemail\n\n\nUser\u2019s email\n\n\n\n\n\n\nproject\n\n\nProject that the user belongs to\n\n\n\n\n\n\ntoken\n\n\nSecret token for authentication\n\n\n\n\n\n\nroles\n\n\nList of roles that user has. Each role definition is used in authorization (explained later)\n\n\n\n\n\n\n\n\nEach user is authenticated by adding the url parameter ?key=T0K3N in each API request\n\n\nAuthorization\n\n\nAuthorization requires the presence of a populated \u201croles\u201d collection in the datastore in the adhering to the following schema:\n\n\n{\n    \nresource\n : \nresource_name:action\n,\n    \nroles\n : [\n        \nadmin\n,\n        \nmember\n\n    ]\n}\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresource\n\n\nHolds the name of the resource and the action on that resource in the following format: resource_name:action\n\n\n\n\n\n\nroles\n\n\nA list of roles allowed on this resource:action\n\n\n\n\n\n\n\n\nResource_name:action must be the same with the default routes supported in the api currently and those are:\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntopics:list\n\n\nAllow user to list all topics in a project when using  \nGET /projects/PROJECT_A/topics\n\n\n\n\n\n\ntopics:show\n\n\nAllow user to get information on a specific topic when using \nGET /projects/PROJECT_A/topics/TOPIC_A\n\n\n\n\n\n\ntopics:create\n\n\nAllow user to create a new topic when using \nPUT /projects/PROJECT_A/topics/TOPIC_NEW\n\n\n\n\n\n\ntopics:delete\n\n\nAllow user to delete an existing topic when using \nDELETE /projects/PROJECT_A/topics/TOPIC_A\n\n\n\n\n\n\ntopics:publish\n\n\nAllow user to publish messages in a topic when using \nPOST /projects/PROJECT_A/topics/TOPIC_A:publish\n\n\n\n\n\n\nsubscriptions:list\n\n\nAllow user to list all subscriptions in a project when using \nGET /projects/PROJECT_A/subscriptions\n\n\n\n\n\n\nsubscriptions:show\n\n\nAllow user to get information on a specific subscription when using \nGET /projects/PROJECT_A/subscriptions/SUB_A\n\n\n\n\n\n\nsubscriptions:create\n\n\nAllow user to create a new subscription when using \nPUT /projects/PROJECT_A/subscriptions/SUB_NEW\n\n\n\n\n\n\nsubscriptions:delete\n\n\nAllow user to delete an existing subscription when using \nDELETE /projects/PROJECT_A/subscriptions/SUB_A\n\n\n\n\n\n\nsubscriptions:pull\n\n\nAllow user to pull messages from a subscription when using \nPOST /projects/PROJECT_A/subscriptions/SUB_A:pull\n\n\n\n\n\n\nsubscriptions:acknowledge\n\n\nAllow user to acknowledge messages that has pulled when using \nPOST /projects/PROJECT_A/subscriptions/SUB_A:acknowledge\n\n\n\n\n\n\n\n\nPer Resource Authorization\n\n\nMessaging API provides the option to control in finer detail access on resources such as topics and subscriptions for users(clients) that are producers or subscribers. Each resource (topic/subscription) comes with an access list (ACL) that contains producers or subscribers that are eligible to use that resource (when publishing or pulling messages respectively). Users with the admin role are able to modify Access lists for topics and subscriptions on the project they belong. In order for the feature to be available Messaging API should have the config parameter \nper_resource_auth\n set to \ntrue\n\n\nList ACL of a given topic\n\n\nModify ACL of a given topic\n\n\nList ACL of a given subscription\n\n\nModify ACL of a given subscription", 
            "title": "Authentication & Authorization"
        }, 
        {
            "location": "/auth/#security-and-privacy-considerations", 
            "text": "Authentication is the process of determining the identity of a client, which is typically a user account. Authorization is the process of determining what permissions an authenticated identity has on a set of specified resources. In the Messaging API, there can be no authorization without authentication.   This is an initial implementation of the user authentication and authorization. In the next versions of the ARGO Messaging service we are going to provide support for both bear and OpenID Connect tokens for the API access and it will be possible to apply ACLs at each (resource) subscriptions and topics.", 
            "title": "Security and privacy considerations"
        }, 
        {
            "location": "/auth/#user-authentication", 
            "text": "Authentication requires the presence of a populated \u201cusers\u201d collection in the datastore in the adhering to the following schema:  {\n     name  :  john ,\n     email  :  john@doe.com ,\n     project  :  ARGO ,\n     token  :  S3CR3T ,\n     roles  : [\n         admin ,\n         member \n    ]\n}     Parameter  Description      name  username    email  User\u2019s email    project  Project that the user belongs to    token  Secret token for authentication    roles  List of roles that user has. Each role definition is used in authorization (explained later)     Each user is authenticated by adding the url parameter ?key=T0K3N in each API request", 
            "title": "User Authentication"
        }, 
        {
            "location": "/auth/#authorization", 
            "text": "Authorization requires the presence of a populated \u201croles\u201d collection in the datastore in the adhering to the following schema:  {\n     resource  :  resource_name:action ,\n     roles  : [\n         admin ,\n         member \n    ]\n}     Parameter  Description      resource  Holds the name of the resource and the action on that resource in the following format: resource_name:action    roles  A list of roles allowed on this resource:action     Resource_name:action must be the same with the default routes supported in the api currently and those are:     Action  Description      topics:list  Allow user to list all topics in a project when using   GET /projects/PROJECT_A/topics    topics:show  Allow user to get information on a specific topic when using  GET /projects/PROJECT_A/topics/TOPIC_A    topics:create  Allow user to create a new topic when using  PUT /projects/PROJECT_A/topics/TOPIC_NEW    topics:delete  Allow user to delete an existing topic when using  DELETE /projects/PROJECT_A/topics/TOPIC_A    topics:publish  Allow user to publish messages in a topic when using  POST /projects/PROJECT_A/topics/TOPIC_A:publish    subscriptions:list  Allow user to list all subscriptions in a project when using  GET /projects/PROJECT_A/subscriptions    subscriptions:show  Allow user to get information on a specific subscription when using  GET /projects/PROJECT_A/subscriptions/SUB_A    subscriptions:create  Allow user to create a new subscription when using  PUT /projects/PROJECT_A/subscriptions/SUB_NEW    subscriptions:delete  Allow user to delete an existing subscription when using  DELETE /projects/PROJECT_A/subscriptions/SUB_A    subscriptions:pull  Allow user to pull messages from a subscription when using  POST /projects/PROJECT_A/subscriptions/SUB_A:pull    subscriptions:acknowledge  Allow user to acknowledge messages that has pulled when using  POST /projects/PROJECT_A/subscriptions/SUB_A:acknowledge", 
            "title": "Authorization"
        }, 
        {
            "location": "/auth/#per-resource-authorization", 
            "text": "Messaging API provides the option to control in finer detail access on resources such as topics and subscriptions for users(clients) that are producers or subscribers. Each resource (topic/subscription) comes with an access list (ACL) that contains producers or subscribers that are eligible to use that resource (when publishing or pulling messages respectively). Users with the admin role are able to modify Access lists for topics and subscriptions on the project they belong. In order for the feature to be available Messaging API should have the config parameter  per_resource_auth  set to  true", 
            "title": "Per Resource Authorization"
        }, 
        {
            "location": "/auth/#list-acl-of-a-given-topic", 
            "text": "", 
            "title": "List ACL of a given topic"
        }, 
        {
            "location": "/auth/#modify-acl-of-a-given-topic", 
            "text": "", 
            "title": "Modify ACL of a given topic"
        }, 
        {
            "location": "/auth/#list-acl-of-a-given-subscription", 
            "text": "", 
            "title": "List ACL of a given subscription"
        }, 
        {
            "location": "/auth/#modify-acl-of-a-given-subscription", 
            "text": "", 
            "title": "Modify ACL of a given subscription"
        }, 
        {
            "location": "/api_basic/", 
            "text": "Introduction\n\n\nThe ARGO Messaging Service API implements the Google PubSub specification and thus supports HTTP RPC-style methods in the form of:\n\n\nhttps://messaging.argo.grnet.gr/api/projects/METHOD\n\n\nAll methods must be called using HTTPS. Arguments can be passed as GET or POST params, or a mix. The response contains a \n200 OK\n for a successful request and a JSON object in case of an error. For failure results, the error property will contain a short machine-readable error code. In the case of problematic calls,  during handling user\u2019s request the API responds using a predefined schema (described in chapter Errors), that contains a short machine-readable warning code, an error code and an error description  (or list of them, in the case of multiple errors).\n\n\nEach user is authenticated by adding the url parameter \n?key=T0K3N\n in each API request\n\n\nConfiguration file: config.json\n\n\nThe first step for using the messaging API is to edit the main configuration file.\n\n\nThe ARGO Messaging Service main configuration file is config.json. An example configuration is listed below:\n\n\n{\n  \nbind_ip\n:\n,\n  \nport\n:8080,\n  \nzookeer_hosts\n:[\nlocalhost\n],\n  \nstore_host\n:\nlocalhost\n,\n  \nstore_db\n:\nargo_msg\n,\n  \ncertificate\n:\n/etc/pki/tls/certs/localhost.crt\n,\n  \ncertificate_key\n:\n/etc/pki/tls/private/localhost.key\n,\n  \nper_resource_auth\n:true\n}\n\n\n\n\nExplanation of config parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbind_ip\n\n\nthe ip address to listen to.\n\n\n\n\n\n\nport\n\n\nThe port where the API will listen to\n\n\n\n\n\n\nzookeeper_hosts\n\n\nList of zookeeper instances that are used to sync kafka\n\n\n\n\n\n\nstore_host\n\n\nAddress:port of the datastore server\n\n\n\n\n\n\nstore_db\n\n\nDatabase name used on the datastore server\n\n\n\n\n\n\ncertificate\n\n\npath to the node's TLS certificate file\n\n\n\n\n\n\ncertificate_key\n\n\npath to the certificate's private key\n\n\n\n\n\n\nper_resource_auth\n\n\nenable authorization per resource (topic/subscription)\n\n\n\n\n\n\n\n\nLocation of config.json\n: API will look first for config.json locally in the folder where the executable runs and then in the \n/etc/argo-messaging/\n  location.", 
            "title": "API Basic Information"
        }, 
        {
            "location": "/api_basic/#introduction", 
            "text": "The ARGO Messaging Service API implements the Google PubSub specification and thus supports HTTP RPC-style methods in the form of:  https://messaging.argo.grnet.gr/api/projects/METHOD  All methods must be called using HTTPS. Arguments can be passed as GET or POST params, or a mix. The response contains a  200 OK  for a successful request and a JSON object in case of an error. For failure results, the error property will contain a short machine-readable error code. In the case of problematic calls,  during handling user\u2019s request the API responds using a predefined schema (described in chapter Errors), that contains a short machine-readable warning code, an error code and an error description  (or list of them, in the case of multiple errors).  Each user is authenticated by adding the url parameter  ?key=T0K3N  in each API request", 
            "title": "Introduction"
        }, 
        {
            "location": "/api_basic/#configuration-file-configjson", 
            "text": "The first step for using the messaging API is to edit the main configuration file.  The ARGO Messaging Service main configuration file is config.json. An example configuration is listed below:  {\n   bind_ip : ,\n   port :8080,\n   zookeer_hosts :[ localhost ],\n   store_host : localhost ,\n   store_db : argo_msg ,\n   certificate : /etc/pki/tls/certs/localhost.crt ,\n   certificate_key : /etc/pki/tls/private/localhost.key ,\n   per_resource_auth :true\n}  Explanation of config parameters:     Parameter  Description      bind_ip  the ip address to listen to.    port  The port where the API will listen to    zookeeper_hosts  List of zookeeper instances that are used to sync kafka    store_host  Address:port of the datastore server    store_db  Database name used on the datastore server    certificate  path to the node's TLS certificate file    certificate_key  path to the certificate's private key    per_resource_auth  enable authorization per resource (topic/subscription)     Location of config.json : API will look first for config.json locally in the folder where the executable runs and then in the  /etc/argo-messaging/   location.", 
            "title": "Configuration file: config.json"
        }, 
        {
            "location": "/api_auth/", 
            "text": "Introduction\n\n\nEach user is authenticated by adding the url parameter \n?key=T0K3N\n in each API request\n\n\nIf a user does not provide a valid token the following response is returned:\n\n\n{\n   \nerror\n: {\n      \ncode\n: 401,\n      \nmessage\n: \nUnauthenticated\n,\n      \nstatus\n: \nUNAUTHENTICATED\n\n   }\n}\n\n\n\n\nThe ARGO Messaging Service supports authorization. If a user is unauthorized the following response is returned:\n\n\n{\n   \nerror\n: {\n      \ncode\n: 403,\n      \nmessage\n: \nAccess to this resource is forbidden\n,\n       \nstatus\n: \nFORBIDDEN\n\n   }\n}", 
            "title": "API Authentication"
        }, 
        {
            "location": "/api_auth/#introduction", 
            "text": "Each user is authenticated by adding the url parameter  ?key=T0K3N  in each API request  If a user does not provide a valid token the following response is returned:  {\n    error : {\n       code : 401,\n       message :  Unauthenticated ,\n       status :  UNAUTHENTICATED \n   }\n}  The ARGO Messaging Service supports authorization. If a user is unauthorized the following response is returned:  {\n    error : {\n       code : 403,\n       message :  Access to this resource is forbidden ,\n        status :  FORBIDDEN \n   }\n}", 
            "title": "Introduction"
        }, 
        {
            "location": "/api_topics/", 
            "text": "Topics Api Calls\n\n\n[PUT] Manage Topics - Create new topic\n\n\nThis request creates a new topic in a project with a PUT request\n\n\nRequest\n\n\nPUT /v1/projects/{project_name}/topics/{topic_name}\n\n\nWhere\n\n\n\n\nProject_name: Name of the project to create\n\n\nTopic_name: The topic name to create\n\n\n\n\nExample request\n\n\ncurl -X PUT -H \nContent-Type: application/json\n\n -d '' \n https://{URL}/v1/projects/EGI/topics/monitoring?key=S3CR3T\n`\n\n\n\n\nResponses\n\n\nSuccess Response\n\n200 OK\n\n\n{\n \nname\n: \nprojects/EGI/topics/monitoring\n\n}\n\n\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors\n\n\n[DELETE] Manage Topics - Delete topic\n\n\nThis request deletes a topic in a project with a DELETE request\n\n\nRequest\n\n\n`DELETE /v1/projects/{project_name}/topics/{topic_name}``\n\n\nWhere\n\n\n\n\nProject_name: Name of the project to delete\n\n\nTopic_name: The topic name to delete\n\n\n\n\nExample request\n\n\ncurl -X DELETE -H \nContent-Type: application/json\n  \n-d '' \n https://{URL}/v1/projects/EGI/topics/monitoring?key=S3CR3T\n`\n\n\n\n\nResponses\n\n\nSuccess Response\nCode: \n200 OK\n, Empty response if successful.\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors\n\n\n[GET] Manage Topics - Get a topic\n\n\nThis request gets the details of a topic in a project with a GET request\n\n\nRequest\n\n\n`GET /v1/projects/{project_name}/topics/{topic_name}``\n\n\nWhere\n\n\n\n\nProject_name: Name of the project to get\n\n\nTopic_name: The topic name to get\n\n\n\n\nExample request\n\n\ncurl -H \nContent-Type: application/json\n  \n-d '' \n https://{URL}/v1/projects/EGI/topics/monitoring?key=S3CR3T\n`\n\n\n\n\nResponses\n\n\nSuccess Response\n\n200 OK\n\n\n{\n \nname\n: \nprojects/EGI/topics/monitoring\n\n}\n\n\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors\n\n\n[GET] Manage Topics - List Topics\n\n\nThis request gets the list of topics in a project with a GET request\n\n\nRequest\n\n\nGET /v1/projects/{project_name}/topics\n\n\nWhere\n\n\nProject_name: Name of the project to get the list of topics\n\n\nExample request\n\n\ncurl -H \nContent-Type: application/json\n  \n-d '' \n https://{URL}/v1/projects/EGI/topics/?key=S3CR3T\n`\n\n\n\n\nResponses\n\n\nSuccess Response\n\n200 OK\n\n\n{\n  \ntopics\n: [\n    {\n      \nname\n:\n/project/EGI/topics/monitoring\n\n    },\n    {\n      \nname\n:\n/project/EGI/topics/accounting\n\n    },\n     ]\n}\n\n\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors\n\n\n[POST] Publish message/s to a topic\n\n\nThe topic:publish endpoint publishes a message, or a list of messages to a specific topic with a  POST request\n\n\nRequest\n\n\nPOST /v1/projects/{project_name}/topics/{topic_name}:publish\n\n\nWhere\n\n\n\n\nProject_name: Name of the project to post the messages\n\n\ntopic_name: to post the messages\n\n\n\n\nPost data\n\n\n{\n\nmessages\n: [\n    {\n        \nattributes\n: {\n        \nattr1\n:\ntest1\n,\n        \nattr2\n:\ntest2\n\n        }\n    ,\n \ndata\n:\nU28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/\n\n\n    }\n]\n}\n\n\n\n\n\n\nThe value of the data property must be always encoded in base64 format.\n\n\n\n\nExample request\n\n\ncurl -X POST -H \nContent-Type: application/json\n  \n-d { POSTDATA } https://{URL}/v1/projects/EGI/topics/monitoring:publish?key=S3CR3T\n`\n\n\n\n\nResponses\n\n\nSuccess Response\n\n200 OK\n\n\n{\n \nmessageIds\n: [\n  \n100309303\n\n ]\n}\n\n\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors", 
            "title": "API Topics"
        }, 
        {
            "location": "/api_topics/#topics-api-calls", 
            "text": "", 
            "title": "Topics Api Calls"
        }, 
        {
            "location": "/api_topics/#put-manage-topics-create-new-topic", 
            "text": "This request creates a new topic in a project with a PUT request  Request  PUT /v1/projects/{project_name}/topics/{topic_name}  Where   Project_name: Name of the project to create  Topic_name: The topic name to create   Example request  curl -X PUT -H  Content-Type: application/json \n -d ''   https://{URL}/v1/projects/EGI/topics/monitoring?key=S3CR3T `  Responses  Success Response 200 OK  {\n  name :  projects/EGI/topics/monitoring \n}  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[PUT] Manage Topics - Create new topic"
        }, 
        {
            "location": "/api_topics/#delete-manage-topics-delete-topic", 
            "text": "This request deletes a topic in a project with a DELETE request  Request  `DELETE /v1/projects/{project_name}/topics/{topic_name}``  Where   Project_name: Name of the project to delete  Topic_name: The topic name to delete   Example request  curl -X DELETE -H  Content-Type: application/json   \n-d ''   https://{URL}/v1/projects/EGI/topics/monitoring?key=S3CR3T `  Responses  Success Response\nCode:  200 OK , Empty response if successful.  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[DELETE] Manage Topics - Delete topic"
        }, 
        {
            "location": "/api_topics/#get-manage-topics-get-a-topic", 
            "text": "This request gets the details of a topic in a project with a GET request  Request  `GET /v1/projects/{project_name}/topics/{topic_name}``  Where   Project_name: Name of the project to get  Topic_name: The topic name to get   Example request  curl -H  Content-Type: application/json   \n-d ''   https://{URL}/v1/projects/EGI/topics/monitoring?key=S3CR3T `  Responses  Success Response 200 OK  {\n  name :  projects/EGI/topics/monitoring \n}  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[GET] Manage Topics - Get a topic"
        }, 
        {
            "location": "/api_topics/#get-manage-topics-list-topics", 
            "text": "This request gets the list of topics in a project with a GET request  Request  GET /v1/projects/{project_name}/topics  Where  Project_name: Name of the project to get the list of topics  Example request  curl -H  Content-Type: application/json   \n-d ''   https://{URL}/v1/projects/EGI/topics/?key=S3CR3T `  Responses  Success Response 200 OK  {\n   topics : [\n    {\n       name : /project/EGI/topics/monitoring \n    },\n    {\n       name : /project/EGI/topics/accounting \n    },\n     ]\n}  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[GET] Manage Topics - List Topics"
        }, 
        {
            "location": "/api_topics/#post-publish-messages-to-a-topic", 
            "text": "The topic:publish endpoint publishes a message, or a list of messages to a specific topic with a  POST request  Request  POST /v1/projects/{project_name}/topics/{topic_name}:publish  Where   Project_name: Name of the project to post the messages  topic_name: to post the messages   Post data  { messages : [\n    {\n         attributes : {\n         attr1 : test1 ,\n         attr2 : test2 \n        }\n    ,\n  data : U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ \n\n    }\n]\n}   The value of the data property must be always encoded in base64 format.   Example request  curl -X POST -H  Content-Type: application/json   \n-d { POSTDATA } https://{URL}/v1/projects/EGI/topics/monitoring:publish?key=S3CR3T `  Responses  Success Response 200 OK  {\n  messageIds : [\n   100309303 \n ]\n}  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[POST] Publish message/s to a topic"
        }, 
        {
            "location": "/api_subs/", 
            "text": "Subscriptions Api Calls\n\n\n[PUT] Manage Subscriptions - Create subscriptions\n\n\nThis request creates a new subscription in a project with a PUT request\n\n\nRequest\n\n\nPUT /v1/projects/{project_name}/subscriptions/{subscription_name}\n\n\nWhere\n\n\n\n\nProject_name: Name of the project to create\n\n\nsubscription_name: The subscription name to create\n\n\n\n\nExample request\n\n\ncurl -X PUT -H \nContent-Type: application/json\n  -d 'PUTBODY'\n    \n https://{URL}/v1/projects/EGI/subscriptions/alert_engine ?key=S3CR3T\n`\n\n\n\n\nPUT  BODY\n\n\n{\n \ntopic\n: \nprojects/EGI/topics/monitoring\n,\n \nack\n:10\n}\n\n\n\n\nResponses\n\n\nSuccess Response\n\n200 OK\n\n\n{\n \nname\n: \nprojects/EGI/subscriptions/alert_engine\n,\n \ntopic\n: \nprojects/EGI/topics/monitoring\n,\n \nackDeadlineSeconds\n: 10  \n}\n\n\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors\n\n\n[GET] Manage Subscriptions - List Subscriptions\n\n\nThis request lists all subscriptions  in a project with a GET  request\n\n\nRequest\n\n\nGET /v1/projects/{project_name}/subscriptions/\n\n\nWhere\n\n\n\n\nProject_name: Name of the project to list the subscriptions\n\n\n\n\nExample request\n\n\ncurl -X PUT -H \nContent-Type: application/json\n\n  -d '' \n https://{URL}/v1/projects/EGI/subscriptions/?key=S3CR3T\n\n\n\n\n\nResponses\n\n\nSuccess Response\n\n200 OK\n\n\n \nsubscriptions\n: [\n {\n  \nname\n: \nprojects/EGI/subscriptions/alert_engine\n,\n  \ntopic\n: \nprojects/EGI/topics/monitoring\n,\n  \npushConfig\n: {},\n  \nackDeadlineSeconds\n: 10\n }\n]\n\n\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors\n\n\n[DELETE] Manage Subscriptions - Delete Subscriptions\n\n\nThis request deletes a topic in a project with a DELETE request\n\n\nRequest\n\n\nDELETE /v1/projects/{project_name}/subscriptions/{subscription_name}\n\n\nWhere\n\n\n\n\nProject_name: Name of the project\n\n\nsubscription_name: The subscription name to delete\n\n\n\n\nExample request\n\n\ncurl -X DELETE -H \nContent-Type: application/json\n  \nhttp://{URL}/v1/projects/EGI/subscriptions/alert_engine?key=S3CR3T\n\n\n\n\nResponses\n\n\nSuccess Response\nCode: \n200 OK\n, Empty response if successful.\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors\n\n\n[POST] Modify Push Configuration\n\n\nThis request modifies the push configuration of a subscription\n\n\nRequest\n\n\nPOST /v1/projects/{project_name}/subscriptions/{subscription_name}:modifyPushConfig\n\n\nPost body:\n\n\njson\n{\n  \npushConfig\n: {  \npushEndpoint\n: \n,\n                   \nretryPolicy\n: { \ntype\n: \nlinear\n, \nperiod\n: 300 }\n  }\n}\n\n\n\n\nWhere\n\n\n\n\nProject_name: Name of the project\n\n\nsubscription_name: The subscription name to consume\n\n\npushConfig: configuration including pushEndpoint for the remote endpoint to receive the messages. Also includes retryPolicy (type of retryPolicy and period parameters)\n\n\n\n\nExample request\n\n\ncurl -X POST -H \"Content-Type: application/json\"  \n-d POSTDATA http://{URL}/v1/projects/EGI/subscriptions/alert_engine:modifyPushConfig?key=S3CR3T\"\n\n\npost body:\n\n\n{\n  \npushConfig\n: {\npushEndpoint\n: \nhost:example.com:8080/path/to/hook\n,\n                 \nretryPolicy\n:  { \ntype\n: \nlinear\n, \nperiod\n: 300 }\n  }\n}\n\n\n\n\nResponses\n\n\nSuccess Response\nCode: \n200 OK\n, Empty response if successful.\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors\n\n\n[POST] Pull messages from a subscription (Consume)\n\n\nThis request consumes messages from a subscription in a project with a POST request\n\n\nRequest\n\n\nPOST /v1/projects/{project_name}/subscriptions/{subscription_name}:pull\n\n\nPost body:\n\n\n{\n \nmaxMessages\n: \n1\n,\n}\n\n\n\n\nWhere\n\n\n\n\nProject_name: Name of the project\n\n\nsubscription_name: The subscription name to consume\n\n\nmaxMessages: the max number of messages to consume\n\n\n\n\nExample request\n\n\ncurl -X POST -H \nContent-Type: application/json\n\n  -d POSTDATA https://{URL}/v1/projects/EGI/subscriptions/alert_engine:pull?key=S3CR3T\n\n\n\n\n\npost body:\n\n\n{\n \"maxMessages\": \"1\",\n}\n\n\nResponses\n\n\n200 OK\n\n\n{\n  \nreceivedMessages\n: [\n    {\n      \nackId\n: \ndQNNHlAbEGEIBE...\n,\n      \nmessage\n: {\n        \nattributes\n: [\n          {\n            \nkey\n: \nwhatever\n,\n            \nvalue\n: \nfoo\n\n          }\n        ],\n        \ndata\n: \nU28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/\n,\n        \nmessageId\n: \n100309303\n\n      }\n    }\n  ]\n}\n\n\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors\n\n\n[POST] Sending an ACK\n\n\nThis request sends an ack that the message has been  received\n\n\nRequest\n\n\nPOST /v1/projects/{project_name}/subscriptions/{subscription_name}:acknowledge\n\n\nPost body:\n\n\n{\n  \nackIds\n: [\n  \ndQNNHlAbEGEIBE...\n\n ],\n\n}\n\n\n\n\nWhere\n\n\n\n\nProject_name: Name of the project\n\n\nsubscription_name: The subscription name to consume\n\n\nackIds: the ids of the messages\n\n\n\n\nExample request\n\n\n`curl -X POST -H \"Content-Type: application/json\"\n\n-d POSTDATA http://{URL}/v1/projects/EGI/subscriptions/alert_engine:acknowledge?key=S3CR3T\"\n\n\n\n### post body:\n```json\n{\n \nackIds\n: [\n  \ndQNNHlAbEGEIBE...\n\n ],\n\n}\n\n\n\n\nResponses\n\n\nSuccess Response\n\n200 OK\n\n\nErrors\n\n\nPlease refer to section \nErrors\n to see all possible Errors", 
            "title": "API Subscriptions"
        }, 
        {
            "location": "/api_subs/#subscriptions-api-calls", 
            "text": "", 
            "title": "Subscriptions Api Calls"
        }, 
        {
            "location": "/api_subs/#put-manage-subscriptions-create-subscriptions", 
            "text": "This request creates a new subscription in a project with a PUT request  Request  PUT /v1/projects/{project_name}/subscriptions/{subscription_name}  Where   Project_name: Name of the project to create  subscription_name: The subscription name to create   Example request  curl -X PUT -H  Content-Type: application/json   -d 'PUTBODY'\n      https://{URL}/v1/projects/EGI/subscriptions/alert_engine ?key=S3CR3T `  PUT  BODY  {\n  topic :  projects/EGI/topics/monitoring ,\n  ack :10\n}  Responses  Success Response 200 OK  {\n  name :  projects/EGI/subscriptions/alert_engine ,\n  topic :  projects/EGI/topics/monitoring ,\n  ackDeadlineSeconds : 10  \n}  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[PUT] Manage Subscriptions - Create subscriptions"
        }, 
        {
            "location": "/api_subs/#get-manage-subscriptions-list-subscriptions", 
            "text": "This request lists all subscriptions  in a project with a GET  request  Request  GET /v1/projects/{project_name}/subscriptions/  Where   Project_name: Name of the project to list the subscriptions   Example request  curl -X PUT -H  Content-Type: application/json \n  -d ''   https://{URL}/v1/projects/EGI/subscriptions/?key=S3CR3T   Responses  Success Response 200 OK    subscriptions : [\n {\n   name :  projects/EGI/subscriptions/alert_engine ,\n   topic :  projects/EGI/topics/monitoring ,\n   pushConfig : {},\n   ackDeadlineSeconds : 10\n }\n]  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[GET] Manage Subscriptions - List Subscriptions"
        }, 
        {
            "location": "/api_subs/#delete-manage-subscriptions-delete-subscriptions", 
            "text": "This request deletes a topic in a project with a DELETE request  Request  DELETE /v1/projects/{project_name}/subscriptions/{subscription_name}  Where   Project_name: Name of the project  subscription_name: The subscription name to delete   Example request  curl -X DELETE -H  Content-Type: application/json   \nhttp://{URL}/v1/projects/EGI/subscriptions/alert_engine?key=S3CR3T  Responses  Success Response\nCode:  200 OK , Empty response if successful.  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[DELETE] Manage Subscriptions - Delete Subscriptions"
        }, 
        {
            "location": "/api_subs/#post-modify-push-configuration", 
            "text": "This request modifies the push configuration of a subscription  Request  POST /v1/projects/{project_name}/subscriptions/{subscription_name}:modifyPushConfig  Post body:  json\n{\n   pushConfig : {   pushEndpoint :  ,\n                    retryPolicy : {  type :  linear ,  period : 300 }\n  }\n}  Where   Project_name: Name of the project  subscription_name: The subscription name to consume  pushConfig: configuration including pushEndpoint for the remote endpoint to receive the messages. Also includes retryPolicy (type of retryPolicy and period parameters)   Example request  curl -X POST -H \"Content-Type: application/json\"  \n-d POSTDATA http://{URL}/v1/projects/EGI/subscriptions/alert_engine:modifyPushConfig?key=S3CR3T\"  post body:  {\n   pushConfig : { pushEndpoint :  host:example.com:8080/path/to/hook ,\n                  retryPolicy :  {  type :  linear ,  period : 300 }\n  }\n}  Responses  Success Response\nCode:  200 OK , Empty response if successful.  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[POST] Modify Push Configuration"
        }, 
        {
            "location": "/api_subs/#post-pull-messages-from-a-subscription-consume", 
            "text": "This request consumes messages from a subscription in a project with a POST request  Request  POST /v1/projects/{project_name}/subscriptions/{subscription_name}:pull  Post body:  {\n  maxMessages :  1 ,\n}  Where   Project_name: Name of the project  subscription_name: The subscription name to consume  maxMessages: the max number of messages to consume   Example request  curl -X POST -H  Content-Type: application/json \n  -d POSTDATA https://{URL}/v1/projects/EGI/subscriptions/alert_engine:pull?key=S3CR3T   post body:  {\n \"maxMessages\": \"1\",\n}  Responses  200 OK  {\n   receivedMessages : [\n    {\n       ackId :  dQNNHlAbEGEIBE... ,\n       message : {\n         attributes : [\n          {\n             key :  whatever ,\n             value :  foo \n          }\n        ],\n         data :  U28geW91IHdlbnQgYWhlYWQgYW5kIGRlY29kZWQgdGhpcywgeW91IGNvdWxkbid0IHJlc2lzdCBlaCA/ ,\n         messageId :  100309303 \n      }\n    }\n  ]\n}  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[POST] Pull messages from a subscription (Consume)"
        }, 
        {
            "location": "/api_subs/#post-sending-an-ack", 
            "text": "This request sends an ack that the message has been  received  Request  POST /v1/projects/{project_name}/subscriptions/{subscription_name}:acknowledge  Post body:  {\n   ackIds : [\n   dQNNHlAbEGEIBE... \n ],\n\n}  Where   Project_name: Name of the project  subscription_name: The subscription name to consume  ackIds: the ids of the messages   Example request  `curl -X POST -H \"Content-Type: application/json\" \n-d POSTDATA http://{URL}/v1/projects/EGI/subscriptions/alert_engine:acknowledge?key=S3CR3T\"  \n### post body:\n```json\n{\n  ackIds : [\n   dQNNHlAbEGEIBE... \n ],\n\n}  Responses  Success Response 200 OK  Errors  Please refer to section  Errors  to see all possible Errors", 
            "title": "[POST] Sending an ACK"
        }, 
        {
            "location": "/api_errors/", 
            "text": "Errors\n\n\nIn case of Error during handling user\u2019s request the API responds using the following schema\n\n\n{\n   \nerror\n: {\n      \ncode\n: 500,\n      \nmessage\n: \nSomething bad happened\n,\n      \nerrors\n: [\n         {\n            \nmessage\n: \nSomething bad happened\n,\n            \ndomain\n: \nglobal\n,\n            \nreason\n: \nbackend\n\n         }\n      ],\n      \nstatus\n: \nINTERNAL\n\n   }\n}\n\n\n\n\nMost of the times the errors array is empty thus omitted such as:\n\n\n{\n   \nerror\n: {\n      \ncode\n: 500,\n      \nmessage\n: \nSomething bad happened\n,\n      \nstatus\n: \nINTERNAL\n\n   }\n}\n\n\n\n\nCaptured Errors from usage scenarios\n\n\nPut topic with the same name\n\n\n{\n  \nerror\n: {\n    \ncode\n: 409,\n    \nmessage\n: \nTopic already exists\n,\n    \nstatus\n: \nALREADY_EXISTS\n\n  }\n}\n\n\n\n\nPut subscription with the same name\n\n\n{\n  \nerror\n: {\n    \ncode\n: 409,\n    \nmessage\n: \nSubscription already exists\n,\n    \nstatus\n: \nALREADY_EXISTS\n\n  }\n}\n\n\n\n\nInvalid Topics name\n\n\n{\n  \nerror\n: {\n    \ncode\n: 400,\n    \nmessage\n: \nInvalid topics name\n,\n    \nstatus\n: \nINVALID_ARGUMENT\n\n  }\n}\n\n\n\n\nGet a subscription that doesn\u2019t exist\n\n\n{\n  \nerror\n: {\n    \ncode\n: 404,\n    \nmessage\n: \nSubscription does not exist\n,\n    \nstatus\n: \nNOT_FOUND\n\n  }\n}", 
            "title": "API Error Messages"
        }, 
        {
            "location": "/api_errors/#errors", 
            "text": "In case of Error during handling user\u2019s request the API responds using the following schema  {\n    error : {\n       code : 500,\n       message :  Something bad happened ,\n       errors : [\n         {\n             message :  Something bad happened ,\n             domain :  global ,\n             reason :  backend \n         }\n      ],\n       status :  INTERNAL \n   }\n}  Most of the times the errors array is empty thus omitted such as:  {\n    error : {\n       code : 500,\n       message :  Something bad happened ,\n       status :  INTERNAL \n   }\n}", 
            "title": "Errors"
        }, 
        {
            "location": "/api_errors/#captured-errors-from-usage-scenarios", 
            "text": "Put topic with the same name  {\n   error : {\n     code : 409,\n     message :  Topic already exists ,\n     status :  ALREADY_EXISTS \n  }\n}  Put subscription with the same name  {\n   error : {\n     code : 409,\n     message :  Subscription already exists ,\n     status :  ALREADY_EXISTS \n  }\n}  Invalid Topics name  {\n   error : {\n     code : 400,\n     message :  Invalid topics name ,\n     status :  INVALID_ARGUMENT \n  }\n}  Get a subscription that doesn\u2019t exist  {\n   error : {\n     code : 404,\n     message :  Subscription does not exist ,\n     status :  NOT_FOUND \n  }\n}", 
            "title": "Captured Errors from usage scenarios"
        }
    ]
}