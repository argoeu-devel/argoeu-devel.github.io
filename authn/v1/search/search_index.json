{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"api_authmethods/","text":"Auth method API Calls [POST] Manage Auth Methods - Create New Auth Method This request creates a new auth method for the given service type. The type of the auth method as well as some of its predefined fields will be decided by the service-type's auth_method and type fields. E.g. for a service-type of type ams with an auth_method of type api-key , it will create an api-key auth method with predeclared fields for path and retrieval_field that are common across all type ams service-types. Of course you can always override the default's if you like. API Key Auth methods Fields path: Combined with the host and the port is represents the URL where the external resource is located. We use it to map the x509 certificate or any other auth mechanism to the needed token access_key: In the case of an api-key method, the access key specifies te key to use in order to access the external resource Request POST /v1/service-types/{Name}/authm` Example request curl -X POST -H Content-Type: application/json https://{URL}/v1/service-types/{Name}/authm?key={key_in_the_config} Post Body { access_key : key1 , host : 127.0.0.1 , port : 9000, } Headers Auth methods Fields path: Combined with the host and the port is represents the URL where the external resource is located. We use it to map the x509 certificate or any other auth mechanism to the needed token headers: A collection of key value pairs that will be used as request headers when accessing the respective service type Request POST /v1/service-types/{Name}/authm` Example request curl -X POST -H Content-Type: application/json https://{URL}/v1/service-types/{Name}/authm?key={key_in_the_config} Post Body { headers : { header-1 : value-1 , header-2 : value-2 }, host : 127.0.0.1 , port : 9000 } Response If the request is successful, the response contains the newly created auth method. Success Response 201 CREATED { access_key : key1 , host : 127.0.0.1 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 9000, type : api-key , uuid : da22b2d4-8ip0-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z } Please refer to section Errors to see all possible Errors [GET] Manage Auth Methods - List One Auth Method Request GET /v1/services/{service}/hosts/{host}/authm Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/services/{service}/hosts/{host}/authm?key={key_in_the_config} If the request is successful, the response contains information for the requested auth method. Success Response 200 OK { access_key : key1 , host : 127.0.0.1 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 9000, type : api-key , uuid : da22b2d4-8ip0-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z } Please refer to section Errors to see all possible Errors [GET] Manage Auth Methods - List All Auth Methods Request GET /v1/authm` Example request curl -X GET -H Content-Type: application/json https://{URL}/v1/authm?key={key_in_the_config} If the request is successful, the response contains information for all the auth methods. Success Response 200 OK { auth_methods : [ { access_key : key1 , host : 127.0.0.1 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 9000, type : api-key , uuid : da22b2d4-8ip0-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z }, { access_key : key1 , host : host2 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 9000, type : api-key , uuid : da22b2d4-9kl2-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z } ] } Please refer to section Errors to see all possible Errors [PUT] Manage Auth Methods - Update an existing auth method This request updates the auth method for the given service-type and host. This request can update one or more fields with one call. PUT /v1/service-types/{service-type}/hosts/{host}/authm Example request curl -X PUT -H Content-Type: application/json https://{URL}/v1/service-types/{Name}/authm?key={key_in_the_config} Post Body { port : 8080, access_key : key2 } Response If the request is successful, the response contains the updated auth method. Success Response 200 OK { access_key : key2 , host : 127.0.0.1 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 8080, type : api-key , uuid : da22b2d4-8ip0-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z } Please refer to section Errors to see all possible Errors [DELETE] Manage Auth Methods - Delete an auth method This request deletes an auth method associated with the provided service-type and host. Request DELETE /v1/service-types/{service-type}/hosts/{host}/authm Response If the request is successful, the response is empty. Success Response 204 No Content Please refer to section Errors to see all possible Errors","title":"API Auth Methods"},{"location":"api_authmethods/#auth-method-api-calls","text":"","title":"Auth method API Calls"},{"location":"api_authmethods/#post-manage-auth-methods-create-new-auth-method","text":"This request creates a new auth method for the given service type. The type of the auth method as well as some of its predefined fields will be decided by the service-type's auth_method and type fields. E.g. for a service-type of type ams with an auth_method of type api-key , it will create an api-key auth method with predeclared fields for path and retrieval_field that are common across all type ams service-types. Of course you can always override the default's if you like.","title":"[POST] Manage Auth Methods - Create New Auth Method"},{"location":"api_authmethods/#api-key-auth-methods","text":"","title":"API Key Auth methods"},{"location":"api_authmethods/#fields","text":"path: Combined with the host and the port is represents the URL where the external resource is located. We use it to map the x509 certificate or any other auth mechanism to the needed token access_key: In the case of an api-key method, the access key specifies te key to use in order to access the external resource","title":"Fields"},{"location":"api_authmethods/#request","text":"POST /v1/service-types/{Name}/authm`","title":"Request"},{"location":"api_authmethods/#example-request","text":"curl -X POST -H Content-Type: application/json https://{URL}/v1/service-types/{Name}/authm?key={key_in_the_config}","title":"Example request"},{"location":"api_authmethods/#post-body","text":"{ access_key : key1 , host : 127.0.0.1 , port : 9000, }","title":"Post Body"},{"location":"api_authmethods/#headers-auth-methods","text":"","title":"Headers Auth methods"},{"location":"api_authmethods/#fields_1","text":"path: Combined with the host and the port is represents the URL where the external resource is located. We use it to map the x509 certificate or any other auth mechanism to the needed token headers: A collection of key value pairs that will be used as request headers when accessing the respective service type","title":"Fields"},{"location":"api_authmethods/#request_1","text":"POST /v1/service-types/{Name}/authm`","title":"Request"},{"location":"api_authmethods/#example-request_1","text":"curl -X POST -H Content-Type: application/json https://{URL}/v1/service-types/{Name}/authm?key={key_in_the_config}","title":"Example request"},{"location":"api_authmethods/#post-body_1","text":"{ headers : { header-1 : value-1 , header-2 : value-2 }, host : 127.0.0.1 , port : 9000 }","title":"Post Body"},{"location":"api_authmethods/#response","text":"If the request is successful, the response contains the newly created auth method. Success Response 201 CREATED { access_key : key1 , host : 127.0.0.1 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 9000, type : api-key , uuid : da22b2d4-8ip0-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z } Please refer to section Errors to see all possible Errors","title":"Response"},{"location":"api_authmethods/#get-manage-auth-methods-list-one-auth-method","text":"","title":"[GET] Manage Auth Methods - List One Auth Method"},{"location":"api_authmethods/#request_2","text":"GET /v1/services/{service}/hosts/{host}/authm","title":"Request"},{"location":"api_authmethods/#example-request_2","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/services/{service}/hosts/{host}/authm?key={key_in_the_config} If the request is successful, the response contains information for the requested auth method.","title":"Example request"},{"location":"api_authmethods/#success-response","text":"200 OK { access_key : key1 , host : 127.0.0.1 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 9000, type : api-key , uuid : da22b2d4-8ip0-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z } Please refer to section Errors to see all possible Errors","title":"Success Response"},{"location":"api_authmethods/#get-manage-auth-methods-list-all-auth-methods","text":"","title":"[GET] Manage Auth Methods - List All Auth Methods"},{"location":"api_authmethods/#request_3","text":"GET /v1/authm`","title":"Request"},{"location":"api_authmethods/#example-request_3","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/authm?key={key_in_the_config} If the request is successful, the response contains information for all the auth methods.","title":"Example request"},{"location":"api_authmethods/#success-response_1","text":"200 OK { auth_methods : [ { access_key : key1 , host : 127.0.0.1 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 9000, type : api-key , uuid : da22b2d4-8ip0-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z }, { access_key : key1 , host : host2 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 9000, type : api-key , uuid : da22b2d4-9kl2-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z } ] } Please refer to section Errors to see all possible Errors","title":"Success Response"},{"location":"api_authmethods/#put-manage-auth-methods-update-an-existing-auth-method","text":"This request updates the auth method for the given service-type and host. This request can update one or more fields with one call. PUT /v1/service-types/{service-type}/hosts/{host}/authm","title":"[PUT] Manage Auth Methods - Update an existing auth method"},{"location":"api_authmethods/#example-request_4","text":"curl -X PUT -H Content-Type: application/json https://{URL}/v1/service-types/{Name}/authm?key={key_in_the_config}","title":"Example request"},{"location":"api_authmethods/#post-body_2","text":"{ port : 8080, access_key : key2 }","title":"Post Body"},{"location":"api_authmethods/#response_1","text":"If the request is successful, the response contains the updated auth method. Success Response 200 OK { access_key : key2 , host : 127.0.0.1 , service_uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , port : 8080, type : api-key , uuid : da22b2d4-8ip0-43ca-b28d-500sd0a5d876e , created_on : 2018-05-05T18:04:05Z } Please refer to section Errors to see all possible Errors","title":"Response"},{"location":"api_authmethods/#delete-manage-auth-methods-delete-an-auth-method","text":"This request deletes an auth method associated with the provided service-type and host.","title":"[DELETE] Manage Auth Methods - Delete an auth method"},{"location":"api_authmethods/#request_4","text":"DELETE /v1/service-types/{service-type}/hosts/{host}/authm","title":"Request"},{"location":"api_authmethods/#response_2","text":"If the request is successful, the response is empty.","title":"Response"},{"location":"api_authmethods/#success-response_2","text":"204 No Content Please refer to section Errors to see all possible Errors","title":"Success Response"},{"location":"api_bindings/","text":"Binding API Calls This documentation file contains guidelines in order to interact with the binding entity. A binding, is a structure that maps various forms of authentication to the credentials of a service type's \"user\" entity. For example, a service type's \"user\", requires an api token to authenticate to its respective service type. This token should be either remembered by the \"user\" or retrieved using some form of credentials. A binding will hold additional information like a DN or an OIDC Token(in the auth_identifier field), that can be used to retrieve the required api token. A binding is associated with the uuid of a service type,the host on which this service type runs on, It also requires the unique_key that the service type that is associated with, uses in order to expose its \"user's\" information. [POST] Manage Bindings - Create New Binding This request creates a new binding. Request POST /v1/bindings` Example request curl -X POST -H Content-Type: application/json https://{URL}/v1/bindings?key={key_in_the_config} Post Body { name : b1 , service_uuid : b61030d9-bef3-4768-9a03-7b1ff36e8af4cc , host : host1 , auth_identifier : dn , auth_type : x509 , unique_key : key } Response If the request is successful, the response contains the newly created binding. Success Response 201 CREATED { name : b1 , service_uuid : b61030d9-bef3-4768-9a03-7b1ff36e8af4cc , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , auth_identifier : dn , unique_key : key , auth_type : x509 , created_on : 2018-05-24T09:58:17Z } Errors Please refer to section Errors to see all possible Errors [GET] Manage Bindings - List All Bindings This request lists all bindings that are currently present in th service. Request GET /v1/bindings Response If the request is successful, the response contains all the bindings in the service. Success Response 200 OK { bindings : [ { name : testb , service_uuid : uuid1 , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , auth_identifier : testdn , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:25Z , last_auth : 2018-05-23T09:25:25Z }, { name : testb2 , service_uuid : uuid1 , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4rr , auth_identifier : testdn , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:43Z , last_auth : 2018-05-23T09:25:25Z } ] } Errors Please refer to section Errors to see all possible Errors [GET] Manage Bindings - List All Bindings By Service Type And Host This request returns all the bindings under the specified service type and host. Request GET /v1/service-types/{service-type}/hosts/{host}/bindings` Response If the request is successful, the response contains all the bindings under the given host and service. Success Response 200 OK { bindings : [ { name : testb , service_uuid : uuid1 , host : host1 , auth_identifier : testdn , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:25Z , last_auth : 2018-05-23T09:25:25Z }, { name : testb2 , service_uuid : uuid1 , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4rr , auth_identifier : testdn , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:43Z , last_auth : 2018-05-23T09:25:25Z } ] } Errors Please refer to section Errors to see all possible Errors [GET] Manage Bindings - List One Binding By UUID This request retrieves the information of a binding associated with the provided uuid. Request GET /v1/bindings/{uuid} Response If the request is successful, the response contains the binding associated with the given uuid Success Response 200 OK { name : testb , service_uuid : uuid1 , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , auth_identifier : testdn , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:25Z , last_auth : 2018-05-23T09:25:25Z } Errors Please refer to section Errors to see all possible Errors [PUT] Manage Bindings - Update a Binding This request updates binding. You can specify one or more fields to update. The allowed to be updated fields are: name, service_uuid, host, dn, oidc_token, unique_key . Request PUT /v1/bindings/{uuid} Request Body { name : b1_updated } Response If the request is successful, the response contains the updated binding. Success Response 200 OK { name : b1_updated , service_uuid : b61030d9-bef3-4768-9a03-7b1ff36e8af4cc , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , auth_identifier : host1 , unique_key : key , auth_type : x509 , created_on : 2018-05-24T09:58:17Z } Errors Please refer to section Errors to see all possible Errors [DELETE] Manage Bindings - Delete a Binding This request deletes a binding. Request DELETE /v1/bindings/{uuid}` Response If the request is successful, the response is empty. Success Response 204 No Content","title":"API Bindings"},{"location":"api_bindings/#binding-api-calls","text":"This documentation file contains guidelines in order to interact with the binding entity. A binding, is a structure that maps various forms of authentication to the credentials of a service type's \"user\" entity. For example, a service type's \"user\", requires an api token to authenticate to its respective service type. This token should be either remembered by the \"user\" or retrieved using some form of credentials. A binding will hold additional information like a DN or an OIDC Token(in the auth_identifier field), that can be used to retrieve the required api token. A binding is associated with the uuid of a service type,the host on which this service type runs on, It also requires the unique_key that the service type that is associated with, uses in order to expose its \"user's\" information.","title":"Binding API Calls"},{"location":"api_bindings/#post-manage-bindings-create-new-binding","text":"This request creates a new binding.","title":"[POST] Manage Bindings - Create New Binding"},{"location":"api_bindings/#request","text":"POST /v1/bindings`","title":"Request"},{"location":"api_bindings/#example-request","text":"curl -X POST -H Content-Type: application/json https://{URL}/v1/bindings?key={key_in_the_config}","title":"Example request"},{"location":"api_bindings/#post-body","text":"{ name : b1 , service_uuid : b61030d9-bef3-4768-9a03-7b1ff36e8af4cc , host : host1 , auth_identifier : dn , auth_type : x509 , unique_key : key }","title":"Post Body"},{"location":"api_bindings/#response","text":"If the request is successful, the response contains the newly created binding. Success Response 201 CREATED { name : b1 , service_uuid : b61030d9-bef3-4768-9a03-7b1ff36e8af4cc , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , auth_identifier : dn , unique_key : key , auth_type : x509 , created_on : 2018-05-24T09:58:17Z }","title":"Response"},{"location":"api_bindings/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_bindings/#get-manage-bindings-list-all-bindings","text":"This request lists all bindings that are currently present in th service.","title":"[GET] Manage Bindings - List All Bindings"},{"location":"api_bindings/#request_1","text":"GET /v1/bindings","title":"Request"},{"location":"api_bindings/#response_1","text":"If the request is successful, the response contains all the bindings in the service.","title":"Response"},{"location":"api_bindings/#success-response","text":"200 OK { bindings : [ { name : testb , service_uuid : uuid1 , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , auth_identifier : testdn , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:25Z , last_auth : 2018-05-23T09:25:25Z }, { name : testb2 , service_uuid : uuid1 , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4rr , auth_identifier : testdn , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:43Z , last_auth : 2018-05-23T09:25:25Z } ] }","title":"Success Response"},{"location":"api_bindings/#errors_1","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_bindings/#get-manage-bindings-list-all-bindings-by-service-type-and-host","text":"This request returns all the bindings under the specified service type and host.","title":"[GET] Manage Bindings - List All Bindings By Service Type And Host"},{"location":"api_bindings/#request_2","text":"GET /v1/service-types/{service-type}/hosts/{host}/bindings`","title":"Request"},{"location":"api_bindings/#response_2","text":"If the request is successful, the response contains all the bindings under the given host and service.","title":"Response"},{"location":"api_bindings/#success-response_1","text":"200 OK { bindings : [ { name : testb , service_uuid : uuid1 , host : host1 , auth_identifier : testdn , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:25Z , last_auth : 2018-05-23T09:25:25Z }, { name : testb2 , service_uuid : uuid1 , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4rr , auth_identifier : testdn , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:43Z , last_auth : 2018-05-23T09:25:25Z } ] }","title":"Success Response"},{"location":"api_bindings/#errors_2","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_bindings/#get-manage-bindings-list-one-binding-by-uuid","text":"This request retrieves the information of a binding associated with the provided uuid.","title":"[GET] Manage Bindings - List One Binding By UUID"},{"location":"api_bindings/#request_3","text":"GET /v1/bindings/{uuid}","title":"Request"},{"location":"api_bindings/#response_3","text":"If the request is successful, the response contains the binding associated with the given uuid","title":"Response"},{"location":"api_bindings/#success-response_2","text":"200 OK { name : testb , service_uuid : uuid1 , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , auth_identifier : testdn , unique_key : key , auth_type : x509 , created_on : 2018-05-23T09:25:25Z , last_auth : 2018-05-23T09:25:25Z }","title":"Success Response"},{"location":"api_bindings/#errors_3","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_bindings/#put-manage-bindings-update-a-binding","text":"This request updates binding. You can specify one or more fields to update. The allowed to be updated fields are: name, service_uuid, host, dn, oidc_token, unique_key .","title":"[PUT] Manage Bindings - Update a Binding"},{"location":"api_bindings/#request_4","text":"PUT /v1/bindings/{uuid}","title":"Request"},{"location":"api_bindings/#request-body","text":"{ name : b1_updated }","title":"Request Body"},{"location":"api_bindings/#response_4","text":"If the request is successful, the response contains the updated binding.","title":"Response"},{"location":"api_bindings/#success-response_3","text":"200 OK { name : b1_updated , service_uuid : b61030d9-bef3-4768-9a03-7b1ff36e8af4cc , host : host1 , uuid : p61020d9-bef3-4768-9a03-331ff36e8af4cc , auth_identifier : host1 , unique_key : key , auth_type : x509 , created_on : 2018-05-24T09:58:17Z }","title":"Success Response"},{"location":"api_bindings/#errors_4","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_bindings/#delete-manage-bindings-delete-a-binding","text":"This request deletes a binding.","title":"[DELETE] Manage Bindings - Delete a Binding"},{"location":"api_bindings/#request_5","text":"DELETE /v1/bindings/{uuid}`","title":"Request"},{"location":"api_bindings/#response_5","text":"If the request is successful, the response is empty.","title":"Response"},{"location":"api_bindings/#success-response_4","text":"204 No Content","title":"Success Response"},{"location":"api_errors/","text":"Errors In case of an Error during handling a user\u2019s request, the API responds using the following schema: { error : { code : 500, message : Something bad happened , status : INTERNAL } } Error Codes The following error codes are the possible errors of all methods Error Code Status Related Requests Invalid JSON 400 BAD REQUEST Create Service (POST) Not found 404 NOT FOUND List One service(GET) Service already exists 409 CONFLICT Create Service (POST) Service Invalid Argument 422 UNPROCCESABLE ENTITY Create Service (POST) Server Error 500 INTERNAL SERVER ERROR ALL","title":"API Error Messages"},{"location":"api_errors/#errors","text":"In case of an Error during handling a user\u2019s request, the API responds using the following schema: { error : { code : 500, message : Something bad happened , status : INTERNAL } }","title":"Errors"},{"location":"api_errors/#error-codes","text":"The following error codes are the possible errors of all methods Error Code Status Related Requests Invalid JSON 400 BAD REQUEST Create Service (POST) Not found 404 NOT FOUND List One service(GET) Service already exists 409 CONFLICT Create Service (POST) Service Invalid Argument 422 UNPROCCESABLE ENTITY Create Service (POST) Server Error 500 INTERNAL SERVER ERROR ALL","title":"Error Codes"},{"location":"api_service_types/","text":"Service API Calls [POST] Manage Service Types - Create New Service Type This request creates a new service type. Request POST /v1/service-types auth_types: This field refers to the authentication types that the service type wishes to support.The provided authentication types should also be supported by the authn service. E.g. a service type wishes to use an authentication type of x509 certificate, meaning that it will enable its users to use x509 certificates as an alternative authentication mechanism.The authn service will use an internal handler to map x509 certificates to a service-types credentials, so when declaring an auth-type, it needs to be first, supported by the authn-service itself. auth_method : This field refers to the authentication method that the service type uses in order to authenticate requests against it.The specified authentication method should also be supported by the authn service. E.g. a service type can use the api-key authentication method which means that it uses an api key/token to authenticate/authorize requests against it. Each authentication method uses an internal handler from the authn service in order to be executed, that's why the declared authentication method must be supported. retrieval_field :The field refers to the response's field from the respective service type, which will contain the token we need. E.g. when accessing a service type's users, the response's field that might contain the token we are looking for, might come in different placeholders, like, access_token, token, jwt, etc. Example request curl -X POST -H Content-Type: application/json https://{URL}/v1/service-types?key={key_in_the_config} Post Body { name : string , hosts : [ host1 , host2 ], auth_types : [ x509 , oidc ], auth_method : api-key , type : ams } Response If the request is successful, the response contains the newly created service type. Success Response 201 CREATED { name : string , hosts : [ host1 , host2 ], auth_types : [ x509 , oidc ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400cd0a5d83e , type : ams , created_on : 2018-05-05T18:04:05Z } Errors Please refer to section Errors to see all possible Errors [GET] Manage Service Types - List All Service Types Request GET/v1/service-types Response If the request is successful, the response contains all the service types. Success Response 200 OK { service_types : [ { name : s1 , hosts : [ example.gr , 127.0.0.1 ], auth_types : [ x509 ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400cd0a5d83e , type : ams , created_on : }, { name : s2 , hosts : [ 127.0.0.1 , example2.gr ], auth_types : [ x509 , oidc ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , type : ams , created_on : 2018-05-13T21:52:58Z } ] } Errors Please refer to section Errors to see all possible Errors [GET] Manage Service Types - List One Service Type Request GET/v1/service-types/{NAME} If the request is successful, the response contains information for the requested service type. Success Response 200 OK { name : string , hosts : [ host1 , host2 ], auth_types : [ x509 , oidc ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400cd0a5d83e , type : ams , created_on : 2018-05-05T18:04:05Z } Please refer to section Errors to see all possible Errors [PUT] Manage Service Types - Update a Service Type This request updates a service type. You can specify one or more fields to update. The allowed to be updated fields are: name, hosts, auth_types, auth_method . Request PUT /v1/service-type/{service-type} Request Body { name : s1_updated } Response If the request is successful, the response contains the updated service type. Success Response 200 OK { name : s1_updated , hosts : [ host1 , host2 ], auth_types : [ x509 , oidc ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400cd0a5d83e , type : ams , created_on : 2018-05-05T18:04:05Z } Errors Please refer to section Errors to see all possible Errors","title":"API Service Types"},{"location":"api_service_types/#service-api-calls","text":"","title":"Service API Calls"},{"location":"api_service_types/#post-manage-service-types-create-new-service-type","text":"This request creates a new service type.","title":"[POST] Manage Service Types - Create New Service Type"},{"location":"api_service_types/#request","text":"POST /v1/service-types auth_types: This field refers to the authentication types that the service type wishes to support.The provided authentication types should also be supported by the authn service. E.g. a service type wishes to use an authentication type of x509 certificate, meaning that it will enable its users to use x509 certificates as an alternative authentication mechanism.The authn service will use an internal handler to map x509 certificates to a service-types credentials, so when declaring an auth-type, it needs to be first, supported by the authn-service itself. auth_method : This field refers to the authentication method that the service type uses in order to authenticate requests against it.The specified authentication method should also be supported by the authn service. E.g. a service type can use the api-key authentication method which means that it uses an api key/token to authenticate/authorize requests against it. Each authentication method uses an internal handler from the authn service in order to be executed, that's why the declared authentication method must be supported. retrieval_field :The field refers to the response's field from the respective service type, which will contain the token we need. E.g. when accessing a service type's users, the response's field that might contain the token we are looking for, might come in different placeholders, like, access_token, token, jwt, etc.","title":"Request"},{"location":"api_service_types/#example-request","text":"curl -X POST -H Content-Type: application/json https://{URL}/v1/service-types?key={key_in_the_config}","title":"Example request"},{"location":"api_service_types/#post-body","text":"{ name : string , hosts : [ host1 , host2 ], auth_types : [ x509 , oidc ], auth_method : api-key , type : ams }","title":"Post Body"},{"location":"api_service_types/#response","text":"If the request is successful, the response contains the newly created service type.","title":"Response"},{"location":"api_service_types/#success-response","text":"201 CREATED { name : string , hosts : [ host1 , host2 ], auth_types : [ x509 , oidc ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400cd0a5d83e , type : ams , created_on : 2018-05-05T18:04:05Z }","title":"Success Response"},{"location":"api_service_types/#errors","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_service_types/#get-manage-service-types-list-all-service-types","text":"","title":"[GET] Manage Service Types - List All Service Types"},{"location":"api_service_types/#request_1","text":"GET/v1/service-types","title":"Request"},{"location":"api_service_types/#response_1","text":"If the request is successful, the response contains all the service types.","title":"Response"},{"location":"api_service_types/#success-response_1","text":"200 OK { service_types : [ { name : s1 , hosts : [ example.gr , 127.0.0.1 ], auth_types : [ x509 ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400cd0a5d83e , type : ams , created_on : }, { name : s2 , hosts : [ 127.0.0.1 , example2.gr ], auth_types : [ x509 , oidc ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400sd0a5d83e , type : ams , created_on : 2018-05-13T21:52:58Z } ] }","title":"Success Response"},{"location":"api_service_types/#errors_1","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"api_service_types/#get-manage-service-types-list-one-service-type","text":"","title":"[GET] Manage Service Types - List One Service Type"},{"location":"api_service_types/#request_2","text":"GET/v1/service-types/{NAME} If the request is successful, the response contains information for the requested service type.","title":"Request"},{"location":"api_service_types/#success-response_2","text":"200 OK { name : string , hosts : [ host1 , host2 ], auth_types : [ x509 , oidc ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400cd0a5d83e , type : ams , created_on : 2018-05-05T18:04:05Z } Please refer to section Errors to see all possible Errors","title":"Success Response"},{"location":"api_service_types/#put-manage-service-types-update-a-service-type","text":"This request updates a service type. You can specify one or more fields to update. The allowed to be updated fields are: name, hosts, auth_types, auth_method .","title":"[PUT] Manage Service Types - Update a Service Type"},{"location":"api_service_types/#request_3","text":"PUT /v1/service-type/{service-type}","title":"Request"},{"location":"api_service_types/#request-body","text":"{ name : s1_updated }","title":"Request Body"},{"location":"api_service_types/#response_2","text":"If the request is successful, the response contains the updated service type.","title":"Response"},{"location":"api_service_types/#success-response_3","text":"200 OK { name : s1_updated , hosts : [ host1 , host2 ], auth_types : [ x509 , oidc ], auth_method : api-key , uuid : da22b2d4-ba6c-43ca-b28d-400cd0a5d83e , type : ams , created_on : 2018-05-05T18:04:05Z }","title":"Success Response"},{"location":"api_service_types/#errors_2","text":"Please refer to section Errors to see all possible Errors","title":"Errors"},{"location":"auth_certificate/","text":"Authenticate Using an x509 certificate [GET] Authenticate Via x509 This request will use the provided x509 certificate in order to retrieve a token from the given service type. Make sure that the specified service type configuration has x509 auth type declared. Example Request curl -X GET -H Content-Type: application/json https://{URL}/v1/service-types/{Name}/hosts/{host}:authx509 --cert /path/to/a/cert/file --key /path/to/the/respective/key -k Response If the request is successful, the response contains the token that is associated with the provided certificate. Success Response 200 OK { \"token\": \"some-service-type-token\" }","title":"API Certificate Functionality"},{"location":"auth_certificate/#authenticate-using-an-x509-certificate","text":"","title":"Authenticate Using an x509 certificate"},{"location":"auth_certificate/#get-authenticate-via-x509","text":"This request will use the provided x509 certificate in order to retrieve a token from the given service type. Make sure that the specified service type configuration has x509 auth type declared.","title":"[GET] Authenticate Via x509"},{"location":"auth_certificate/#example-request","text":"curl -X GET -H Content-Type: application/json https://{URL}/v1/service-types/{Name}/hosts/{host}:authx509 --cert /path/to/a/cert/file --key /path/to/the/respective/key -k","title":"Example Request"},{"location":"auth_certificate/#response","text":"If the request is successful, the response contains the token that is associated with the provided certificate. Success Response 200 OK { \"token\": \"some-service-type-token\" }","title":"Response"}]}